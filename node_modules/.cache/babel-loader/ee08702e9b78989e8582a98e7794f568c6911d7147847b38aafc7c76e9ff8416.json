{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst constants_1 = require(\"./wire_protocol/constants\");\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nclass MessageStream extends stream_1.Duplex {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    /** @internal */\n    this.isMonitoringConnection = false;\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n    this[kBuffer] = new utils_1.BufferPool();\n  }\n  get buffer() {\n    return this[kBuffer];\n  }\n  _write(chunk, _, callback) {\n    this[kBuffer].append(chunk);\n    processIncomingData(this, callback);\n  }\n  _read( /* size */\n  ) {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n  writeCommand(command, operationDescription) {\n    // TODO: agreed compressor should live in `StreamDescription`\n    const compressorName = operationDescription && operationDescription.agreedCompressor ? operationDescription.agreedCompressor : 'none';\n    if (compressorName === 'none' || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    }\n    // otherwise, compress the message\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n    // Compress the message body\n    (0, compression_1.compress)({\n      options: operationDescription\n    }, messageToBeCompressed, (err, compressedMessage) => {\n      if (err || !compressedMessage) {\n        operationDescription.cb(err);\n        return;\n      }\n      // Create the msgHeader of OP_COMPRESSED\n      const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n      msgHeader.writeInt32LE(command.requestId, 4); // requestID\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n      msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n      // Create the compression details of OP_COMPRESSED\n      const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n      compressionDetails.writeUInt8(compression_1.Compressor[compressorName], 8); // compressorID\n      this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n    });\n  }\n}\nexports.MessageStream = MessageStream;\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command) {\n  const commandDoc = command instanceof commands_1.Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !compression_1.uncompressibleCommands.has(commandName);\n}\nfunction processIncomingData(stream, callback) {\n  const buffer = stream[kBuffer];\n  if (buffer.length < 4) {\n    callback();\n    return;\n  }\n  const sizeOfMessage = buffer.peek(4).readInt32LE();\n  if (sizeOfMessage < 0) {\n    callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    return;\n  }\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`));\n    return;\n  }\n  if (sizeOfMessage > buffer.length) {\n    callback();\n    return;\n  }\n  const message = buffer.read(sizeOfMessage);\n  const messageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n  const monitorHasAnotherHello = () => {\n    if (stream.isMonitoringConnection) {\n      // Can we read the next message size?\n      if (buffer.length >= 4) {\n        const sizeOfMessage = buffer.peek(4).readInt32LE();\n        if (sizeOfMessage <= buffer.length) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  let ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n  if (messageHeader.opCode !== constants_1.OP_COMPRESSED) {\n    const messageBody = message.slice(MESSAGE_HEADER_SIZE);\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      processIncomingData(stream, callback);\n    } else {\n      stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n      if (buffer.length >= 4) {\n        processIncomingData(stream, callback);\n      } else {\n        callback();\n      }\n    }\n    return;\n  }\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n  // recalculate based on wrapped opcode\n  ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n  (0, compression_1.decompress)(compressorID, compressedBuffer, (err, messageBody) => {\n    if (err || !messageBody) {\n      callback(err);\n      return;\n    }\n    if (messageBody.length !== messageHeader.length) {\n      callback(new error_1.MongoDecompressionError('Message body and message header must be the same length'));\n      return;\n    }\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      processIncomingData(stream, callback);\n    } else {\n      stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n      if (buffer.length >= 4) {\n        processIncomingData(stream, callback);\n      } else {\n        callback();\n      }\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["MESSAGE_HEADER_SIZE","COMPRESSION_DETAILS_SIZE","kDefaultMaxBsonMessageSize","kBuffer","Symbol","MessageStream","stream_1","constructor","options","maxBsonMessageSize","utils_1","buffer","_write","chunk","_","callback","append","processIncomingData","_read","writeCommand","command","operationDescription","compressorName","agreedCompressor","canCompress","data","toBin","push","Array","isArray","Buffer","concat","concatenatedOriginalCommandBuffer","messageToBeCompressed","slice","originalCommandOpCode","readInt32LE","err","compressedMessage","cb","msgHeader","alloc","writeInt32LE","length","requestId","constants_1","compressionDetails","writeUInt8","compression_1","exports","commandDoc","commands_1","query","commandName","Object","keys","has","stream","sizeOfMessage","peek","error_1","message","read","messageHeader","responseTo","opCode","monitorHasAnotherHello","isMonitoringConnection","ResponseType","messageBody","emit","fromCompressed","compressorID","compressedBuffer"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cmap/message_stream.ts"],"sourcesContent":["import { Duplex, DuplexOptions } from 'stream';\n\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport { MongoDecompressionError, MongoParseError } from '../error';\nimport type { ClientSession } from '../sessions';\nimport { BufferPool, Callback } from '../utils';\nimport { BinMsg, MessageHeader, Msg, Response, WriteProtocolMessageType } from './commands';\nimport {\n  compress,\n  Compressor,\n  CompressorName,\n  decompress,\n  uncompressibleCommands\n} from './wire_protocol/compression';\nimport { OP_COMPRESSED, OP_MSG } from './wire_protocol/constants';\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n\n/** @internal */\nexport interface MessageStreamOptions extends DuplexOptions {\n  maxBsonMessageSize?: number;\n}\n\n/** @internal */\nexport interface OperationDescription extends BSONSerializeOptions {\n  started: number;\n  cb: Callback<Document>;\n  command: boolean;\n  documentsReturnedIn?: string;\n  noResponse: boolean;\n  raw: boolean;\n  requestId: number;\n  session?: ClientSession;\n  socketTimeoutOverride?: boolean;\n  agreedCompressor?: CompressorName;\n  zlibCompressionLevel?: number;\n  $clusterTime?: Document;\n}\n\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nexport class MessageStream extends Duplex {\n  /** @internal */\n  maxBsonMessageSize: number;\n  /** @internal */\n  [kBuffer]: BufferPool;\n  /** @internal */\n  isMonitoringConnection = false;\n\n  constructor(options: MessageStreamOptions = {}) {\n    super(options);\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n    this[kBuffer] = new BufferPool();\n  }\n\n  get buffer(): BufferPool {\n    return this[kBuffer];\n  }\n\n  override _write(chunk: Buffer, _: unknown, callback: Callback<Buffer>): void {\n    this[kBuffer].append(chunk);\n    processIncomingData(this, callback);\n  }\n\n  override _read(/* size */): void {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n\n  writeCommand(\n    command: WriteProtocolMessageType,\n    operationDescription: OperationDescription\n  ): void {\n    // TODO: agreed compressor should live in `StreamDescription`\n    const compressorName: CompressorName =\n      operationDescription && operationDescription.agreedCompressor\n        ? operationDescription.agreedCompressor\n        : 'none';\n    if (compressorName === 'none' || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    }\n    // otherwise, compress the message\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n    // Compress the message body\n    compress({ options: operationDescription }, messageToBeCompressed, (err, compressedMessage) => {\n      if (err || !compressedMessage) {\n        operationDescription.cb(err);\n        return;\n      }\n\n      // Create the msgHeader of OP_COMPRESSED\n      const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(\n        MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,\n        0\n      ); // messageLength\n      msgHeader.writeInt32LE(command.requestId, 4); // requestID\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n      msgHeader.writeInt32LE(OP_COMPRESSED, 12); // opCode\n\n      // Create the compression details of OP_COMPRESSED\n      const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n      compressionDetails.writeUInt8(Compressor[compressorName], 8); // compressorID\n      this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n    });\n  }\n}\n\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command: WriteProtocolMessageType) {\n  const commandDoc = command instanceof Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !uncompressibleCommands.has(commandName);\n}\n\nfunction processIncomingData(stream: MessageStream, callback: Callback<Buffer>) {\n  const buffer = stream[kBuffer];\n  if (buffer.length < 4) {\n    callback();\n    return;\n  }\n\n  const sizeOfMessage = buffer.peek(4).readInt32LE();\n  if (sizeOfMessage < 0) {\n    callback(new MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    return;\n  }\n\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    callback(\n      new MongoParseError(\n        `Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`\n      )\n    );\n    return;\n  }\n\n  if (sizeOfMessage > buffer.length) {\n    callback();\n    return;\n  }\n\n  const message = buffer.read(sizeOfMessage);\n  const messageHeader: MessageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n\n  const monitorHasAnotherHello = () => {\n    if (stream.isMonitoringConnection) {\n      // Can we read the next message size?\n      if (buffer.length >= 4) {\n        const sizeOfMessage = buffer.peek(4).readInt32LE();\n        if (sizeOfMessage <= buffer.length) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  let ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  if (messageHeader.opCode !== OP_COMPRESSED) {\n    const messageBody = message.slice(MESSAGE_HEADER_SIZE);\n\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      processIncomingData(stream, callback);\n    } else {\n      stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n      if (buffer.length >= 4) {\n        processIncomingData(stream, callback);\n      } else {\n        callback();\n      }\n    }\n\n    return;\n  }\n\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID: Compressor = message[MESSAGE_HEADER_SIZE + 8] as Compressor;\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n\n  // recalculate based on wrapped opcode\n  ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  decompress(compressorID, compressedBuffer, (err, messageBody) => {\n    if (err || !messageBody) {\n      callback(err);\n      return;\n    }\n\n    if (messageBody.length !== messageHeader.length) {\n      callback(\n        new MongoDecompressionError('Message body and message header must be the same length')\n      );\n\n      return;\n    }\n\n    // If we are a monitoring connection message stream and\n    // there is more in the buffer that can be read, skip processing since we\n    // want the last hello command response that is in the buffer.\n    if (monitorHasAnotherHello()) {\n      processIncomingData(stream, callback);\n    } else {\n      stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n      if (buffer.length >= 4) {\n        processIncomingData(stream, callback);\n      } else {\n        callback();\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}