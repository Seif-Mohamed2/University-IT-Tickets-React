{"ast":null,"code":"'use strict';\n\nconst {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l\n} = require('./lib/memory-code-points');\nmodule.exports = saslprep;\n\n// 2.1.  Mapping\n\n/**\n * non-ASCII space characters [StringPrep, C.1.2] that can be\n * mapped to SPACE (U+0020)\n */\nconst mapping2space = non_ASCII_space_characters;\n\n/**\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\n * that can be mapped to nothing.\n */\nconst mapping2nothing = commonly_mapped_to_nothing;\n\n// utils\nconst getCodePoint = character => character.codePointAt(0);\nconst first = x => x[0];\nconst last = x => x[x.length - 1];\n\n/**\n * Convert provided string into an array of Unicode Code Points.\n * Based on https://stackoverflow.com/a/21409165/1556249\n * and https://www.npmjs.com/package/code-point-at.\n * @param {string} input\n * @returns {number[]}\n */\nfunction toCodePoints(input) {\n  const codepoints = [];\n  const size = input.length;\n  for (let i = 0; i < size; i += 1) {\n    const before = input.charCodeAt(i);\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      const next = input.charCodeAt(i + 1);\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n    codepoints.push(before);\n  }\n  return codepoints;\n}\n\n/**\n * SASLprep.\n * @param {string} input\n * @param {Object} opts\n * @param {boolean} opts.allowUnassigned\n * @returns {string}\n */\nfunction saslprep(input) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n  if (input.length === 0) {\n    return '';\n  }\n\n  // 1. Map\n  const mapped_input = toCodePoints(input)\n  // 1.1 mapping to space\n  .map(character => mapping2space.get(character) ? 0x20 : character)\n  // 1.2 mapping to nothing\n  .filter(character => !mapping2nothing.get(character));\n\n  // 2. Normalize\n  const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');\n  const normalized_map = toCodePoints(normalized_input);\n\n  // 3. Prohibit\n  const hasProhibited = normalized_map.some(character => prohibited_characters.get(character));\n  if (hasProhibited) {\n    throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');\n  }\n\n  // Unassigned Code Points\n  if (opts.allowUnassigned !== true) {\n    const hasUnassigned = normalized_map.some(character => unassigned_code_points.get(character));\n    if (hasUnassigned) {\n      throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');\n    }\n  }\n\n  // 4. check bidi\n\n  const hasBidiRAL = normalized_map.some(character => bidirectional_r_al.get(character));\n  const hasBidiL = normalized_map.some(character => bidirectional_l.get(character));\n\n  // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n\n  /**\n   * 4.2 If a string contains any RandALCat character, a RandALCat\n   * character MUST be the first character of the string, and a\n   * RandALCat character MUST be the last character of the string.\n   */\n\n  const isFirstBidiRAL = bidirectional_r_al.get(getCodePoint(first(normalized_input)));\n  const isLastBidiRAL = bidirectional_r_al.get(getCodePoint(last(normalized_input)));\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n  return normalized_input;\n}","map":{"version":3,"names":["unassigned_code_points","commonly_mapped_to_nothing","non_ASCII_space_characters","prohibited_characters","bidirectional_r_al","bidirectional_l","require","module","exports","saslprep","mapping2space","mapping2nothing","getCodePoint","character","codePointAt","first","x","last","length","toCodePoints","input","codepoints","size","i","before","charCodeAt","next","push","opts","TypeError","mapped_input","map","get","filter","normalized_input","String","fromCodePoint","apply","normalize","normalized_map","hasProhibited","some","Error","allowUnassigned","hasUnassigned","hasBidiRAL","hasBidiL","isFirstBidiRAL","isLastBidiRAL"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/saslprep/index.js"],"sourcesContent":["'use strict';\n\nconst {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l,\n} = require('./lib/memory-code-points');\n\nmodule.exports = saslprep;\n\n// 2.1.  Mapping\n\n/**\n * non-ASCII space characters [StringPrep, C.1.2] that can be\n * mapped to SPACE (U+0020)\n */\nconst mapping2space = non_ASCII_space_characters;\n\n/**\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\n * that can be mapped to nothing.\n */\nconst mapping2nothing = commonly_mapped_to_nothing;\n\n// utils\nconst getCodePoint = character => character.codePointAt(0);\nconst first = x => x[0];\nconst last = x => x[x.length - 1];\n\n/**\n * Convert provided string into an array of Unicode Code Points.\n * Based on https://stackoverflow.com/a/21409165/1556249\n * and https://www.npmjs.com/package/code-point-at.\n * @param {string} input\n * @returns {number[]}\n */\nfunction toCodePoints(input) {\n  const codepoints = [];\n  const size = input.length;\n\n  for (let i = 0; i < size; i += 1) {\n    const before = input.charCodeAt(i);\n\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      const next = input.charCodeAt(i + 1);\n\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n\n    codepoints.push(before);\n  }\n\n  return codepoints;\n}\n\n/**\n * SASLprep.\n * @param {string} input\n * @param {Object} opts\n * @param {boolean} opts.allowUnassigned\n * @returns {string}\n */\nfunction saslprep(input, opts = {}) {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  // 1. Map\n  const mapped_input = toCodePoints(input)\n    // 1.1 mapping to space\n    .map(character => (mapping2space.get(character) ? 0x20 : character))\n    // 1.2 mapping to nothing\n    .filter(character => !mapping2nothing.get(character));\n\n  // 2. Normalize\n  const normalized_input = String.fromCodePoint\n    .apply(null, mapped_input)\n    .normalize('NFKC');\n\n  const normalized_map = toCodePoints(normalized_input);\n\n  // 3. Prohibit\n  const hasProhibited = normalized_map.some(character =>\n    prohibited_characters.get(character)\n  );\n\n  if (hasProhibited) {\n    throw new Error(\n      'Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3'\n    );\n  }\n\n  // Unassigned Code Points\n  if (opts.allowUnassigned !== true) {\n    const hasUnassigned = normalized_map.some(character =>\n      unassigned_code_points.get(character)\n    );\n\n    if (hasUnassigned) {\n      throw new Error(\n        'Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5'\n      );\n    }\n  }\n\n  // 4. check bidi\n\n  const hasBidiRAL = normalized_map.some(character =>\n    bidirectional_r_al.get(character)\n  );\n\n  const hasBidiL = normalized_map.some(character =>\n    bidirectional_l.get(character)\n  );\n\n  // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error(\n      'String must not contain RandALCat and LCat at the same time,' +\n        ' see https://tools.ietf.org/html/rfc3454#section-6'\n    );\n  }\n\n  /**\n   * 4.2 If a string contains any RandALCat character, a RandALCat\n   * character MUST be the first character of the string, and a\n   * RandALCat character MUST be the last character of the string.\n   */\n\n  const isFirstBidiRAL = bidirectional_r_al.get(\n    getCodePoint(first(normalized_input))\n  );\n  const isLastBidiRAL = bidirectional_r_al.get(\n    getCodePoint(last(normalized_input))\n  );\n\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error(\n      'Bidirectional RandALCat character must be the first and the last' +\n        ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6'\n    );\n  }\n\n  return normalized_input;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}