{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace, filter) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n  }\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n      // TODO: NODE-2882\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n      callback(undefined, response);\n    });\n  }\n  count(options, callback) {\n    (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }), callback);\n  }\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity == null) verbosity = true;\n    return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n  /** Set the cursor query */\n  filter(filter) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name, value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n    // Strip of the $\n    const field = name.substr(1);\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n      case 'orderby':\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n        break;\n      case 'query':\n        this[kFilter] = value;\n        break;\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort, direction) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n    this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse() {\n    let allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n    // As of 6.0 the default is true. This allows users to get back to the old behaviour.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\nexports.FindCursor = FindCursor;","map":{"version":3,"mappings":"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","names":["kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FindCursor","abstract_cursor_1","constructor","client","namespace","filter","options","sort","clone","clonedOptions","session","map","transform","_initialize","callback","findOperation","find_1","undefined","cursorOptions","err","response","cursor","firstBatch","length","documents","server","_getMore","batchSize","numReturned","limit","close","nextBatch","count","error_1","count_1","explain","verbosity","hint","min","max","returnKey","value","showRecordId","addQueryModifier","name","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","allowDiskUse","allow","collation","skip"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cursor/find_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { MongoInvalidArgumentError, MongoTailableCursorError } from '../error';\nimport type { ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport type { CollationOptions } from '../operations/command';\nimport { CountOperation, CountOptions } from '../operations/count';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, FindOptions } from '../operations/find';\nimport type { Hint } from '../operations/operation';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort, SortDirection } from '../sort';\nimport { Callback, emitWarningOnce, mergeOptions, MongoDBNamespace } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned]?: number;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    filter: Document | undefined,\n    options: FindOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const findOperation = new FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    executeOperation(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n\n      // TODO: NODE-2882\n      callback(undefined, { server: findOperation.server, session, response });\n    });\n  }\n\n  /** @internal */\n  override _getMore(batchSize: number, callback: Callback<Document>): void {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  count(): Promise<number>;\n  /** @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead */\n  count(callback: Callback<number>): void;\n  /** @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead */\n  count(options: CountOptions): Promise<number>;\n  /** @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead */\n  count(options: CountOptions, callback: Callback<number>): void;\n  count(\n    options?: CountOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    emitWarningOnce(\n      'cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead '\n    );\n    if (typeof options === 'boolean') {\n      throw new MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.client,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      }),\n      callback\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  explain(): Promise<Document>;\n  explain(callback: Callback): void;\n  explain(verbosity?: ExplainVerbosityLike): Promise<Document>;\n  explain(\n    verbosity?: ExplainVerbosityLike | Callback,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof verbosity === 'function') (callback = verbosity), (verbosity = true);\n    if (verbosity == null) verbosity = true;\n\n    return executeOperation(\n      this.client,\n      new FindOperation(undefined, this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity\n      }),\n      callback\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  override maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>(value: Document): FindCursor<T> {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this as unknown as FindCursor<T>;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(allow = true): this {\n    assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    // As of 6.0 the default is true. This allows users to get back to the old behaviour.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}