{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n  execute(server, session, callback) {\n    super.executeCommand(server, session, {\n      profile: -1\n    }, (err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(undefined, 'off');\n        if (was === 1) return callback(undefined, 'slow_only');\n        if (was === 2) return callback(undefined, 'all');\n        // TODO(NODE-3483)\n        return callback(new error_1.MongoRuntimeError(`Illegal profiling level value ${was}`));\n      } else {\n        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError\n        err != null ? callback(err) : callback(new error_1.MongoRuntimeError('Error with profile command'));\n      }\n    });\n  }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;","map":{"version":3,"mappings":";;;;;;AACA;AAIA;AAKA;AACA,MAAaA,uBAAwB,SAAQC,0BAAwB;EAGnEC,YAAYC,EAAM,EAAEC,OAA8B;IAChD,KAAK,CAACD,EAAE,EAAEC,OAAO,CAAC;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAESC,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA0B;IAE1B,KAAK,CAACC,cAAc,CAACH,MAAM,EAAEC,OAAO,EAAE;MAAEG,OAAO,EAAE,CAAC;IAAC,CAAE,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAI;MAClE,IAAID,GAAG,IAAI,IAAI,IAAIC,GAAG,CAACC,EAAE,KAAK,CAAC,EAAE;QAC/B,MAAMC,GAAG,GAAGF,GAAG,CAACE,GAAG;QACnB,IAAIA,GAAG,KAAK,CAAC,EAAE,OAAON,QAAQ,CAACO,SAAS,EAAE,KAAK,CAAC;QAChD,IAAID,GAAG,KAAK,CAAC,EAAE,OAAON,QAAQ,CAACO,SAAS,EAAE,WAAW,CAAC;QACtD,IAAID,GAAG,KAAK,CAAC,EAAE,OAAON,QAAQ,CAACO,SAAS,EAAE,KAAK,CAAC;QAChD;QACA,OAAOP,QAAQ,CAAC,IAAIQ,yBAAiB,CAAC,iCAAiCF,GAAG,EAAE,CAAC,CAAC;OAC/E,MAAM;QACL;QACAH,GAAG,IAAI,IAAI,GAAGH,QAAQ,CAACG,GAAG,CAAC,GAAGH,QAAQ,CAAC,IAAIQ,yBAAiB,CAAC,4BAA4B,CAAC,CAAC;;IAE/F,CAAC,CAAC;EACJ;;AA1BFC","names":["ProfilingLevelOperation","command_1","constructor","db","options","execute","server","session","callback","executeCommand","profile","err","doc","ok","was","undefined","error_1","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/profiling_level.ts"],"sourcesContent":["import type { Db } from '../db';\nimport { MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\n\n/** @public */\nexport type ProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class ProfilingLevelOperation extends CommandOperation<string> {\n  override options: ProfilingLevelOptions;\n\n  constructor(db: Db, options: ProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string>\n  ): void {\n    super.executeCommand(server, session, { profile: -1 }, (err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(undefined, 'off');\n        if (was === 1) return callback(undefined, 'slow_only');\n        if (was === 2) return callback(undefined, 'all');\n        // TODO(NODE-3483)\n        return callback(new MongoRuntimeError(`Illegal profiling level value ${was}`));\n      } else {\n        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError\n        err != null ? callback(err) : callback(new MongoRuntimeError('Error with profile command'));\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}