{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateCollectionOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst command_1 = require(\"./command\");\nconst indexes_1 = require(\"./indexes\");\nconst operation_1 = require(\"./operation\");\nconst ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern', 'raw', 'fieldsAsRaw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined', 'enableUtf8Validation']);\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n  execute(server, session, callback) {\n    (async () => {\n      var _a, _b, _c, _d, _e, _f;\n      const db = this.db;\n      const name = this.name;\n      const options = this.options;\n      const encryptedFields = (_a = options.encryptedFields) !== null && _a !== void 0 ? _a : (_c = (_b = db.s.client.options.autoEncryption) === null || _b === void 0 ? void 0 : _b.encryptedFieldsMap) === null || _c === void 0 ? void 0 : _c[`${db.databaseName}.${name}`];\n      if (encryptedFields) {\n        // Create auxilliary collections for queryable encryption support.\n        const escCollection = (_d = encryptedFields.escCollection) !== null && _d !== void 0 ? _d : `enxcol_.${name}.esc`;\n        const eccCollection = (_e = encryptedFields.eccCollection) !== null && _e !== void 0 ? _e : `enxcol_.${name}.ecc`;\n        const ecocCollection = (_f = encryptedFields.ecocCollection) !== null && _f !== void 0 ? _f : `enxcol_.${name}.ecoc`;\n        for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n          const createOp = new CreateCollectionOperation(db, collectionName, {\n            clusteredIndex: {\n              key: {\n                _id: 1\n              },\n              unique: true\n            }\n          });\n          await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n        }\n        if (!options.encryptedFields) {\n          this.options = {\n            ...this.options,\n            encryptedFields\n          };\n        }\n      }\n      const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n      if (encryptedFields) {\n        // Create the required index for queryable encryption support.\n        const createIndexOp = new indexes_1.CreateIndexOperation(db, name, {\n          __safeContent__: 1\n        }, {});\n        await new Promise((resolve, reject) => {\n          createIndexOp.execute(server, session, err => err ? reject(err) : resolve());\n        });\n      }\n      return coll;\n    })().then(coll => callback(undefined, coll), err => callback(err));\n  }\n  executeWithoutEncryptedFieldsCheck(server, session) {\n    return new Promise((resolve, reject) => {\n      const db = this.db;\n      const name = this.name;\n      const options = this.options;\n      const done = err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(new collection_1.Collection(db, name, options));\n      };\n      const cmd = {\n        create: name\n      };\n      for (const n in options) {\n        if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n          cmd[n] = options[n];\n        }\n      }\n      // otherwise just execute the command\n      super.executeCommand(server, session, cmd, done);\n    });\n  }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":"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","names":["ILLEGAL_COMMAND_FIELDS","Set","CreateCollectionOperation","command_1","constructor","db","name","options","execute","server","session","callback","encryptedFields","s","client","autoEncryption","encryptedFieldsMap","databaseName","escCollection","eccCollection","ecocCollection","collectionName","createOp","clusteredIndex","key","_id","unique","executeWithoutEncryptedFieldsCheck","coll","createIndexOp","indexes_1","__safeContent__","Promise","resolve","reject","err","then","undefined","done","collection_1","cmd","create","n","has","executeCommand","exports","operation_1","WRITE_OPERATION"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/create_collection.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { Collection } from '../collection';\nimport type { Db } from '../db';\nimport type { PkFactory } from '../mongo_client';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { CreateIndexOperation } from './indexes';\nimport { Aspect, defineAspects } from './operation';\n\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'autoIndexId',\n  'pkFactory',\n  'raw',\n  'readPreference',\n  'session',\n  'readConcern',\n  'writeConcern',\n  'raw',\n  'fieldsAsRaw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bsonRegExp',\n  'serializeFunctions',\n  'ignoreUndefined',\n  'enableUtf8Validation'\n]);\n\n/** @public\n * Configuration options for timeseries collections\n * @see https://docs.mongodb.com/manual/core/timeseries-collections/\n */\nexport interface TimeSeriesCollectionOptions extends Document {\n  timeField: string;\n  metaField?: string;\n  granularity?: 'seconds' | 'minutes' | 'hours' | string;\n}\n\n/** @public\n * Configuration options for clustered collections\n * @see https://www.mongodb.com/docs/manual/core/clustered-collections/\n */\nexport interface ClusteredCollectionOptions extends Document {\n  name?: string;\n  key: Document;\n  unique: boolean;\n}\n\n/** @public */\nexport interface CreateCollectionOptions extends CommandOperationOptions {\n  /** Returns an error if the collection does not exist */\n  strict?: boolean;\n  /** Create a capped collection */\n  capped?: boolean;\n  /** @deprecated Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0 */\n  autoIndexId?: boolean;\n  /** The size of the capped collection in bytes */\n  size?: number;\n  /** The maximum number of documents in the capped collection */\n  max?: number;\n  /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */\n  flags?: number;\n  /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher */\n  storageEngine?: Document;\n  /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher */\n  validator?: Document;\n  /** Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher */\n  validationLevel?: string;\n  /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher */\n  validationAction?: string;\n  /** Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher */\n  indexOptionDefaults?: Document;\n  /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher */\n  viewOn?: string;\n  /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher */\n  pipeline?: Document[];\n  /** A primary key factory function for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** A document specifying configuration options for timeseries collections. */\n  timeseries?: TimeSeriesCollectionOptions;\n  /** A document specifying configuration options for clustered collections. For MongoDB 5.3 and above. */\n  clusteredIndex?: ClusteredCollectionOptions;\n  /** The number of seconds after which a document in a timeseries or clustered collection expires. */\n  expireAfterSeconds?: number;\n  /** @experimental */\n  encryptedFields?: Document;\n  /**\n   * If set, enables pre-update and post-update document events to be included for any\n   * change streams that listen on this collection.\n   */\n  changeStreamPreAndPostImages?: { enabled: boolean };\n}\n\n/** @internal */\nexport class CreateCollectionOperation extends CommandOperation<Collection> {\n  override options: CreateCollectionOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options: CreateCollectionOptions = {}) {\n    super(db, options);\n\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Collection>\n  ): void {\n    (async () => {\n      const db = this.db;\n      const name = this.name;\n      const options = this.options;\n\n      const encryptedFields: Document | undefined =\n        options.encryptedFields ??\n        db.s.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n\n      if (encryptedFields) {\n        // Create auxilliary collections for queryable encryption support.\n        const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n        const eccCollection = encryptedFields.eccCollection ?? `enxcol_.${name}.ecc`;\n        const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n\n        for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n          const createOp = new CreateCollectionOperation(db, collectionName, {\n            clusteredIndex: {\n              key: { _id: 1 },\n              unique: true\n            }\n          });\n          await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n        }\n\n        if (!options.encryptedFields) {\n          this.options = { ...this.options, encryptedFields };\n        }\n      }\n\n      const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n\n      if (encryptedFields) {\n        // Create the required index for queryable encryption support.\n        const createIndexOp = new CreateIndexOperation(db, name, { __safeContent__: 1 }, {});\n        await new Promise<void>((resolve, reject) => {\n          createIndexOp.execute(server, session, err => (err ? reject(err) : resolve()));\n        });\n      }\n\n      return coll;\n    })().then(\n      coll => callback(undefined, coll),\n      err => callback(err)\n    );\n  }\n\n  private executeWithoutEncryptedFieldsCheck(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<Collection> {\n    return new Promise<Collection>((resolve, reject) => {\n      const db = this.db;\n      const name = this.name;\n      const options = this.options;\n\n      const done: Callback = err => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(new Collection(db, name, options));\n      };\n\n      const cmd: Document = { create: name };\n      for (const n in options) {\n        if (\n          (options as any)[n] != null &&\n          typeof (options as any)[n] !== 'function' &&\n          !ILLEGAL_COMMAND_FIELDS.has(n)\n        ) {\n          cmd[n] = (options as any)[n];\n        }\n      }\n\n      // otherwise just execute the command\n      super.executeCommand(server, session, cmd, done);\n    });\n  }\n}\n\ndefineAspects(CreateCollectionOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}