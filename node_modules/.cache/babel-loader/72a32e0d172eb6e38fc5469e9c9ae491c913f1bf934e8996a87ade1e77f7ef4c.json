{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => ({\n        url: \"/users \",\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'User',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'User',\n            id\n          }))];\n        } else return [{\n          type: 'User',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidateTags: [{\n        type: \"User\",\n        id: \"LIST\"\n      }]\n    }),\n    updateUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidateTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }, {\n        type: \"User\",\n        id: \"List\"\n      }]\n    }),\n    deleteUser: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: \"/users\",\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      invalidateTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// creates memoized selector\nconst selectUsersData = createSelector(selectUsersResult, usersResult => usersResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","method","body","invalidateTags","updateUser","deleteUser","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state"],"sources":["/Users/seifmohamed/Documents/webdev/TechNotes/front-end/my-app/src/features/users/usersApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\nconst usersAdapter = createEntityAdapter({});\n\nconst initialState = usersAdapter.getInitialState();\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getUsers: builder.query({\n            query: () => ({\n                url: \"/users \",\n                validateStatus: (response, result) => {\n                    return response.status === 200 && !result.isError\n                }\n            }),\n            transformResponse: responseData => {\n                const loadedUsers = responseData.map(user => {\n                    user.id = user._id\n                    return user\n                });\n                return usersAdapter.setAll(initialState, loadedUsers)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'User', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'User', id }))\n                    ]\n                } else return [{ type: 'User', id: 'LIST' }]\n            }\n        }),\n        addNewUser: builder.mutation({\n            query: initialUserData => ({\n                url: \"/users\",\n                method: \"POST\",\n                body: {\n                    ...initialUserData,\n                }\n            }),\n            invalidateTags: [\n                {type: \"User\", id: \"LIST\"}\n            ]\n        }),\n        updateUser: builder.mutation({\n            query: initialUserData => ({\n                url: \"/users\",\n                method: \"PATCH\",\n                body: {\n                    ...initialUserData,\n                }\n            }),\n            invalidateTags: (result, error, arg) => [\n                {type: \"User\", id: arg.id},\n                {type: \"User\", id: \"List\"}\n            ]\n        }),\n        deleteUser: builder.mutation({\n            query: ({id}) => ({\n                url: \"/users\",\n                method: \"DELETE\",\n                body: {\n                    id,\n                }\n            }),\n            invalidateTags: (result, error, arg) => [\n                {type: \"User\", id: arg.id}\n            ]\n        })\n    }),\n})\n\nexport const {\n    useGetUsersQuery,\n    useAddNewUserMutation,\n    useUpdateUserMutation,\n    useDeleteUserMutation,\n} = usersApiSlice\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\n\n// creates memoized selector\nconst selectUsersData = createSelector(\n    selectUsersResult,\n    usersResult => usersResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllUsers,\n    selectById: selectUserById,\n    selectIds: selectUserIds\n    // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}