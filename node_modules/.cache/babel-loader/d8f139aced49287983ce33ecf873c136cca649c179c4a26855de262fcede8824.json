{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, serviceId) {\n    super(pool);\n    this.serviceId = serviceId;\n  }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"mappings":";;;;;;AAKA;;;;;AAKA,MAAaA,6BAA6B;EAMxC;EACAC,YAAYC,IAAoB;IAC9B,IAAI,CAACC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAI,CAACC,OAAO,GAAGH,IAAI,CAACG,OAAO;EAC7B;;AAVFC;AAaA;;;;;AAKA,MAAaC,0BAA2B,SAAQP,6BAA6B;EAI3E;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACM,OAAO,GAAGN,IAAI,CAACM,OAAO;EAC7B;;AARFF;AAWA;;;;;AAKA,MAAaG,yBAA0B,SAAQT,6BAA6B;EAC1E;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;EACb;;AAJFI;AAOA;;;;;AAKA,MAAaI,sBAAuB,SAAQV,6BAA6B;EAIvE;EACAC,YAAYC,IAAoB,EAAES,UAAwC;IACxE,KAAK,CAACT,IAAI,CAAC;IACX,IAAI,CAACU,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFP;AAWA;;;;;AAKA,MAAaQ,oBAAqB,SAAQd,6BAA6B;EAIrE;EACAC,YAAYC,IAAoB,EAAES,UAAsB;IACtD,KAAK,CAACT,IAAI,CAAC;IACX,IAAI,CAACU,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFP;AAWA;;;;;AAKA,MAAaS,qBAAsB,SAAQf,6BAA6B;EAOtE;EACAC,YAAYC,IAAoB,EAAES,UAAsB,EAAEK,MAAc;IACtE,KAAK,CAACd,IAAI,CAAC;IACX,IAAI,CAACU,YAAY,GAAGD,UAAU,CAACE,EAAE;IACjC,IAAI,CAACG,MAAM,GAAGA,MAAM,IAAI,SAAS;IACjC,IAAI,CAACC,SAAS,GAAGN,UAAU,CAACM,SAAS;EACvC;;AAbFX;AAgBA;;;;;AAKA,MAAaY,8BAA+B,SAAQlB,6BAA6B;EAC/E;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;EACb;;AAJFI;AAOA;;;;;AAKA,MAAaa,6BAA8B,SAAQnB,6BAA6B;EAI9E;EACAC,YAAYC,IAAoB,EAAEc,MAAyB;IACzD,KAAK,CAACd,IAAI,CAAC;IACX,IAAI,CAACc,MAAM,GAAGA,MAAM;EACtB;;AARFV;AAWA;;;;;AAKA,MAAac,yBAA0B,SAAQpB,6BAA6B;EAI1E;EACAC,YAAYC,IAAoB,EAAES,UAAsB;IACtD,KAAK,CAACT,IAAI,CAAC;IACX,IAAI,CAACU,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFP;AAWA;;;;;AAKA,MAAae,wBAAyB,SAAQrB,6BAA6B;EAIzE;EACAC,YAAYC,IAAoB,EAAES,UAAsB;IACtD,KAAK,CAACT,IAAI,CAAC;IACX,IAAI,CAACU,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFP;AAWA;;;;;AAKA,MAAagB,0BAA2B,SAAQtB,6BAA6B;EAI3E;EACAC,YAAYC,IAAoB,EAAEe,SAAoB;IACpD,KAAK,CAACf,IAAI,CAAC;IACX,IAAI,CAACe,SAAS,GAAGA,SAAS;EAC5B;;AARFX","names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","options","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","serviceId","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cmap/connection_pool_events.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { AnyError } from '../error';\nimport type { Connection } from './connection';\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionPoolMonitoringEvent {\n  /** A timestamp when the event was created  */\n  time: Date;\n  /** The address (host/port pair) of the pool */\n  address: string;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** The options used to create this connection pool */\n  options?: ConnectionPoolOptions;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** A monotonically increasing, per-pool id for the newly created connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: { id: number | '<monitor>' }) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** The reason the connection was closed */\n  reason: string;\n  serviceId?: ObjectId;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection, reason: string) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** The reason the attempt to check out failed */\n  reason: AnyError | string;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, reason: AnyError | string) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  serviceId?: ObjectId;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, serviceId?: ObjectId) {\n    super(pool);\n    this.serviceId = serviceId;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}