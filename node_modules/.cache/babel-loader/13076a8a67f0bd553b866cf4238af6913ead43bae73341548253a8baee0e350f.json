{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst bitfield = require('sparse-bitfield');\n\n/* eslint-disable-next-line security/detect-non-literal-fs-filename */\nconst memory = fs.readFileSync(path.resolve(__dirname, '../code-points.mem'));\nlet offset = 0;\n\n/**\n * Loads each code points sequence from buffer.\n * @returns {bitfield}\n */\nfunction read() {\n  const size = memory.readUInt32BE(offset);\n  offset += 4;\n  const codepoints = memory.slice(offset, offset + size);\n  offset += size;\n  return bitfield({\n    buffer: codepoints\n  });\n}\nconst unassigned_code_points = read();\nconst commonly_mapped_to_nothing = read();\nconst non_ASCII_space_characters = read();\nconst prohibited_characters = read();\nconst bidirectional_r_al = read();\nconst bidirectional_l = read();\nmodule.exports = {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l\n};","map":{"version":3,"names":["fs","require","path","bitfield","memory","readFileSync","resolve","__dirname","offset","read","size","readUInt32BE","codepoints","slice","buffer","unassigned_code_points","commonly_mapped_to_nothing","non_ASCII_space_characters","prohibited_characters","bidirectional_r_al","bidirectional_l","module","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/saslprep/lib/memory-code-points.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst bitfield = require('sparse-bitfield');\n\n/* eslint-disable-next-line security/detect-non-literal-fs-filename */\nconst memory = fs.readFileSync(path.resolve(__dirname, '../code-points.mem'));\nlet offset = 0;\n\n/**\n * Loads each code points sequence from buffer.\n * @returns {bitfield}\n */\nfunction read() {\n  const size = memory.readUInt32BE(offset);\n  offset += 4;\n\n  const codepoints = memory.slice(offset, offset + size);\n  offset += size;\n\n  return bitfield({ buffer: codepoints });\n}\n\nconst unassigned_code_points = read();\nconst commonly_mapped_to_nothing = read();\nconst non_ASCII_space_characters = read();\nconst prohibited_characters = read();\nconst bidirectional_r_al = read();\nconst bidirectional_l = read();\n\nmodule.exports = {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l,\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAiB,CAAC;;AAE3C;AACA,MAAMG,MAAM,GAAGJ,EAAE,CAACK,YAAY,CAACH,IAAI,CAACI,OAAO,CAACC,SAAS,EAAE,oBAAoB,CAAC,CAAC;AAC7E,IAAIC,MAAM,GAAG,CAAC;;AAEd;AACA;AACA;AACA;AACA,SAASC,IAAI,GAAG;EACd,MAAMC,IAAI,GAAGN,MAAM,CAACO,YAAY,CAACH,MAAM,CAAC;EACxCA,MAAM,IAAI,CAAC;EAEX,MAAMI,UAAU,GAAGR,MAAM,CAACS,KAAK,CAACL,MAAM,EAAEA,MAAM,GAAGE,IAAI,CAAC;EACtDF,MAAM,IAAIE,IAAI;EAEd,OAAOP,QAAQ,CAAC;IAAEW,MAAM,EAAEF;EAAW,CAAC,CAAC;AACzC;AAEA,MAAMG,sBAAsB,GAAGN,IAAI,EAAE;AACrC,MAAMO,0BAA0B,GAAGP,IAAI,EAAE;AACzC,MAAMQ,0BAA0B,GAAGR,IAAI,EAAE;AACzC,MAAMS,qBAAqB,GAAGT,IAAI,EAAE;AACpC,MAAMU,kBAAkB,GAAGV,IAAI,EAAE;AACjC,MAAMW,eAAe,GAAGX,IAAI,EAAE;AAE9BY,MAAM,CAACC,OAAO,GAAG;EACfP,sBAAsB;EACtBC,0BAA0B;EAC1BC,0BAA0B;EAC1BC,qBAAqB;EACrBC,kBAAkB;EAClBC;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}