{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n  execute(server, session, callback) {\n    (async () => {\n      var _a, _b, _c, _d;\n      const db = this.db;\n      const options = this.options;\n      const name = this.name;\n      const encryptedFieldsMap = (_a = db.s.client.options.autoEncryption) === null || _a === void 0 ? void 0 : _a.encryptedFieldsMap;\n      let encryptedFields = (_b = options.encryptedFields) !== null && _b !== void 0 ? _b : encryptedFieldsMap === null || encryptedFieldsMap === void 0 ? void 0 : encryptedFieldsMap[`${db.databaseName}.${name}`];\n      if (!encryptedFields && encryptedFieldsMap) {\n        // If the MongoClient was configued with an encryptedFieldsMap,\n        // and no encryptedFields config was available in it or explicitly\n        // passed as an argument, the spec tells us to look one up using\n        // listCollections().\n        const listCollectionsResult = await db.listCollections({\n          name\n        }, {\n          nameOnly: false\n        }).toArray();\n        encryptedFields = (_d = (_c = listCollectionsResult === null || listCollectionsResult === void 0 ? void 0 : listCollectionsResult[0]) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.encryptedFields;\n      }\n      if (encryptedFields) {\n        const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n        const eccCollection = encryptedFields.eccCollection || `enxcol_.${name}.ecc`;\n        const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n        for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n          // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n          const dropOp = new DropCollectionOperation(db, collectionName);\n          try {\n            await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n          } catch (err) {\n            if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n              throw err;\n            }\n          }\n        }\n      }\n      return await this.executeWithoutEncryptedFieldsCheck(server, session);\n    })().then(result => callback(undefined, result), err => callback(err));\n  }\n  executeWithoutEncryptedFieldsCheck(server, session) {\n    return new Promise((resolve, reject) => {\n      super.executeCommand(server, session, {\n        drop: this.name\n      }, (err, result) => {\n        if (err) return reject(err);\n        resolve(!!result.ok);\n      });\n    });\n  }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n  execute(server, session, callback) {\n    super.executeCommand(server, session, {\n      dropDatabase: 1\n    }, (err, result) => {\n      if (err) return callback(err);\n      if (result.ok) return callback(undefined, true);\n      callback(undefined, false);\n    });\n  }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":"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","names":["DropCollectionOperation","command_1","constructor","db","name","options","execute","server","session","callback","encryptedFieldsMap","s","client","autoEncryption","encryptedFields","databaseName","listCollectionsResult","listCollections","nameOnly","toArray","escCollection","eccCollection","ecocCollection","collectionName","dropOp","executeWithoutEncryptedFieldsCheck","err","error_1","code","NamespaceNotFound","then","result","undefined","Promise","resolve","reject","executeCommand","drop","ok","exports","DropDatabaseOperation","dropDatabase","operation_1","WRITE_OPERATION"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/drop.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Db } from '../db';\nimport { MONGODB_ERROR_CODES, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface DropCollectionOptions extends CommandOperationOptions {\n  /** @experimental */\n  encryptedFields?: Document;\n}\n\n/** @internal */\nexport class DropCollectionOperation extends CommandOperation<boolean> {\n  override options: DropCollectionOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options: DropCollectionOptions = {}) {\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    (async () => {\n      const db = this.db;\n      const options = this.options;\n      const name = this.name;\n\n      const encryptedFieldsMap = db.s.client.options.autoEncryption?.encryptedFieldsMap;\n      let encryptedFields: Document | undefined =\n        options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n\n      if (!encryptedFields && encryptedFieldsMap) {\n        // If the MongoClient was configued with an encryptedFieldsMap,\n        // and no encryptedFields config was available in it or explicitly\n        // passed as an argument, the spec tells us to look one up using\n        // listCollections().\n        const listCollectionsResult = await db\n          .listCollections({ name }, { nameOnly: false })\n          .toArray();\n        encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n      }\n\n      if (encryptedFields) {\n        const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n        const eccCollection = encryptedFields.eccCollection || `enxcol_.${name}.ecc`;\n        const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n\n        for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n          // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n          const dropOp = new DropCollectionOperation(db, collectionName);\n          try {\n            await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n          } catch (err) {\n            if (\n              !(err instanceof MongoServerError) ||\n              err.code !== MONGODB_ERROR_CODES.NamespaceNotFound\n            ) {\n              throw err;\n            }\n          }\n        }\n      }\n\n      return await this.executeWithoutEncryptedFieldsCheck(server, session);\n    })().then(\n      result => callback(undefined, result),\n      err => callback(err)\n    );\n  }\n\n  private executeWithoutEncryptedFieldsCheck(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      super.executeCommand(server, session, { drop: this.name }, (err, result) => {\n        if (err) return reject(err);\n        resolve(!!result.ok);\n      });\n    });\n  }\n}\n\n/** @public */\nexport type DropDatabaseOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropDatabaseOperation extends CommandOperation<boolean> {\n  override options: DropDatabaseOptions;\n\n  constructor(db: Db, options: DropDatabaseOptions) {\n    super(db, options);\n    this.options = options;\n  }\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    super.executeCommand(server, session, { dropDatabase: 1 }, (err, result) => {\n      if (err) return callback(err);\n      if (result.ok) return callback(undefined, true);\n      callback(undefined, false);\n    });\n  }\n}\n\ndefineAspects(DropCollectionOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropDatabaseOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}