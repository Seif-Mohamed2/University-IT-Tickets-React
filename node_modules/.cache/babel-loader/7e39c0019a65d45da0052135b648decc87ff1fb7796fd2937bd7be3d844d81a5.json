{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\nconst bson_1 = require(\"./bson\");\nconst ordered_1 = require(\"./bulk/ordered\");\nconst unordered_1 = require(\"./bulk/unordered\");\nconst change_stream_1 = require(\"./change_stream\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nconst error_1 = require(\"./error\");\nconst bulk_write_1 = require(\"./operations/bulk_write\");\nconst count_1 = require(\"./operations/count\");\nconst count_documents_1 = require(\"./operations/count_documents\");\nconst delete_1 = require(\"./operations/delete\");\nconst distinct_1 = require(\"./operations/distinct\");\nconst drop_1 = require(\"./operations/drop\");\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst insert_1 = require(\"./operations/insert\");\nconst is_capped_1 = require(\"./operations/is_capped\");\nconst map_reduce_1 = require(\"./operations/map_reduce\");\nconst options_operation_1 = require(\"./operations/options_operation\");\nconst rename_1 = require(\"./operations/rename\");\nconst stats_1 = require(\"./operations/stats\");\nconst update_1 = require(\"./operations/update\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Show that duplicate records got dropped\n *   col.find({}).toArray(function(err, items) {\n *     expect(err).to.not.exist;\n *     test.equal(4, items.length);\n *     client.close();\n *   });\n * });\n * ```\n */\nclass Collection {\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db, name, options) {\n    var _a, _b;\n    (0, utils_1.checkCollectionName)(name);\n    // Internal state\n    this.s = {\n      db,\n      options,\n      namespace: new utils_1.MongoDBNamespace(db.databaseName, name),\n      pkFactory: (_b = (_a = db.options) === null || _a === void 0 ? void 0 : _a.pkFactory) !== null && _b !== void 0 ? _b : utils_1.DEFAULT_PK_FACTORY,\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n  }\n  /**\n   * The name of the database this collection belongs to\n   */\n  get dbName() {\n    return this.s.namespace.db;\n  }\n  /**\n   * The name of this collection\n   */\n  get collectionName() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.s.namespace.collection;\n  }\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readConcern() {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get writeConcern() {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n    return this.s.writeConcern;\n  }\n  /** The current index hint for the collection */\n  get hint() {\n    return this.s.collectionHint;\n  }\n  set hint(v) {\n    this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n  }\n  insertOne(doc, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    // CSFLE passes in { w: 'majority' } to ensure the lib works in both 3.x and 4.x\n    // we support that option style here only\n    if (options && Reflect.get(options, 'w')) {\n      options.writeConcern = write_concern_1.WriteConcern.fromOptions(Reflect.get(options, 'w'));\n    }\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  insertMany(docs, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ? Object.assign({}, options) : {\n      ordered: true\n    };\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  bulkWrite(operations, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {\n      ordered: true\n    };\n    if (!Array.isArray(operations)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  updateOne(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new update_1.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  replaceOne(filter, replacement, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new update_1.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  updateMany(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new update_1.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  deleteOne(filter, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  deleteMany(filter, options, callback) {\n    if (filter == null) {\n      filter = {};\n      options = {};\n      callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  rename(newName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new rename_1.RenameOperation(this, newName, {\n      ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }), callback);\n  }\n  drop(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options), callback);\n  }\n  findOne(filter, options, callback) {\n    if (callback != null && typeof callback !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Third parameter to `findOne()` must be a callback or undefined');\n    }\n    if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    }\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    const finalFilter = filter !== null && filter !== void 0 ? filter : {};\n    const finalOptions = options !== null && options !== void 0 ? options : {};\n    return this.find(finalFilter, finalOptions).limit(-1).batchSize(1).next(callback);\n  }\n  find(filter, options) {\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"collection.find()\" accepts at most two arguments');\n    }\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n    return new find_cursor_1.FindCursor(this.s.db.s.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  options(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  isCapped(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  createIndex(indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  createIndexes(indexSpecs, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ? Object.assign({}, options) : {};\n    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  dropIndex(indexName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = (0, utils_1.resolveOptions)(this, options);\n    // Run only against primary\n    options.readPreference = read_preference_1.ReadPreference.primary;\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.DropIndexOperation(this, indexName, options), callback);\n  }\n  dropIndexes(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.DropIndexesOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  listIndexes(options) {\n    return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  indexExists(indexes, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  indexInformation(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  estimatedDocumentCount(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  countDocuments(filter, options, callback) {\n    if (filter == null) {\n      filter = {}, options = {}, callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (arguments.length === 2) {\n        if (typeof options === 'function') callback = options, options = {};\n      }\n    }\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  // Implementation\n  distinct(key, filter, options, callback) {\n    if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (arguments.length === 3 && typeof options === 'function') {\n        callback = options, options = {};\n      }\n    }\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  indexes(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new stats_1.CollStatsOperation(this, options), callback);\n  }\n  findOneAndDelete(filter, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  findOneAndReplace(filter, replacement, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  findOneAndUpdate(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"collection.aggregate()\" accepts at most two arguments');\n    }\n    if (!Array.isArray(pipeline)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n    }\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n    return new aggregation_cursor_1.AggregationCursor(this.s.db.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct usecases:\n   * - The first is to override the schema that may be defined for this specific collection\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   * @example\n   * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n   * ```ts\n   * collection.watch<{ _id: number }>()\n   *   .on('change', change => console.log(change._id.toFixed(4)));\n   * ```\n   *\n   * @example\n   * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n   * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n   * No need start from scratch on the ChangeStreamInsertDocument type!\n   * By using an intersection we can save time and ensure defaults remain the same type!\n   * ```ts\n   * collection\n   *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n   *     { $addFields: { comment: 'big changes' } },\n   *     { $match: { operationType: 'insert' } }\n   *   ])\n   *   .on('change', change => {\n   *     change.comment.startsWith('big');\n   *     change.operationType === 'insert';\n   *     // No need to narrow in code because the generics did that for us!\n   *     expectType<Schema>(change.fullDocument);\n   *   });\n   * ```\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TLocal - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  mapReduce(map, reduce, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.');\n    if ('function' === typeof options) callback = options, options = {};\n    // Out must always be defined (make sure we don't break weirdly on pre 1.8+ servers)\n    // TODO NODE-3339: Figure out if this is still necessary given we no longer officially support pre-1.8\n    if ((options === null || options === void 0 ? void 0 : options.out) == null) {\n      throw new error_1.MongoInvalidArgumentError('Option \"out\" must be defined, see mongodb docs for possible values');\n    }\n    if ('function' === typeof map) {\n      map = map.toString();\n    }\n    if ('function' === typeof reduce) {\n      reduce = reduce.toString();\n    }\n    if ('function' === typeof options.finalize) {\n      options.finalize = options.finalize.toString();\n    }\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new map_reduce_1.MapReduceOperation(this, map, reduce, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implemenation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeUnorderedBulkOp(options) {\n    return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implemenation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeOrderedBulkOp(options) {\n    return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Get the db scoped logger */\n  getLogger() {\n    return this.s.db.s.logger;\n  }\n  get logger() {\n    return this.s.db.s.logger;\n  }\n  /**\n   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @deprecated Use insertOne, insertMany or bulkWrite instead.\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insert(docs, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {\n      ordered: false\n    };\n    docs = !Array.isArray(docs) ? [docs] : docs;\n    if (options.keepGoing === true) {\n      options.ordered = false;\n    }\n    return this.insertMany(docs, options, callback);\n  }\n  /**\n   * Updates documents.\n   *\n   * @deprecated use updateOne, updateMany or bulkWrite\n   * @param filter - The filter for the update operation.\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  update(filter, update, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.updateMany(filter, update, options, callback);\n  }\n  /**\n   * Remove documents.\n   *\n   * @deprecated use deleteOne, deleteMany or bulkWrite\n   * @param filter - The filter for the remove operation.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  remove(filter, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.deleteMany(filter, options, callback);\n  }\n  count(filter, options, callback) {\n    if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new count_1.CountOperation(utils_1.MongoDBNamespace.fromString(this.namespace), filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n}\nexports.Collection = Collection;","map":{"version":3,"mappings":"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","names":["Collection","constructor","db","name","options","s","namespace","utils_1","databaseName","pkFactory","readPreference","read_preference_1","fromOptions","bsonOptions","readConcern","read_concern_1","writeConcern","write_concern_1","dbName","collectionName","collection","toString","hint","collectionHint","v","insertOne","doc","callback","Reflect","get","client","insert_1","insertMany","docs","Object","assign","ordered","bulkWrite","operations","Array","isArray","error_1","bulk_write_1","updateOne","filter","update","update_1","replaceOne","replacement","updateMany","deleteOne","delete_1","deleteMany","undefined","rename","newName","rename_1","PRIMARY","drop","drop_1","findOne","finalFilter","finalOptions","find","limit","batchSize","next","arguments","length","find_cursor_1","options_operation_1","isCapped","is_capped_1","createIndex","indexSpec","indexes_1","createIndexes","indexSpecs","maxTimeMS","dropIndex","indexName","primary","dropIndexes","listIndexes","list_indexes_cursor_1","indexExists","indexes","indexInformation","estimatedDocumentCount","estimated_document_count_1","countDocuments","count_documents_1","distinct","key","distinct_1","stats","stats_1","findOneAndDelete","find_and_modify_1","findOneAndReplace","findOneAndUpdate","aggregate","pipeline","aggregation_cursor_1","watch","change_stream_1","mapReduce","map","reduce","out","finalize","map_reduce_1","initializeUnorderedBulkOp","unordered_1","initializeOrderedBulkOp","ordered_1","getLogger","logger","insert","keepGoing","remove","count","count_1","fromString","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/collection.ts"],"sourcesContent":["import { BSONSerializeOptions, Document, resolveBSONOptions } from './bson';\nimport type { AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult } from './bulk/common';\nimport { OrderedBulkOperation } from './bulk/ordered';\nimport { UnorderedBulkOperation } from './bulk/unordered';\nimport { ChangeStream, ChangeStreamDocument, ChangeStreamOptions } from './change_stream';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { FindCursor } from './cursor/find_cursor';\nimport { ListIndexesCursor } from './cursor/list_indexes_cursor';\nimport type { Db } from './db';\nimport { MongoInvalidArgumentError } from './error';\nimport type { Logger, LoggerOptions } from './logger';\nimport type { PkFactory } from './mongo_client';\nimport type {\n  Filter,\n  Flatten,\n  OptionalUnlessRequiredId,\n  TODO_NODE_3286,\n  UpdateFilter,\n  WithId,\n  WithoutId\n} from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { BulkWriteOperation } from './operations/bulk_write';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport { CountOperation, CountOptions } from './operations/count';\nimport { CountDocumentsOperation, CountDocumentsOptions } from './operations/count_documents';\nimport {\n  DeleteManyOperation,\n  DeleteOneOperation,\n  DeleteOptions,\n  DeleteResult\n} from './operations/delete';\nimport { DistinctOperation, DistinctOptions } from './operations/distinct';\nimport { DropCollectionOperation, DropCollectionOptions } from './operations/drop';\nimport {\n  EstimatedDocumentCountOperation,\n  EstimatedDocumentCountOptions\n} from './operations/estimated_document_count';\nimport { executeOperation } from './operations/execute_operation';\nimport type { FindOptions } from './operations/find';\nimport {\n  FindOneAndDeleteOperation,\n  FindOneAndDeleteOptions,\n  FindOneAndReplaceOperation,\n  FindOneAndReplaceOptions,\n  FindOneAndUpdateOperation,\n  FindOneAndUpdateOptions\n} from './operations/find_and_modify';\nimport {\n  CreateIndexesOperation,\n  CreateIndexesOptions,\n  CreateIndexOperation,\n  DropIndexesOperation,\n  DropIndexesOptions,\n  DropIndexOperation,\n  IndexDescription,\n  IndexesOperation,\n  IndexExistsOperation,\n  IndexInformationOperation,\n  IndexSpecification,\n  ListIndexesOptions\n} from './operations/indexes';\nimport {\n  InsertManyOperation,\n  InsertManyResult,\n  InsertOneOperation,\n  InsertOneOptions,\n  InsertOneResult\n} from './operations/insert';\nimport { IsCappedOperation } from './operations/is_capped';\nimport {\n  MapFunction,\n  MapReduceOperation,\n  MapReduceOptions,\n  ReduceFunction\n} from './operations/map_reduce';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { OptionsOperation } from './operations/options_operation';\nimport { RenameOperation, RenameOptions } from './operations/rename';\nimport { CollStats, CollStatsOperation, CollStatsOptions } from './operations/stats';\nimport {\n  ReplaceOneOperation,\n  ReplaceOptions,\n  UpdateManyOperation,\n  UpdateOneOperation,\n  UpdateOptions,\n  UpdateResult\n} from './operations/update';\nimport { ReadConcern, ReadConcernLike } from './read_concern';\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\nimport {\n  Callback,\n  checkCollectionName,\n  DEFAULT_PK_FACTORY,\n  emitWarningOnce,\n  MongoDBNamespace,\n  normalizeHintField,\n  resolveOptions\n} from './utils';\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\n\n/** @public */\nexport interface ModifyResult<TSchema = Document> {\n  value: WithId<TSchema> | null;\n  lastErrorObject?: Document;\n  ok: 0 | 1;\n}\n\n/** @public */\nexport interface CollectionOptions\n  extends BSONSerializeOptions,\n    WriteConcernOptions,\n    LoggerOptions {\n  /**\n   * @deprecated Use readPreference instead\n   */\n  slaveOk?: boolean;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n}\n\n/** @internal */\nexport interface CollectionPrivate {\n  pkFactory: PkFactory;\n  db: Db;\n  options: any;\n  namespace: MongoDBNamespace;\n  readPreference?: ReadPreference;\n  bsonOptions: BSONSerializeOptions;\n  collectionHint?: Hint;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n}\n\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Show that duplicate records got dropped\n *   col.find({}).toArray(function(err, items) {\n *     expect(err).to.not.exist;\n *     test.equal(4, items.length);\n *     client.close();\n *   });\n * });\n * ```\n */\nexport class Collection<TSchema extends Document = Document> {\n  /** @internal */\n  s: CollectionPrivate;\n\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db: Db, name: string, options?: CollectionOptions) {\n    checkCollectionName(name);\n\n    // Internal state\n    this.s = {\n      db,\n      options,\n      namespace: new MongoDBNamespace(db.databaseName, name),\n      pkFactory: db.options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      readPreference: ReadPreference.fromOptions(options),\n      bsonOptions: resolveBSONOptions(options, db),\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options)\n    };\n  }\n\n  /**\n   * The name of the database this collection belongs to\n   */\n  get dbName(): string {\n    return this.s.namespace.db;\n  }\n\n  /**\n   * The name of this collection\n   */\n  get collectionName(): string {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.s.namespace.collection!;\n  }\n\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readConcern(): ReadConcern | undefined {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readPreference(): ReadPreference | undefined {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get writeConcern(): WriteConcern | undefined {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n    return this.s.writeConcern;\n  }\n\n  /** The current index hint for the collection */\n  get hint(): Hint | undefined {\n    return this.s.collectionHint;\n  }\n\n  set hint(v: Hint | undefined) {\n    this.s.collectionHint = normalizeHintField(v);\n  }\n\n  /**\n   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param doc - The document to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insertOne(doc: OptionalUnlessRequiredId<TSchema>): Promise<InsertOneResult<TSchema>>;\n  insertOne(\n    doc: OptionalUnlessRequiredId<TSchema>,\n    callback: Callback<InsertOneResult<TSchema>>\n  ): void;\n  insertOne(\n    doc: OptionalUnlessRequiredId<TSchema>,\n    options: InsertOneOptions\n  ): Promise<InsertOneResult<TSchema>>;\n  insertOne(\n    doc: OptionalUnlessRequiredId<TSchema>,\n    options: InsertOneOptions,\n    callback: Callback<InsertOneResult<TSchema>>\n  ): void;\n  insertOne(\n    doc: OptionalUnlessRequiredId<TSchema>,\n    options?: InsertOneOptions | Callback<InsertOneResult<TSchema>>,\n    callback?: Callback<InsertOneResult<TSchema>>\n  ): Promise<InsertOneResult<TSchema>> | void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // CSFLE passes in { w: 'majority' } to ensure the lib works in both 3.x and 4.x\n    // we support that option style here only\n    if (options && Reflect.get(options, 'w')) {\n      options.writeConcern = WriteConcern.fromOptions(Reflect.get(options, 'w'));\n    }\n\n    return executeOperation(\n      this.s.db.s.client,\n      new InsertOneOperation(\n        this as TODO_NODE_3286,\n        doc,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insertMany(docs: OptionalUnlessRequiredId<TSchema>[]): Promise<InsertManyResult<TSchema>>;\n  insertMany(\n    docs: OptionalUnlessRequiredId<TSchema>[],\n    callback: Callback<InsertManyResult<TSchema>>\n  ): void;\n  insertMany(\n    docs: OptionalUnlessRequiredId<TSchema>[],\n    options: BulkWriteOptions\n  ): Promise<InsertManyResult<TSchema>>;\n  insertMany(\n    docs: OptionalUnlessRequiredId<TSchema>[],\n    options: BulkWriteOptions,\n    callback: Callback<InsertManyResult<TSchema>>\n  ): void;\n  insertMany(\n    docs: OptionalUnlessRequiredId<TSchema>[],\n    options?: BulkWriteOptions | Callback<InsertManyResult<TSchema>>,\n    callback?: Callback<InsertManyResult<TSchema>>\n  ): Promise<InsertManyResult<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ? Object.assign({}, options) : { ordered: true };\n\n    return executeOperation(\n      this.s.db.s.client,\n      new InsertManyOperation(\n        this as TODO_NODE_3286,\n        docs,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Perform a bulkWrite operation without a fluent API\n   *\n   * Legal operation types are\n   *\n   * ```js\n   *  { insertOne: { document: { a: 1 } } }\n   *\n   *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n   *\n   *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n   *\n   *  { updateMany: { filter: {}, update: {$set: {\"a.$[i].x\": 5}}, arrayFilters: [{ \"i.x\": 5 }]} }\n   *\n   *  { deleteOne: { filter: {c:1} } }\n   *\n   *  { deleteMany: { filter: {c:1} } }\n   *\n   *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true} }\n   *```\n   * Please note that raw operations are no longer accepted as of driver version 4.0.\n   *\n   * If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param operations - Bulk operations to perform\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   * @throws MongoDriverError if operations is not an array\n   */\n  bulkWrite(operations: AnyBulkWriteOperation<TSchema>[]): Promise<BulkWriteResult>;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    callback: Callback<BulkWriteResult>\n  ): void;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options: BulkWriteOptions\n  ): Promise<BulkWriteResult>;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options: BulkWriteOptions,\n    callback: Callback<BulkWriteResult>\n  ): void;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\n    callback?: Callback<BulkWriteResult>\n  ): Promise<BulkWriteResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || { ordered: true };\n\n    if (!Array.isArray(operations)) {\n      throw new MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n\n    return executeOperation(\n      this.s.db.s.client,\n      new BulkWriteOperation(\n        this as TODO_NODE_3286,\n        operations as TODO_NODE_3286,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Update a single document in a collection\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - The update operations to be applied to the document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>\n  ): Promise<UpdateResult>;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    callback: Callback<UpdateResult>\n  ): void;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options: UpdateOptions\n  ): Promise<UpdateResult>;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options: UpdateOptions,\n    callback: Callback<UpdateResult>\n  ): void;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options?: UpdateOptions | Callback<UpdateResult>,\n    callback?: Callback<UpdateResult>\n  ): Promise<UpdateResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new UpdateOneOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Replace a document in a collection with another document\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>\n  ): Promise<UpdateResult | Document>;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: ReplaceOptions\n  ): Promise<UpdateResult | Document>;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: ReplaceOptions,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options?: ReplaceOptions | Callback<UpdateResult | Document>,\n    callback?: Callback<UpdateResult | Document>\n  ): Promise<UpdateResult | Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new ReplaceOneOperation(\n        this as TODO_NODE_3286,\n        filter,\n        replacement,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Update multiple documents in a collection\n   *\n   * @param filter - The filter used to select the documents to update\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>\n  ): Promise<UpdateResult | Document>;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: UpdateOptions\n  ): Promise<UpdateResult | Document>;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: UpdateOptions,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options?: UpdateOptions | Callback<UpdateResult | Document>,\n    callback?: Callback<UpdateResult | Document>\n  ): Promise<UpdateResult | Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new UpdateManyOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Delete a document from a collection\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  deleteOne(filter: Filter<TSchema>): Promise<DeleteResult>;\n  deleteOne(filter: Filter<TSchema>, callback: Callback<DeleteResult>): void;\n  deleteOne(filter: Filter<TSchema>, options: DeleteOptions): Promise<DeleteResult>;\n  deleteOne(\n    filter: Filter<TSchema>,\n    options: DeleteOptions,\n    callback?: Callback<DeleteResult>\n  ): void;\n  deleteOne(\n    filter: Filter<TSchema>,\n    options?: DeleteOptions | Callback<DeleteResult>,\n    callback?: Callback<DeleteResult>\n  ): Promise<DeleteResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new DeleteOneOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Delete multiple documents from a collection\n   *\n   * @param filter - The filter used to select the documents to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  deleteMany(filter: Filter<TSchema>): Promise<DeleteResult>;\n  deleteMany(filter: Filter<TSchema>, callback: Callback<DeleteResult>): void;\n  deleteMany(filter: Filter<TSchema>, options: DeleteOptions): Promise<DeleteResult>;\n  deleteMany(\n    filter: Filter<TSchema>,\n    options: DeleteOptions,\n    callback: Callback<DeleteResult>\n  ): void;\n  deleteMany(\n    filter: Filter<TSchema>,\n    options?: DeleteOptions | Callback<DeleteResult>,\n    callback?: Callback<DeleteResult>\n  ): Promise<DeleteResult> | void {\n    if (filter == null) {\n      filter = {};\n      options = {};\n      callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter as Callback<DeleteResult>;\n      filter = {};\n      options = {};\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return executeOperation(\n      this.s.db.s.client,\n      new DeleteManyOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Rename the collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the Db or MongoClient.\n   *\n   * @param newName - New name of of the collection.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  rename(newName: string): Promise<Collection>;\n  rename(newName: string, callback: Callback<Collection>): void;\n  rename(newName: string, options: RenameOptions): Promise<Collection>;\n  rename(newName: string, options: RenameOptions, callback: Callback<Collection>): void;\n  rename(\n    newName: string,\n    options?: RenameOptions | Callback<Collection>,\n    callback?: Callback<Collection>\n  ): Promise<Collection> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.s.db.s.client,\n      new RenameOperation(this as TODO_NODE_3286, newName, {\n        ...options,\n        readPreference: ReadPreference.PRIMARY\n      }),\n      callback\n    );\n  }\n\n  /**\n   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  drop(): Promise<boolean>;\n  drop(callback: Callback<boolean>): void;\n  drop(options: DropCollectionOptions): Promise<boolean>;\n  drop(options: DropCollectionOptions, callback: Callback<boolean>): void;\n  drop(\n    options?: DropCollectionOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.s.db.s.client,\n      new DropCollectionOperation(this.s.db, this.collectionName, options),\n      callback\n    );\n  }\n\n  /**\n   * Fetches the first document that matches the filter\n   *\n   * @param filter - Query for find Operation\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOne(): Promise<WithId<TSchema> | null>;\n  findOne(callback: Callback<WithId<TSchema> | null>): void;\n  findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\n  findOne(filter: Filter<TSchema>, callback: Callback<WithId<TSchema> | null>): void;\n  findOne(filter: Filter<TSchema>, options: FindOptions): Promise<WithId<TSchema> | null>;\n  findOne(\n    filter: Filter<TSchema>,\n    options: FindOptions,\n    callback: Callback<WithId<TSchema> | null>\n  ): void;\n\n  // allow an override of the schema.\n  findOne<T = TSchema>(): Promise<T | null>;\n  findOne<T = TSchema>(callback: Callback<T | null>): void;\n  findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>;\n  findOne<T = TSchema>(filter: Filter<TSchema>, options?: FindOptions): Promise<T | null>;\n  findOne<T = TSchema>(\n    filter: Filter<TSchema>,\n    options?: FindOptions,\n    callback?: Callback<T | null>\n  ): void;\n\n  findOne(\n    filter?: Filter<TSchema> | Callback<WithId<TSchema> | null>,\n    options?: FindOptions | Callback<WithId<TSchema> | null>,\n    callback?: Callback<WithId<TSchema> | null>\n  ): Promise<WithId<TSchema> | null> | void {\n    if (callback != null && typeof callback !== 'function') {\n      throw new MongoInvalidArgumentError(\n        'Third parameter to `findOne()` must be a callback or undefined'\n      );\n    }\n\n    if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    }\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    const finalFilter = filter ?? {};\n    const finalOptions = options ?? {};\n    return this.find(finalFilter, finalOptions).limit(-1).batchSize(1).next(callback);\n  }\n\n  /**\n   * Creates a cursor for a filter that can be used to iterate over results from MongoDB\n   *\n   * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate\n   */\n  find(): FindCursor<WithId<TSchema>>;\n  find(filter: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>>;\n  find<T extends Document>(filter: Filter<TSchema>, options?: FindOptions): FindCursor<T>;\n  find(filter?: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>> {\n    if (arguments.length > 2) {\n      throw new MongoInvalidArgumentError(\n        'Method \"collection.find()\" accepts at most two arguments'\n      );\n    }\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new FindCursor<WithId<TSchema>>(\n      this.s.db.s.client,\n      this.s.namespace,\n      filter,\n      resolveOptions(this as TODO_NODE_3286, options)\n    );\n  }\n\n  /**\n   * Returns the options of the collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  options(): Promise<Document>;\n  options(callback: Callback<Document>): void;\n  options(options: OperationOptions): Promise<Document>;\n  options(options: OperationOptions, callback: Callback<Document>): void;\n  options(\n    options?: OperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new OptionsOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Returns if the collection is a capped collection\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  isCapped(): Promise<boolean>;\n  isCapped(callback: Callback<boolean>): void;\n  isCapped(options: OperationOptions): Promise<boolean>;\n  isCapped(options: OperationOptions, callback: Callback<boolean>): void;\n  isCapped(\n    options?: OperationOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new IsCappedOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection collection.\n   *\n   * @param indexSpec - The field name or index specification to create an index for\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   *\n   * @example\n   * ```js\n   * const collection = client.db('foo').collection('bar');\n   *\n   * await collection.createIndex({ a: 1, b: -1 });\n   *\n   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n   * await collection.createIndex([ [c, 1], [d, -1] ]);\n   *\n   * // Equivalent to { e: 1 }\n   * await collection.createIndex('e');\n   *\n   * // Equivalent to { f: 1, g: 1 }\n   * await collection.createIndex(['f', 'g'])\n   *\n   * // Equivalent to { h: 1, i: -1 }\n   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n   *\n   * // Equivalent to { j: 1, k: -1, l: 2d }\n   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n   * ```\n   */\n  createIndex(indexSpec: IndexSpecification): Promise<string>;\n  createIndex(indexSpec: IndexSpecification, callback: Callback<string>): void;\n  createIndex(indexSpec: IndexSpecification, options: CreateIndexesOptions): Promise<string>;\n  createIndex(\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions,\n    callback: Callback<string>\n  ): void;\n  createIndex(\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new CreateIndexOperation(\n        this as TODO_NODE_3286,\n        this.collectionName,\n        indexSpec,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Creates multiple indexes in the collection, this method is only supported for\n   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n   * error.\n   *\n   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n   * Index specifications are defined {@link http://docs.mongodb.org/manual/reference/command/createIndexes/| here}.\n   *\n   * @param indexSpecs - An array of index specifications to be created\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   *\n   * @example\n   * ```js\n   * const collection = client.db('foo').collection('bar');\n   * await collection.createIndexes([\n   *   // Simple index on field fizz\n   *   {\n   *     key: { fizz: 1 },\n   *   }\n   *   // wildcard index\n   *   {\n   *     key: { '$**': 1 }\n   *   },\n   *   // named index on darmok and jalad\n   *   {\n   *     key: { darmok: 1, jalad: -1 }\n   *     name: 'tanagra'\n   *   }\n   * ]);\n   * ```\n   */\n  createIndexes(indexSpecs: IndexDescription[]): Promise<string[]>;\n  createIndexes(indexSpecs: IndexDescription[], callback: Callback<string[]>): void;\n  createIndexes(indexSpecs: IndexDescription[], options: CreateIndexesOptions): Promise<string[]>;\n  createIndexes(\n    indexSpecs: IndexDescription[],\n    options: CreateIndexesOptions,\n    callback: Callback<string[]>\n  ): void;\n  createIndexes(\n    indexSpecs: IndexDescription[],\n    options?: CreateIndexesOptions | Callback<string[]>,\n    callback?: Callback<string[]>\n  ): Promise<string[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ? Object.assign({}, options) : {};\n    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n\n    return executeOperation(\n      this.s.db.s.client,\n      new CreateIndexesOperation(\n        this as TODO_NODE_3286,\n        this.collectionName,\n        indexSpecs,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Drops an index from this collection.\n   *\n   * @param indexName - Name of the index to drop.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropIndex(indexName: string): Promise<Document>;\n  dropIndex(indexName: string, callback: Callback<Document>): void;\n  dropIndex(indexName: string, options: DropIndexesOptions): Promise<Document>;\n  dropIndex(indexName: string, options: DropIndexesOptions, callback: Callback<Document>): void;\n  dropIndex(\n    indexName: string,\n    options?: DropIndexesOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = resolveOptions(this, options);\n\n    // Run only against primary\n    options.readPreference = ReadPreference.primary;\n\n    return executeOperation(\n      this.s.db.s.client,\n      new DropIndexOperation(this as TODO_NODE_3286, indexName, options),\n      callback\n    );\n  }\n\n  /**\n   * Drops all indexes from this collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropIndexes(): Promise<Document>;\n  dropIndexes(callback: Callback<Document>): void;\n  dropIndexes(options: DropIndexesOptions): Promise<Document>;\n  dropIndexes(options: DropIndexesOptions, callback: Callback<Document>): void;\n  dropIndexes(\n    options?: DropIndexesOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new DropIndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  listIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n    return new ListIndexesCursor(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /**\n   * Checks if one or more indexes exist on the collection, fails on first non-existing index\n   *\n   * @param indexes - One or more index names to check.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexExists(indexes: string | string[]): Promise<boolean>;\n  indexExists(indexes: string | string[], callback: Callback<boolean>): void;\n  indexExists(indexes: string | string[], options: IndexInformationOptions): Promise<boolean>;\n  indexExists(\n    indexes: string | string[],\n    options: IndexInformationOptions,\n    callback: Callback<boolean>\n  ): void;\n  indexExists(\n    indexes: string | string[],\n    options?: IndexInformationOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new IndexExistsOperation(this as TODO_NODE_3286, indexes, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexInformation(): Promise<Document>;\n  indexInformation(callback: Callback<Document>): void;\n  indexInformation(options: IndexInformationOptions): Promise<Document>;\n  indexInformation(options: IndexInformationOptions, callback: Callback<Document>): void;\n  indexInformation(\n    options?: IndexInformationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new IndexInformationOperation(this.s.db, this.collectionName, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Gets an estimate of the count of documents in a collection using collection metadata.\n   * This will always run a count command on all server versions.\n   *\n   * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n   * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n   * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n   * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n   * encountering errors.\n   *\n   * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  estimatedDocumentCount(): Promise<number>;\n  estimatedDocumentCount(callback: Callback<number>): void;\n  estimatedDocumentCount(options: EstimatedDocumentCountOptions): Promise<number>;\n  estimatedDocumentCount(options: EstimatedDocumentCountOptions, callback: Callback<number>): void;\n  estimatedDocumentCount(\n    options?: EstimatedDocumentCountOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    return executeOperation(\n      this.s.db.s.client,\n      new EstimatedDocumentCountOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Gets the number of documents matching the filter.\n   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n   * the following query operators must be replaced:\n   *\n   * | Operator | Replacement |\n   * | -------- | ----------- |\n   * | `$where`   | [`$expr`][1] |\n   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n   *\n   * [1]: https://docs.mongodb.com/manual/reference/operator/query/expr/\n   * [2]: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\n   * [3]: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\n   * [4]: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   *\n   * @param filter - The filter for the count\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   *\n   * @see https://docs.mongodb.com/manual/reference/operator/query/expr/\n   * @see https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\n   * @see https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\n   * @see https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   */\n  countDocuments(): Promise<number>;\n  countDocuments(callback: Callback<number>): void;\n  countDocuments(filter: Filter<TSchema>): Promise<number>;\n  countDocuments(callback: Callback<number>): void;\n  countDocuments(filter: Filter<TSchema>, options: CountDocumentsOptions): Promise<number>;\n  countDocuments(\n    filter: Filter<TSchema>,\n    options: CountDocumentsOptions,\n    callback: Callback<number>\n  ): void;\n  countDocuments(filter: Filter<TSchema>, callback: Callback<number>): void;\n  countDocuments(\n    filter?: Document | CountDocumentsOptions | Callback<number>,\n    options?: CountDocumentsOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (filter == null) {\n      (filter = {}), (options = {}), (callback = undefined);\n    } else if (typeof filter === 'function') {\n      (callback = filter as Callback<number>), (filter = {}), (options = {});\n    } else {\n      if (arguments.length === 2) {\n        if (typeof options === 'function') (callback = options), (options = {});\n      }\n    }\n\n    filter ??= {};\n    return executeOperation(\n      this.s.db.s.client,\n      new CountDocumentsOperation(\n        this as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options as CountDocumentsOptions)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * The distinct command returns a list of distinct values for the given key across a collection.\n   *\n   * @param key - Field of the document to find distinct values for\n   * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\n  ): void;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\n  ): void;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    options: DistinctOptions\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    options: DistinctOptions,\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\n  ): void;\n\n  // Embedded documents overload\n  distinct(key: string): Promise<any[]>;\n  distinct(key: string, callback: Callback<any[]>): void;\n  distinct(key: string, filter: Filter<TSchema>): Promise<any[]>;\n  distinct(key: string, filter: Filter<TSchema>, callback: Callback<any[]>): void;\n  distinct(key: string, filter: Filter<TSchema>, options: DistinctOptions): Promise<any[]>;\n  distinct(\n    key: string,\n    filter: Filter<TSchema>,\n    options: DistinctOptions,\n    callback: Callback<any[]>\n  ): void;\n  // Implementation\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter?: Filter<TSchema> | DistinctOptions | Callback<any[]>,\n    options?: DistinctOptions | Callback<any[]>,\n    callback?: Callback<any[]>\n  ): Promise<any[]> | void {\n    if (typeof filter === 'function') {\n      (callback = filter), (filter = {}), (options = {});\n    } else {\n      if (arguments.length === 3 && typeof options === 'function') {\n        (callback = options), (options = {});\n      }\n    }\n\n    filter ??= {};\n    return executeOperation(\n      this.s.db.s.client,\n      new DistinctOperation(\n        this as TODO_NODE_3286,\n        key as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options as DistinctOptions)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve all the indexes on the collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexes(): Promise<Document[]>;\n  indexes(callback: Callback<Document[]>): void;\n  indexes(options: IndexInformationOptions): Promise<Document[]>;\n  indexes(options: IndexInformationOptions, callback: Callback<Document[]>): void;\n  indexes(\n    options?: IndexInformationOptions | Callback<Document[]>,\n    callback?: Callback<Document[]>\n  ): Promise<Document[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new IndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Get all the collection statistics.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  stats(): Promise<CollStats>;\n  stats(callback: Callback<CollStats>): void;\n  stats(options: CollStatsOptions): Promise<CollStats>;\n  stats(options: CollStatsOptions, callback: Callback<CollStats>): void;\n  stats(\n    options?: CollStatsOptions | Callback<CollStats>,\n    callback?: Callback<CollStats>\n  ): Promise<CollStats> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.s.db.s.client,\n      new CollStatsOperation(this as TODO_NODE_3286, options),\n      callback\n    );\n  }\n\n  /**\n   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOneAndDelete(filter: Filter<TSchema>): Promise<ModifyResult<TSchema>>;\n  findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndDelete(filter: Filter<TSchema>, callback: Callback<ModifyResult<TSchema>>): void;\n  findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndDelete(\n    filter: Filter<TSchema>,\n    options?: FindOneAndDeleteOptions | Callback<ModifyResult<TSchema>>,\n    callback?: Callback<ModifyResult<TSchema>>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new FindOneAndDeleteOperation(\n        this as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options?: FindOneAndReplaceOptions | Callback<ModifyResult<TSchema>>,\n    callback?: Callback<ModifyResult<TSchema>>\n  ): Promise<ModifyResult<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new FindOneAndReplaceOperation(\n        this as TODO_NODE_3286,\n        filter,\n        replacement,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - Update operations to be performed on the document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options?: FindOneAndUpdateOptions | Callback<ModifyResult<TSchema>>,\n    callback?: Callback<ModifyResult<TSchema>>\n  ): Promise<ModifyResult<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.db.s.client,\n      new FindOneAndUpdateOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    if (arguments.length > 2) {\n      throw new MongoInvalidArgumentError(\n        'Method \"collection.aggregate()\" accepts at most two arguments'\n      );\n    }\n    if (!Array.isArray(pipeline)) {\n      throw new MongoInvalidArgumentError(\n        'Argument \"pipeline\" must be an array of aggregation stages'\n      );\n    }\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new AggregationCursor(\n      this.s.db.s.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct usecases:\n   * - The first is to override the schema that may be defined for this specific collection\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   * @example\n   * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n   * ```ts\n   * collection.watch<{ _id: number }>()\n   *   .on('change', change => console.log(change._id.toFixed(4)));\n   * ```\n   *\n   * @example\n   * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n   * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n   * No need start from scratch on the ChangeStreamInsertDocument type!\n   * By using an intersection we can save time and ensure defaults remain the same type!\n   * ```ts\n   * collection\n   *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n   *     { $addFields: { comment: 'big changes' } },\n   *     { $match: { operationType: 'insert' } }\n   *   ])\n   *   .on('change', change => {\n   *     change.comment.startsWith('big');\n   *     change.operationType === 'insert';\n   *     // No need to narrow in code because the generics did that for us!\n   *     expectType<Schema>(change.fullDocument);\n   *   });\n   * ```\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TLocal - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<TLocal extends Document = TSchema, TChange extends Document = ChangeStreamDocument<TLocal>>(\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ): ChangeStream<TLocal, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TLocal, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /**\n   * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n   *\n   * @deprecated collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.\n   * @param map - The mapping function.\n   * @param reduce - The reduce function.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>\n  ): Promise<Document | Document[]>;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    callback: Callback<Document | Document[]>\n  ): void;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    options: MapReduceOptions<TKey, TValue>\n  ): Promise<Document | Document[]>;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    options: MapReduceOptions<TKey, TValue>,\n    callback: Callback<Document | Document[]>\n  ): void;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    options?: MapReduceOptions<TKey, TValue> | Callback<Document | Document[]>,\n    callback?: Callback<Document | Document[]>\n  ): Promise<Document | Document[]> | void {\n    emitWarningOnce(\n      'collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.'\n    );\n    if ('function' === typeof options) (callback = options), (options = {});\n    // Out must always be defined (make sure we don't break weirdly on pre 1.8+ servers)\n    // TODO NODE-3339: Figure out if this is still necessary given we no longer officially support pre-1.8\n    if (options?.out == null) {\n      throw new MongoInvalidArgumentError(\n        'Option \"out\" must be defined, see mongodb docs for possible values'\n      );\n    }\n\n    if ('function' === typeof map) {\n      map = map.toString();\n    }\n\n    if ('function' === typeof reduce) {\n      reduce = reduce.toString();\n    }\n\n    if ('function' === typeof options.finalize) {\n      options.finalize = options.finalize.toString();\n    }\n\n    return executeOperation(\n      this.s.db.s.client,\n      new MapReduceOperation(\n        this as TODO_NODE_3286,\n        map,\n        reduce,\n        resolveOptions(this, options) as TODO_NODE_3286\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implemenation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeUnorderedBulkOp(options?: BulkWriteOptions): UnorderedBulkOperation {\n    return new UnorderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /**\n   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implemenation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n  initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n    return new OrderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /** Get the db scoped logger */\n  getLogger(): Logger {\n    return this.s.db.s.logger;\n  }\n\n  get logger(): Logger {\n    return this.s.db.s.logger;\n  }\n\n  /**\n   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @deprecated Use insertOne, insertMany or bulkWrite instead.\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insert(\n    docs: OptionalUnlessRequiredId<TSchema>[],\n    options: BulkWriteOptions,\n    callback: Callback<InsertManyResult<TSchema>>\n  ): Promise<InsertManyResult<TSchema>> | void {\n    emitWarningOnce(\n      'collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.'\n    );\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || { ordered: false };\n    docs = !Array.isArray(docs) ? [docs] : docs;\n\n    if (options.keepGoing === true) {\n      options.ordered = false;\n    }\n\n    return this.insertMany(docs, options, callback);\n  }\n\n  /**\n   * Updates documents.\n   *\n   * @deprecated use updateOne, updateMany or bulkWrite\n   * @param filter - The filter for the update operation.\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  update(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: UpdateOptions,\n    callback: Callback<Document>\n  ): Promise<UpdateResult> | void {\n    emitWarningOnce(\n      'collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.'\n    );\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return this.updateMany(filter, update, options, callback);\n  }\n\n  /**\n   * Remove documents.\n   *\n   * @deprecated use deleteOne, deleteMany or bulkWrite\n   * @param filter - The filter for the remove operation.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  remove(\n    filter: Filter<TSchema>,\n    options: DeleteOptions,\n    callback: Callback\n  ): Promise<DeleteResult> | void {\n    emitWarningOnce(\n      'collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.'\n    );\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return this.deleteMany(filter, options, callback);\n  }\n\n  /**\n   * An estimated count of matching documents in the db to a filter.\n   *\n   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   *\n   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n   *\n   * @param filter - The filter for the count.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  count(): Promise<number>;\n  count(callback: Callback<number>): void;\n  count(filter: Filter<TSchema>): Promise<number>;\n  count(filter: Filter<TSchema>, callback: Callback<number>): void;\n  count(filter: Filter<TSchema>, options: CountOptions): Promise<number>;\n  count(\n    filter: Filter<TSchema>,\n    options: CountOptions,\n    callback: Callback<number>\n  ): Promise<number> | void;\n  count(\n    filter?: Filter<TSchema> | CountOptions | Callback<number>,\n    options?: CountOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (typeof filter === 'function') {\n      (callback = filter), (filter = {}), (options = {});\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    filter ??= {};\n    return executeOperation(\n      this.s.db.s.client,\n      new CountOperation(\n        MongoDBNamespace.fromString(this.namespace),\n        filter,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}