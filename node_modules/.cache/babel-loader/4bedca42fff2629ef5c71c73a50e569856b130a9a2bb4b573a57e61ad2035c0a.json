{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LoggerLevel = void 0;\nconst util_1 = require(\"util\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\n// Filters for classes\nconst classFilters = {};\nlet filteredClasses = {};\nlet level;\n// Save the process id\nconst pid = process.pid;\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger = console.warn;\n/** @public */\nexports.LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n});\n/**\n * @public\n */\nclass Logger {\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className, options) {\n    options = options !== null && options !== void 0 ? options : {};\n    // Current reference\n    this.className = className;\n    // Current logger\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    }\n    // Set level of logging, default is error\n    if (options.loggerLevel) {\n      level = options.loggerLevel || exports.LoggerLevel.ERROR;\n    }\n    // Add all class names\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  debug(message, object) {\n    if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  warn(message, object) {\n    if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  info(message, object) {\n    if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  error(message, object) {\n    if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /** Is the logger set at info level */\n  isInfo() {\n    return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n  isError() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n  isWarn() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.WARN || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at debug level */\n  isDebug() {\n    return level === exports.LoggerLevel.DEBUG;\n  }\n  /** Resets the logger to default settings, error and no filtered classes */\n  static reset() {\n    level = exports.LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n  /** Get the current logger function */\n  static currentLogger() {\n    return currentLogger;\n  }\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n  static setCurrentLogger(logger) {\n    if (typeof logger !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n    }\n    currentLogger = logger;\n  }\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n  static filter(type, values) {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => filteredClasses[x] = true);\n    }\n  }\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n  static setLevel(newLevel) {\n    if (newLevel !== exports.LoggerLevel.INFO && newLevel !== exports.LoggerLevel.ERROR && newLevel !== exports.LoggerLevel.DEBUG && newLevel !== exports.LoggerLevel.WARN) {\n      throw new error_1.MongoInvalidArgumentError(`Argument \"newLevel\" should be one of ${(0, utils_1.enumToString)(exports.LoggerLevel)}`);\n    }\n    level = newLevel;\n  }\n}\nexports.Logger = Logger;","map":{"version":3,"mappings":"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","names":["classFilters","filteredClasses","level","pid","process","currentLogger","console","warn","exports","Object","freeze","ERROR","WARN","INFO","DEBUG","error","info","debug","Logger","constructor","className","options","logger","loggerLevel","message","object","isDebug","keys","length","dateTime","Date","getTime","msg","state","type","date","meta","isWarn","isInfo","isError","reset","setCurrentLogger","error_1","filter","values","Array","isArray","forEach","x","setLevel","newLevel"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/logger.ts"],"sourcesContent":["import { format } from 'util';\n\nimport { MongoInvalidArgumentError } from './error';\nimport { enumToString } from './utils';\n\n// Filters for classes\nconst classFilters: any = {};\nlet filteredClasses: any = {};\nlet level: LoggerLevel;\n\n// Save the process id\nconst pid = process.pid;\n\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger: LoggerFunction = console.warn;\n\n/** @public */\nexport const LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n} as const);\n\n/** @public */\nexport type LoggerLevel = typeof LoggerLevel[keyof typeof LoggerLevel];\n\n/** @public */\nexport type LoggerFunction = (message?: any, ...optionalParams: any[]) => void;\n\n/** @public */\nexport interface LoggerOptions {\n  logger?: LoggerFunction;\n  loggerLevel?: LoggerLevel;\n}\n\n/**\n * @public\n */\nexport class Logger {\n  className: string;\n\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className: string, options?: LoggerOptions) {\n    options = options ?? {};\n\n    // Current reference\n    this.className = className;\n\n    // Current logger\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    }\n\n    // Set level of logging, default is error\n    if (options.loggerLevel) {\n      level = options.loggerLevel || LoggerLevel.ERROR;\n    }\n\n    // Add all class names\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  debug(message: string, object?: unknown): void {\n    if (\n      this.isDebug() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  warn(message: string, object?: unknown): void {\n    if (\n      this.isWarn() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  info(message: string, object?: unknown): void {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  error(message: string, object?: unknown): void {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /** Is the logger set at info level */\n  isInfo(): boolean {\n    return level === LoggerLevel.INFO || level === LoggerLevel.DEBUG;\n  }\n\n  /** Is the logger set at error level */\n  isError(): boolean {\n    return level === LoggerLevel.ERROR || level === LoggerLevel.INFO || level === LoggerLevel.DEBUG;\n  }\n\n  /** Is the logger set at error level */\n  isWarn(): boolean {\n    return (\n      level === LoggerLevel.ERROR ||\n      level === LoggerLevel.WARN ||\n      level === LoggerLevel.INFO ||\n      level === LoggerLevel.DEBUG\n    );\n  }\n\n  /** Is the logger set at debug level */\n  isDebug(): boolean {\n    return level === LoggerLevel.DEBUG;\n  }\n\n  /** Resets the logger to default settings, error and no filtered classes */\n  static reset(): void {\n    level = LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n\n  /** Get the current logger function */\n  static currentLogger(): LoggerFunction {\n    return currentLogger;\n  }\n\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n  static setCurrentLogger(logger: LoggerFunction): void {\n    if (typeof logger !== 'function') {\n      throw new MongoInvalidArgumentError('Current logger must be a function');\n    }\n\n    currentLogger = logger;\n  }\n\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n  static filter(type: string, values: string[]): void {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => (filteredClasses[x] = true));\n    }\n  }\n\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n  static setLevel(newLevel: LoggerLevel): void {\n    if (\n      newLevel !== LoggerLevel.INFO &&\n      newLevel !== LoggerLevel.ERROR &&\n      newLevel !== LoggerLevel.DEBUG &&\n      newLevel !== LoggerLevel.WARN\n    ) {\n      throw new MongoInvalidArgumentError(\n        `Argument \"newLevel\" should be one of ${enumToString(LoggerLevel)}`\n      );\n    }\n\n    level = newLevel;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}