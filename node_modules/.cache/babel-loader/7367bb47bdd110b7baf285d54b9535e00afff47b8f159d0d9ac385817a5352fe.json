{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\nconst util_1 = require(\"util\");\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    /**\n     * @internal\n     *\n     * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n     *\n     * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n     */\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this._processErrorIteratorMode = (0, util_1.promisify)(this._processErrorIteratorModeCallback);\n    this.pipeline = pipeline;\n    this.options = options;\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken() {\n    var _a;\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n  hasNext(callback) {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const hasNext = await this.cursor.hasNext();\n            return hasNext;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(hasNext => callback(undefined, hasNext), error => callback(error));\n    });\n  }\n  next(callback) {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.next();\n          const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.next();\n            const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n            return processedChange;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(change => callback(undefined, change), error => callback(error));\n    });\n  }\n  tryNext(callback) {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return (0, utils_1.maybePromise)(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.tryNext();\n          return change !== null && change !== void 0 ? change : null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.tryNext();\n            return change !== null && change !== void 0 ? change : null;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(change => callback(undefined, change), error => callback(error));\n    });\n  }\n  /** Is the cursor closed */\n  get closed() {\n    return this[kClosed] || this.cursor.closed;\n  }\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n    return changeStreamCursor;\n  }\n  /** @internal */\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close(() => {\n      // nothing to do\n    });\n  }\n  /** @internal */\n  _streamEvents(cursor) {\n    var _a;\n    this._setIsEmitter();\n    const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n  /** @internal */\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n  _processChange(change) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n  _processErrorStreamMode(changeStreamError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n  _processErrorIteratorModeCallback(changeStreamError, callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    }\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        // if the topology can't reconnect, close the stream\n        if (serverSelectionError) return this.close(() => callback(changeStreamError));\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        callback();\n      });\n    } else {\n      this.close(() => callback(changeStreamError));\n    }\n  }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;","map":{"version":3,"mappings":";;;;;;AACA;AAGA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAKA;AAEA;AACA,MAAMA,aAAa,GAAGC,MAAM,CAAC,cAAc,CAAC;AAC5C;AACA,MAAMC,OAAO,GAAGD,MAAM,CAAC,QAAQ,CAAC;AAChC;AACA,MAAME,KAAK,GAAGF,MAAM,CAAC,MAAM,CAAC;AAE5B,MAAMG,qBAAqB,GAAG,CAC5B,aAAa,EACb,YAAY,EACZ,sBAAsB,EACtB,cAAc,EACd,0BAA0B,EAC1B,oBAAoB,CACZ;AAEV,MAAMC,mBAAmB,GAAG;EAC1BC,UAAU,EAAEL,MAAM,CAAC,YAAY,CAAC;EAChCM,QAAQ,EAAEN,MAAM,CAAC,UAAU,CAAC;EAC5BO,OAAO,EAAEP,MAAM,CAAC,SAAS;CAC1B;AAED,MAAMQ,oBAAoB,GAAG,CAACC,gCAAoB,EAAEA,eAAG,EAAEA,iBAAK,CAAC;AAE/D,MAAMC,qBAAqB,GACzB,6EAA6E;AAC/E,MAAMC,yBAAyB,GAAG,wBAAwB;AAgd1D;;;;AAIA,MAAaC,YAGX,SAAQC,+BAAuD;EAyC/D;;;;;;EAMAC,YACEC,MAAuB,EAEU;IAAA,IADjCC,+EAAuB,EAAE;IAAA,IACzBC,8EAA+B,EAAE;IAEjC,KAAK,EAAE;IA+UT;;;;;;;IAOA;IACQ,8BAAyB,GAAG,oBAAS,EAAC,IAAI,CAACC,iCAAiC,CAAC;IArVnF,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IAEtB,IAAIF,MAAM,YAAYI,uBAAU,EAAE;MAChC,IAAI,CAACC,IAAI,GAAGhB,mBAAmB,CAACC,UAAU;KAC3C,MAAM,IAAIU,MAAM,YAAYM,OAAE,EAAE;MAC/B,IAAI,CAACD,IAAI,GAAGhB,mBAAmB,CAACE,QAAQ;KACzC,MAAM,IAAIS,MAAM,YAAYO,0BAAW,EAAE;MACxC,IAAI,CAACF,IAAI,GAAGhB,mBAAmB,CAACG,OAAO;KACxC,MAAM;MACL,MAAM,IAAIgB,8BAAsB,CAC9B,mGAAmG,CACpG;;IAGH,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACS,SAAS,GAAGT,MAAM,CAACU,CAAC,CAACD,SAAS;IACnC,IAAI,CAAC,IAAI,CAACP,OAAO,CAACS,cAAc,IAAIX,MAAM,CAACW,cAAc,EAAE;MACzD,IAAI,CAACT,OAAO,CAACS,cAAc,GAAGX,MAAM,CAACW,cAAc;;IAGrD;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAACX,OAAO,CAAC;IAErD,IAAI,CAAChB,OAAO,CAAC,GAAG,KAAK;IACrB,IAAI,CAACC,KAAK,CAAC,GAAG,KAAK;IAEnB;IACA,IAAI,CAAC2B,EAAE,CAAC,aAAa,EAAEC,SAAS,IAAG;MACjC,IAAIA,SAAS,KAAK,QAAQ,IAAI,IAAI,CAACH,MAAM,IAAI,IAAI,CAACI,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC/E,IAAI,CAACC,aAAa,CAAC,IAAI,CAACL,MAAM,CAAC;;IAEnC,CAAC,CAAC;IAEF,IAAI,CAACE,EAAE,CAAC,gBAAgB,EAAEC,SAAS,IAAG;;MACpC,IAAIA,SAAS,KAAK,QAAQ,IAAI,IAAI,CAACC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAACJ,MAAM,EAAE;QAC/E,UAAI,CAAC5B,aAAa,CAAC,0CAAEkC,kBAAkB,CAAC,MAAM,CAAC;;IAEnD,CAAC,CAAC;EACJ;EAEA;EACA,IAAIC,YAAY;IACd,OAAO,IAAI,CAACnC,aAAa,CAAC;EAC5B;EAEA;EACA,IAAIoC,WAAW;;IACb,OAAO,UAAI,CAACR,MAAM,0CAAEQ,WAAW;EACjC;EAKAC,OAAO,CAACC,QAAmB;IACzB,IAAI,CAACC,cAAc,EAAE;IACrB;IACA;IACA;IACA,OAAO,wBAAY,EAACD,QAAQ,EAAEA,QAAQ,IAAG;MACvC,CAAC,YAAW;QACV,IAAI;UACF,MAAMD,OAAO,GAAG,MAAM,IAAI,CAACT,MAAM,CAACS,OAAO,EAAE;UAC3C,OAAOA,OAAO;SACf,CAAC,OAAOG,KAAK,EAAE;UACd,IAAI;YACF,MAAM,IAAI,CAACC,yBAAyB,CAACD,KAAK,CAAC;YAC3C,MAAMH,OAAO,GAAG,MAAM,IAAI,CAACT,MAAM,CAACS,OAAO,EAAE;YAC3C,OAAOA,OAAO;WACf,CAAC,OAAOG,KAAK,EAAE;YACd,MAAM,IAAI,CAACE,KAAK,EAAE,CAACC,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;YACpC,MAAMJ,KAAK;;;MAGjB,CAAC,GAAG,CAACK,IAAI,CACPR,OAAO,IAAIC,QAAQ,CAACQ,SAAS,EAAET,OAAO,CAAC,EACvCG,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAAC,CACzB;IACH,CAAC,CAAC;EACJ;EAKAO,IAAI,CAACT,QAA4B;IAC/B,IAAI,CAACC,cAAc,EAAE;IACrB;IACA;IACA;IACA,OAAO,wBAAY,EAACD,QAAQ,EAAEA,QAAQ,IAAG;MACvC,CAAC,YAAW;QACV,IAAI;UACF,MAAMU,MAAM,GAAG,MAAM,IAAI,CAACpB,MAAM,CAACmB,IAAI,EAAE;UACvC,MAAME,eAAe,GAAG,IAAI,CAACC,cAAc,CAACF,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,IAAI,CAAC;UAC3D,OAAOC,eAAe;SACvB,CAAC,OAAOT,KAAK,EAAE;UACd,IAAI;YACF,MAAM,IAAI,CAACC,yBAAyB,CAACD,KAAK,CAAC;YAC3C,MAAMQ,MAAM,GAAG,MAAM,IAAI,CAACpB,MAAM,CAACmB,IAAI,EAAE;YACvC,MAAME,eAAe,GAAG,IAAI,CAACC,cAAc,CAACF,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,IAAI,CAAC;YAC3D,OAAOC,eAAe;WACvB,CAAC,OAAOT,KAAK,EAAE;YACd,MAAM,IAAI,CAACE,KAAK,EAAE,CAACC,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;YACpC,MAAMJ,KAAK;;;MAGjB,CAAC,GAAG,CAACK,IAAI,CACPG,MAAM,IAAIV,QAAQ,CAACQ,SAAS,EAAEE,MAAM,CAAC,EACrCR,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAAC,CACzB;IACH,CAAC,CAAC;EACJ;EAOAW,OAAO,CAACb,QAAoC;IAC1C,IAAI,CAACC,cAAc,EAAE;IACrB;IACA;IACA;IACA,OAAO,wBAAY,EAACD,QAAQ,EAAEA,QAAQ,IAAG;MACvC,CAAC,YAAW;QACV,IAAI;UACF,MAAMU,MAAM,GAAG,MAAM,IAAI,CAACpB,MAAM,CAACuB,OAAO,EAAE;UAC1C,OAAOH,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,IAAI;SACtB,CAAC,OAAOR,KAAK,EAAE;UACd,IAAI;YACF,MAAM,IAAI,CAACC,yBAAyB,CAACD,KAAK,CAAC;YAC3C,MAAMQ,MAAM,GAAG,MAAM,IAAI,CAACpB,MAAM,CAACuB,OAAO,EAAE;YAC1C,OAAOH,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,IAAI;WACtB,CAAC,OAAOR,KAAK,EAAE;YACd,MAAM,IAAI,CAACE,KAAK,EAAE,CAACC,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;YACpC,MAAMJ,KAAK;;;MAGjB,CAAC,GAAG,CAACK,IAAI,CACPG,MAAM,IAAIV,QAAQ,CAACQ,SAAS,EAAEE,MAAM,CAAC,EACrCR,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAAC,CACzB;IACH,CAAC,CAAC;EACJ;EAEA;EACA,IAAIY,MAAM;IACR,OAAO,IAAI,CAAClD,OAAO,CAAC,IAAI,IAAI,CAAC0B,MAAM,CAACwB,MAAM;EAC5C;EAKAV,KAAK,CAACJ,QAAmB;IACvB,IAAI,CAACpC,OAAO,CAAC,GAAG,IAAI;IAEpB,OAAO,wBAAY,EAACoC,QAAQ,EAAEe,EAAE,IAAG;MACjC,MAAMzB,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,OAAOA,MAAM,CAACc,KAAK,CAACE,GAAG,IAAG;QACxB,IAAI,CAACU,UAAU,EAAE;QACjB,OAAOD,EAAE,CAACT,GAAG,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;;;;EAQAW,MAAM,CAACrC,OAA6B;IAClC,IAAI,IAAI,CAACkC,MAAM,EAAE;MACf,MAAM,IAAI5B,8BAAsB,CAACZ,yBAAyB,CAAC;;IAG7D,IAAI,CAAC4C,aAAa,GAAGtC,OAAO;IAC5B,OAAO,IAAI,CAACU,MAAM,CAAC2B,MAAM,CAACrC,OAAO,CAAC;EACpC;EAEA;EACQuC,aAAa;IACnB,IAAI,IAAI,CAACtD,KAAK,CAAC,KAAK,UAAU,EAAE;MAC9B;MACA,MAAM,IAAIqB,qBAAa,CACrB,gFAAgF,CACjF;;IAEH,IAAI,CAACrB,KAAK,CAAC,GAAG,SAAS;EACzB;EAEA;EACQoC,cAAc;IACpB,IAAI,IAAI,CAACpC,KAAK,CAAC,KAAK,SAAS,EAAE;MAC7B;MACA,MAAM,IAAIqB,qBAAa,CACrB,gFAAgF,CACjF;;IAEH,IAAI,CAACrB,KAAK,CAAC,GAAG,UAAU;EAC1B;EAEA;;;;EAIQ0B,yBAAyB,CAC/BX,OAAwD;IAExD,MAAMwC,wBAAwB,GAAG,yBAAa,EAACxC,OAAO,EAAEd,qBAAqB,CAAC;IAC9E,IAAI,IAAI,CAACiB,IAAI,KAAKhB,mBAAmB,CAACG,OAAO,EAAE;MAC7CkD,wBAAwB,CAACC,oBAAoB,GAAG,IAAI;;IAEtD,MAAM1C,QAAQ,GAAG,CAAC;MAAE2C,aAAa,EAAEF;IAAwB,CAAE,EAAE,GAAG,IAAI,CAACzC,QAAQ,CAAC;IAEhF,MAAM4C,MAAM,GACV,IAAI,CAACxC,IAAI,KAAKhB,mBAAmB,CAACG,OAAO,GACpC,IAAI,CAACQ,MAAsB,GAC5B,IAAI,CAACK,IAAI,KAAKhB,mBAAmB,CAACE,QAAQ,GACzC,IAAI,CAACS,MAAa,CAACU,CAAC,CAACmC,MAAM,GAC5B,IAAI,CAACxC,IAAI,KAAKhB,mBAAmB,CAACC,UAAU,GAC3C,IAAI,CAACU,MAAqB,CAACU,CAAC,CAACoC,EAAE,CAACpC,CAAC,CAACmC,MAAM,GACzC,IAAI;IAEV,IAAIA,MAAM,IAAI,IAAI,EAAE;MAClB;MACA,MAAM,IAAIrC,yBAAiB,CACzB,gFAAgF,IAAI,CAACH,IAAI,CAAC0C,QAAQ,EAAE,EAAE,CACvG;;IAGH,MAAMC,kBAAkB,GAAG,IAAIC,yCAAkB,CAC/CJ,MAAM,EACN,IAAI,CAACpC,SAAS,EACdR,QAAQ,EACRC,OAAO,CACR;IAED,KAAK,MAAMgD,KAAK,IAAIzD,oBAAoB,EAAE;MACxCuD,kBAAkB,CAAClC,EAAE,CAACoC,KAAK,EAAEC,CAAC,IAAI,IAAI,CAACC,IAAI,CAACF,KAAK,EAAEC,CAAC,CAAC,CAAC;;IAGxD,IAAI,IAAI,CAACnC,aAAa,CAACnB,YAAY,CAACwD,MAAM,CAAC,GAAG,CAAC,EAAE;MAC/C,IAAI,CAACpC,aAAa,CAAC+B,kBAAkB,CAAC;;IAGxC,OAAOA,kBAAkB;EAC3B;EAEA;EACQM,0BAA0B,CAAC9B,KAAe;IAChD,IAAI,CAAC4B,IAAI,CAACvD,YAAY,CAAC0D,KAAK,EAAE/B,KAAK,CAAC;IAEpC,IAAI,CAACE,KAAK,CAAC,MAAK;MACd;IAAA,CACD,CAAC;EACJ;EAEA;EACQT,aAAa,CAACL,MAA4C;;IAChE,IAAI,CAAC6B,aAAa,EAAE;IACpB,MAAMF,MAAM,GAAG,UAAI,CAACvD,aAAa,CAAC,mCAAI4B,MAAM,CAAC2B,MAAM,EAAE;IACrD,IAAI,CAACvD,aAAa,CAAC,GAAGuD,MAAM;IAC5BA,MAAM,CAACzB,EAAE,CAAC,MAAM,EAAEkB,MAAM,IAAG;MACzB,IAAI;QACF,MAAMC,eAAe,GAAG,IAAI,CAACC,cAAc,CAACF,MAAM,CAAC;QACnD,IAAI,CAACoB,IAAI,CAACvD,YAAY,CAACwD,MAAM,EAAEpB,eAAe,CAAC;OAChD,CAAC,OAAOT,KAAK,EAAE;QACd,IAAI,CAAC4B,IAAI,CAACvD,YAAY,CAAC0D,KAAK,EAAE/B,KAAK,CAAC;;IAExC,CAAC,CAAC;IACFe,MAAM,CAACzB,EAAE,CAAC,OAAO,EAAEU,KAAK,IAAI,IAAI,CAACgC,uBAAuB,CAAChC,KAAK,CAAC,CAAC;EAClE;EAEA;EACQc,UAAU;IAChB,MAAMnB,YAAY,GAAG,IAAI,CAACnC,aAAa,CAAC;IACxC,IAAImC,YAAY,EAAE;MAChB,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAACsC,OAAO,CAACP,KAAK,IAAI/B,YAAY,CAACD,kBAAkB,CAACgC,KAAK,CAAC,CAAC;MAC1F/B,YAAY,CAACuC,OAAO,EAAE;;IAGxB,IAAI,CAAC1E,aAAa,CAAC,GAAG8C,SAAS;EACjC;EAEA;EACQI,cAAc,CAACF,MAAsB;IAC3C,IAAI,IAAI,CAAC9C,OAAO,CAAC,EAAE;MACjB;MACA,MAAM,IAAIsB,qBAAa,CAACZ,yBAAyB,CAAC;;IAGpD;IACA,IAAIoC,MAAM,IAAI,IAAI,EAAE;MAClB;MACA,MAAM,IAAIxB,yBAAiB,CAACZ,yBAAyB,CAAC;;IAGxD,IAAIoC,MAAM,IAAI,CAACA,MAAM,CAAC2B,GAAG,EAAE;MACzB,MAAM,IAAInD,8BAAsB,CAACb,qBAAqB,CAAC;;IAGzD;IACA,IAAI,CAACiB,MAAM,CAACgD,gBAAgB,CAAC5B,MAAM,CAAC2B,GAAG,CAAC;IAExC;IACA;IACA,IAAI,CAACzD,OAAO,CAAC2D,oBAAoB,GAAG/B,SAAS;IAE7C,OAAOE,MAAM;EACf;EAEA;EACQwB,uBAAuB,CAACM,iBAA2B;IACzD;IACA,IAAI,IAAI,CAAC5E,OAAO,CAAC,EAAE;IAEnB,IAAI,4BAAgB,EAAC4E,iBAAiB,EAAE,IAAI,CAAClD,MAAM,CAACmD,cAAc,CAAC,EAAE;MACnE,IAAI,CAACzB,UAAU,EAAE;MACjB,IAAI,CAAC1B,MAAM,CAACc,KAAK,EAAE,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC;MAErC,MAAMqC,QAAQ,GAAG,uBAAW,EAAC,IAAI,CAAChE,MAAM,CAAC;MACzCgE,QAAQ,CAACC,YAAY,CAAC,IAAI,CAACrD,MAAM,CAACD,cAAc,EAAE,EAAE,EAAEuD,oBAAoB,IAAG;QAC3E,IAAIA,oBAAoB,EAAE,OAAO,IAAI,CAACZ,0BAA0B,CAACQ,iBAAiB,CAAC;QACnF,IAAI,CAAClD,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAAC,IAAI,CAACD,MAAM,CAACuD,aAAa,CAAC;MACzE,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACb,0BAA0B,CAACQ,iBAAiB,CAAC;;EAEtD;EAYA;EACQ3D,iCAAiC,CAAC2D,iBAA2B,EAAExC,QAAkB;IACvF,IAAI,IAAI,CAACpC,OAAO,CAAC,EAAE;MACjB;MACA,OAAOoC,QAAQ,CAAC,IAAId,qBAAa,CAACZ,yBAAyB,CAAC,CAAC;;IAG/D,IAAI,4BAAgB,EAACkE,iBAAiB,EAAE,IAAI,CAAClD,MAAM,CAACmD,cAAc,CAAC,EAAE;MACnE,IAAI,CAACnD,MAAM,CAACc,KAAK,EAAE,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC;MAErC,MAAMqC,QAAQ,GAAG,uBAAW,EAAC,IAAI,CAAChE,MAAM,CAAC;MACzCgE,QAAQ,CAACC,YAAY,CAAC,IAAI,CAACrD,MAAM,CAACD,cAAc,EAAE,EAAE,EAAEuD,oBAAoB,IAAG;QAC3E;QACA,IAAIA,oBAAoB,EAAE,OAAO,IAAI,CAACxC,KAAK,CAAC,MAAMJ,QAAQ,CAACwC,iBAAiB,CAAC,CAAC;QAE9E,IAAI,CAAClD,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAAC,IAAI,CAACD,MAAM,CAACuD,aAAa,CAAC;QACvE7C,QAAQ,EAAE;MACZ,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACI,KAAK,CAAC,MAAMJ,QAAQ,CAACwC,iBAAiB,CAAC,CAAC;;EAEjD;;AAraFM;AAmBE;AACgBvE,qBAAQ,GAAGH,oBAAQ;AACnC;AACgBG,iBAAI,GAAGH,gBAAI;AAC3B;AACgBG,iBAAI,GAAGH,gBAAI;AAC3B;AACgBG,kBAAK,GAAGH,iBAAK;AAC7B;;;;;;AAMgBG,mBAAM,GAAGH,kBAAM;AAC/B;AACgBG,gBAAG,GAAGH,eAAG;AACzB;AACgBG,kBAAK,GAAGH,iBAAK;AAC7B;;;;AAIgBG,iCAAoB,GAAGH,gCAAoB","names":["kCursorStream","Symbol","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","constants_1","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","_processErrorIteratorModeCallback","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","removeAllListeners","cursorStream","resumeToken","hasNext","callback","_setIsIterator","error","_processErrorIteratorMode","close","catch","err","then","undefined","next","change","processedChange","_processChange","tryNext","closed","cb","_endStream","stream","streamOptions","_setIsEmitter","changeStreamStageOptions","allChangesForCluster","$changeStream","client","db","toString","changeStreamCursor","change_stream_cursor_1","event","e","emit","CHANGE","_closeEmitterModeWithError","ERROR","_processErrorStreamMode","forEach","destroy","_id","cacheResumeToken","startAtOperationTime","changeStreamError","maxWireVersion","topology","selectServer","serverSelectionError","resumeOptions","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/change_stream.ts"],"sourcesContent":["import type { Readable } from 'stream';\nimport { promisify } from 'util';\n\nimport type { Binary, Document, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\nimport type { AbstractCursorEvents, CursorStreamOptions } from './cursor/abstract_cursor';\nimport { ChangeStreamCursor, ChangeStreamCursorOptions } from './cursor/change_stream_cursor';\nimport { Db } from './db';\nimport {\n  AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { InferIdType, TypedEventEmitter } from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport type { ReadPreference } from './read_preference';\nimport type { ServerSessionId } from './sessions';\nimport { Callback, filterOptions, getTopology, maybePromise, MongoDBNamespace } from './utils';\n\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument',\n  'fullDocumentBeforeChange',\n  'showExpandedEvents'\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE];\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n  fullDocument?: string;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\nexport type OperationTime = Timestamp;\n\n/** @public */\nexport interface PipeOptions {\n  end?: boolean;\n}\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends AggregateOptions {\n  /**\n   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n   *\n   * When set to 'updateLookup', the change notification for partial updates\n   * will include both a delta describing the changes to the document as well\n   * as a copy of the entire document that was changed from some time after\n   * the change occurred.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * post-image of the modified document for replace and update change events\n   * if the post-image for this event is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the post-image is not available.\n   */\n  fullDocument?: string;\n\n  /**\n   * Allowed values: 'whenAvailable', 'required', 'off'.\n   *\n   * The default is to not send a value, which is equivalent to 'off'.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * pre-image of the modified document for replace, update, and delete change\n   * events if it is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the pre-image is not available.\n   */\n  fullDocumentBeforeChange?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /**\n   * Allows you to start a changeStream after a specified event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams\n   */\n  resumeAfter?: ResumeToken;\n  /**\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams\n   */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /**\n   * The number of documents to return per batch.\n   * @see https://docs.mongodb.com/manual/reference/command/aggregate\n   */\n  batchSize?: number;\n\n  /**\n   * When enabled, configures the change stream to include extra change events.\n   *\n   * - createIndexes\n   * - dropIndexes\n   * - modify\n   * - create\n   * - shardCollection\n   * - reshardCollection\n   * - refineCollectionShardKey\n   */\n  showExpandedEvents?: boolean;\n}\n\n/** @public */\nexport interface ChangeStreamNameSpace {\n  db: string;\n  coll: string;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n  /**\n   * For unsharded collections this contains a single field `_id`.\n   * For sharded collections, this will contain all the components of the shard key\n   */\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCommon {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: ResumeToken;\n  /**\n   * The timestamp from the oplog entry associated with the event.\n   * For events that happened as part of a multi-document transaction, the associated change stream\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n   * associated with different transactions or even not be associated with any transaction.\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n   */\n  clusterTime?: Timestamp;\n\n  /**\n   * The transaction number.\n   * Only present if the operation is part of a multi-document transaction.\n   *\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n   */\n  txnNumber?: number;\n\n  /**\n   * The identifier for the session associated with the transaction.\n   * Only present if the operation is part of a multi-document transaction.\n   */\n  lsid?: ServerSessionId;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCollectionUUID {\n  /**\n   * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n   *    flag is enabled.\n   *\n   * @since 6.1.0\n   */\n  collectionUUID: Binary;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentOperationDescription {\n  /**\n   * An description of the operation.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * @since 6.1.0\n   */\n  operationDescription?: Document;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'insert';\n  /** This key will contain the document being inserted */\n  fullDocument: TSchema;\n  /** Namespace the insert event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'update';\n  /**\n   * This is only set if `fullDocument` is set to `'updateLookup'`\n   * Contains the point-in-time post-image of the modified document if the\n   * post-image is available and either 'required' or 'whenAvailable' was\n   * specified for the 'fullDocument' option when creating the change stream.\n   */\n  fullDocument?: TSchema;\n  /** Contains a description of updated and removed fields in this operation */\n  updateDescription: UpdateDescription<TSchema>;\n  /** Namespace the update event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'replace';\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n  fullDocument: TSchema;\n  /** Namespace the replace event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'delete';\n  /** Namespace the delete event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport interface ChangeStreamDropDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'drop';\n  /** Namespace the drop event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport interface ChangeStreamRenameDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'rename';\n  /** The new name for the `ns.coll` collection */\n  to: { db: string; coll: string };\n  /** The \"from\" namespace that the rename occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropDatabase';\n  /** The database dropped */\n  ns: { db: string };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'invalidate';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'createIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamDropIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCollModDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'modify';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'create';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamShardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'shardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamReshardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'reshardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamRefineCollectionShardKeyDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'refineCollectionShardKey';\n}\n\n/** @public */\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\n  | ChangeStreamInsertDocument<TSchema>\n  | ChangeStreamUpdateDocument<TSchema>\n  | ChangeStreamReplaceDocument<TSchema>\n  | ChangeStreamDeleteDocument<TSchema>\n  | ChangeStreamDropDocument\n  | ChangeStreamRenameDocument\n  | ChangeStreamDropDatabaseDocument\n  | ChangeStreamInvalidateDocument\n  | ChangeStreamCreateIndexDocument\n  | ChangeStreamCreateDocument\n  | ChangeStreamCollModDocument\n  | ChangeStreamDropIndexDocument\n  | ChangeStreamShardCollectionDocument\n  | ChangeStreamReshardCollectionDocument\n  | ChangeStreamRefineCollectionShardKeyDocument;\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields?: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields?: string[];\n\n  /**\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n   * - $addFields\n   * - $set\n   * - $replaceRoot\n   * - $replaceWith\n   */\n  truncatedArrays?: Array<{\n    /** The name of the truncated field. */\n    field: string;\n    /** The number of elements in the truncated array. */\n    newSize: number;\n  }>;\n}\n\n/** @public */\nexport type ChangeStreamEvents<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: any): void;\n  more(response?: any): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: TChange): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\n  pipeline: Document[];\n  options: ChangeStreamOptions;\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor: ChangeStreamCursor<TSchema, TChange>;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kCursorStream]?: Readable & AsyncIterable<TChange>;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = RESPONSE;\n  /** @event */\n  static readonly MORE = MORE;\n  /** @event */\n  static readonly INIT = INIT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = CHANGE;\n  /** @event */\n  static readonly END = END;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): (Readable & AsyncIterable<TChange>) | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback): Promise<boolean> | void {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return maybePromise(callback, callback => {\n      (async () => {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const hasNext = await this.cursor.hasNext();\n            return hasNext;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(\n        hasNext => callback(undefined, hasNext),\n        error => callback(error)\n      );\n    });\n  }\n\n  /** Get the next available document from the Change Stream. */\n  next(): Promise<TChange>;\n  next(callback: Callback<TChange>): void;\n  next(callback?: Callback<TChange>): Promise<TChange> | void {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return maybePromise(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.next();\n          const processedChange = this._processChange(change ?? null);\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.next();\n            const processedChange = this._processChange(change ?? null);\n            return processedChange;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(\n        change => callback(undefined, change),\n        error => callback(error)\n      );\n    });\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<Document | null>;\n  tryNext(callback: Callback<Document | null>): void;\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\n    this._setIsIterator();\n    // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n    // Shadowing is intentional here.  We want to override the `callback` variable\n    // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n    return maybePromise(callback, callback => {\n      (async () => {\n        try {\n          const change = await this.cursor.tryNext();\n          return change ?? null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n            const change = await this.cursor.tryNext();\n            return change ?? null;\n          } catch (error) {\n            await this.close().catch(err => err);\n            throw error;\n          }\n        }\n      })().then(\n        change => callback(undefined, change),\n        error => callback(error)\n      );\n    });\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || this.cursor.closed;\n  }\n\n  /** Close the Change Stream */\n  close(): Promise<void>;\n  close(callback: Callback): void;\n  close(callback?: Callback): Promise<void> | void {\n    this[kClosed] = true;\n\n    return maybePromise(callback, cb => {\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\n    if (this.closed) {\n      throw new MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /** @internal */\n  private _setIsEmitter(): void {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n      );\n    }\n    this[kMode] = 'emitter';\n  }\n\n  /** @internal */\n  private _setIsIterator(): void {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n      );\n    }\n    this[kMode] = 'iterator';\n  }\n\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  private _createChangeStreamCursor(\n    options: ChangeStreamOptions | ChangeStreamCursorOptions\n  ): ChangeStreamCursor<TSchema, TChange> {\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n\n    const client: MongoClient | null =\n      this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n        ? (this.parent as MongoClient)\n        : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n        ? (this.parent as Db).s.client\n        : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n        ? (this.parent as Collection).s.db.s.client\n        : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new MongoRuntimeError(\n        `Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`\n      );\n    }\n\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\n      client,\n      this.namespace,\n      pipeline,\n      options\n    );\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n\n  /** @internal */\n  private _closeEmitterModeWithError(error: AnyError): void {\n    this.emit(ChangeStream.ERROR, error);\n\n    this.close(() => {\n      // nothing to do\n    });\n  }\n\n  /** @internal */\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\n    this._setIsEmitter();\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n\n  /** @internal */\n  private _endStream(): void {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n\n  /** @internal */\n  private _processChange(change: TChange | null): TChange {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n\n    return change;\n  }\n\n  /** @internal */\n  private _processErrorStreamMode(changeStreamError: AnyError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n\n    if (isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n      this.cursor.close().catch(() => null);\n\n      const topology = getTopology(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n   *\n   * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n   */\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  private _processErrorIteratorMode = promisify(this._processErrorIteratorModeCallback);\n\n  /** @internal */\n  private _processErrorIteratorModeCallback(changeStreamError: AnyError, callback: Callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    }\n\n    if (isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\n      this.cursor.close().catch(() => null);\n\n      const topology = getTopology(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        // if the topology can't reconnect, close the stream\n        if (serverSelectionError) return this.close(() => callback(changeStreamError));\n\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        callback();\n      });\n    } else {\n      this.close(() => callback(changeStreamError));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}