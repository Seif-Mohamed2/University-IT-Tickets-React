{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n  }\n  buildInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n  serverInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n  serverStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      serverStatus: 1\n    }, options, callback);\n  }\n  ping(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      ping: 1\n    }, options, callback);\n  }\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n  }\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n  }\n  validateCollection(collectionName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n  }\n  listDatabases(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n  }\n  replSetGetStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      replSetGetStatus: 1\n    }, options, callback);\n  }\n}\nexports.Admin = Admin;","map":{"version":3,"mappings":"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","names":["Admin","constructor","db","s","command","options","callback","Object","assign","dbName","client","run_command_1","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","password","undefined","add_user_1","removeUser","remove_user_1","validateCollection","collectionName","validate_collection_1","listDatabases","list_databases_1","replSetGetStatus","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/admin.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { Db } from './db';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport type { CommandOperationOptions } from './operations/command';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  ListDatabasesOperation,\n  ListDatabasesOptions,\n  ListDatabasesResult\n} from './operations/list_databases';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport {\n  ValidateCollectionOperation,\n  ValidateCollectionOptions\n} from './operations/validate_collection';\nimport type { Callback } from './utils';\n\n/** @internal */\nexport interface AdminPrivate {\n  db: Db;\n}\n\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\nexport class Admin {\n  /** @internal */\n  s: AdminPrivate;\n\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db: Db) {\n    this.s = { db };\n  }\n\n  /**\n   * Execute a command\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  command(command: Document): Promise<Document>;\n  command(command: Document, callback: Callback<Document>): void;\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\n  command(\n    command: Document,\n    options?: RunCommandOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({ dbName: 'admin' }, options);\n\n    return executeOperation(\n      this.s.db.s.client,\n      new RunCommandOperation(this.s.db, command, options),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  buildInfo(): Promise<Document>;\n  buildInfo(callback: Callback<Document>): void;\n  buildInfo(options: CommandOperationOptions): Promise<Document>;\n  buildInfo(options: CommandOperationOptions, callback: Callback<Document>): void;\n  buildInfo(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ buildinfo: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  serverInfo(): Promise<Document>;\n  serverInfo(callback: Callback<Document>): void;\n  serverInfo(options: CommandOperationOptions): Promise<Document>;\n  serverInfo(options: CommandOperationOptions, callback: Callback<Document>): void;\n  serverInfo(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ buildinfo: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  serverStatus(): Promise<Document>;\n  serverStatus(callback: Callback<Document>): void;\n  serverStatus(options: CommandOperationOptions): Promise<Document>;\n  serverStatus(options: CommandOperationOptions, callback: Callback<Document>): void;\n  serverStatus(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ serverStatus: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  ping(): Promise<Document>;\n  ping(callback: Callback<Document>): void;\n  ping(options: CommandOperationOptions): Promise<Document>;\n  ping(options: CommandOperationOptions, callback: Callback<Document>): void;\n  ping(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ ping: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param password - An optional password for the new user\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  addUser(username: string): Promise<Document>;\n  addUser(username: string, callback: Callback<Document>): void;\n  addUser(username: string, password: string): Promise<Document>;\n  addUser(username: string, password: string, callback: Callback<Document>): void;\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\n  addUser(\n    username: string,\n    password: string,\n    options: AddUserOptions,\n    callback: Callback<Document>\n  ): void;\n  addUser(\n    username: string,\n    password?: string | AddUserOptions | Callback<Document>,\n    options?: AddUserOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof password === 'function') {\n      (callback = password), (password = undefined), (options = {});\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        (callback = options), (options = password), (password = undefined);\n      } else {\n        (options = password), (callback = undefined), (password = undefined);\n      }\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    options = Object.assign({ dbName: 'admin' }, options);\n\n    return executeOperation(\n      this.s.db.s.client,\n      new AddUserOperation(this.s.db, username, password, options),\n      callback\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  removeUser(username: string): Promise<boolean>;\n  removeUser(username: string, callback: Callback<boolean>): void;\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\n  removeUser(\n    username: string,\n    options?: RemoveUserOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({ dbName: 'admin' }, options);\n\n    return executeOperation(\n      this.s.db.s.client,\n      new RemoveUserOperation(this.s.db, username, options),\n      callback\n    );\n  }\n\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  validateCollection(collectionName: string): Promise<Document>;\n  validateCollection(collectionName: string, callback: Callback<Document>): void;\n  validateCollection(collectionName: string, options: ValidateCollectionOptions): Promise<Document>;\n  validateCollection(\n    collectionName: string,\n    options: ValidateCollectionOptions,\n    callback: Callback<Document>\n  ): void;\n  validateCollection(\n    collectionName: string,\n    options?: ValidateCollectionOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.s.db.s.client,\n      new ValidateCollectionOperation(this, collectionName, options),\n      callback\n    );\n  }\n\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  listDatabases(): Promise<ListDatabasesResult>;\n  listDatabases(callback: Callback<ListDatabasesResult>): void;\n  listDatabases(options: ListDatabasesOptions): Promise<ListDatabasesResult>;\n  listDatabases(options: ListDatabasesOptions, callback: Callback<ListDatabasesResult>): void;\n  listDatabases(\n    options?: ListDatabasesOptions | Callback<ListDatabasesResult>,\n    callback?: Callback<ListDatabasesResult>\n  ): Promise<ListDatabasesResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.s.db.s.client,\n      new ListDatabasesOperation(this.s.db, options),\n      callback\n    );\n  }\n\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  replSetGetStatus(): Promise<Document>;\n  replSetGetStatus(callback: Callback<Document>): void;\n  replSetGetStatus(options: CommandOperationOptions): Promise<Document>;\n  replSetGetStatus(options: CommandOperationOptions, callback: Callback<Document>): void;\n  replSetGetStatus(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ replSetGetStatus: 1 }, options, callback as Callback<Document>);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}