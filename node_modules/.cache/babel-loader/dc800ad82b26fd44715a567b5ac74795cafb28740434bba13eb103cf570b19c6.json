{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = require(\"../cmap/wire_protocol/constants\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst server_description_1 = require(\"./server_description\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([common_1.ServerType.RSSecondary, common_1.ServerType.RSArbiter, common_1.ServerType.RSOther]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n  /**\n   * Create a TopologyDescription\n   */\n  constructor(topologyType) {\n    let serverDescriptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let maxSetVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let maxElectionId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let commonWireVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    var _a, _b;\n    options = options !== null && options !== void 0 ? options : {};\n    this.type = topologyType !== null && topologyType !== void 0 ? topologyType : common_1.TopologyType.Unknown;\n    this.servers = serverDescriptions !== null && serverDescriptions !== void 0 ? serverDescriptions : new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.heartbeatFrequencyMS = (_a = options.heartbeatFrequencyMS) !== null && _a !== void 0 ? _a : 0;\n    this.localThresholdMS = (_b = options.localThresholdMS) !== null && _b !== void 0 ? _b : 15;\n    this.setName = setName !== null && setName !== void 0 ? setName : null;\n    this.maxElectionId = maxElectionId !== null && maxElectionId !== void 0 ? maxElectionId : null;\n    this.maxSetVersion = maxSetVersion !== null && maxSetVersion !== void 0 ? maxSetVersion : null;\n    this.commonWireVersion = commonWireVersion !== null && commonWireVersion !== void 0 ? commonWireVersion : 0;\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      // Load balancer mode is always compatible.\n      if (serverDescription.type === common_1.ServerType.Unknown || serverDescription.type === common_1.ServerType.LoadBalancer) {\n        continue;\n      }\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n    // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    this.logicalSessionTimeoutMinutes = null;\n    for (const [, server] of this.servers) {\n      if (server.isReadable) {\n        if (server.logicalSessionTimeoutMinutes == null) {\n          // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n          this.logicalSessionTimeoutMinutes = null;\n          break;\n        }\n        if (this.logicalSessionTimeoutMinutes == null) {\n          // First server with a non null logicalSessionsTimeout\n          this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n          continue;\n        }\n        // Always select the smaller of the:\n        // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n        this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n      }\n    }\n  }\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @internal\n   */\n  updateFromSrvPollingEvent(ev) {\n    let srvMaxHosts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /** The SRV addresses defines the set of addresses we should be using */\n    const incomingHostnames = ev.hostnames();\n    const currentHostnames = new Set(this.servers.keys());\n    const hostnamesToAdd = new Set(incomingHostnames);\n    const hostnamesToRemove = new Set();\n    for (const hostname of currentHostnames) {\n      // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n      hostnamesToAdd.delete(hostname);\n      if (!incomingHostnames.has(hostname)) {\n        // If the SRV Records no longer include this hostname\n        // we have to stop using it\n        hostnamesToRemove.add(hostname);\n      }\n    }\n    if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n      // No new hosts to add and none to remove\n      return this;\n    }\n    const serverDescriptions = new Map(this.servers);\n    for (const removedHost of hostnamesToRemove) {\n      serverDescriptions.delete(removedHost);\n    }\n    if (hostnamesToAdd.size > 0) {\n      if (srvMaxHosts === 0) {\n        // Add all!\n        for (const hostToAdd of hostnamesToAdd) {\n          serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n        }\n      } else if (serverDescriptions.size < srvMaxHosts) {\n        // Add only the amount needed to get us back to srvMaxHosts\n        const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n        for (const selectedHostToAdd of selectedHosts) {\n          serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n        }\n      }\n    }\n    return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, {\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      localThresholdMS: this.localThresholdMS\n    });\n  }\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   * @internal\n   */\n  update(serverDescription) {\n    const address = serverDescription.address;\n    // potentially mutated values\n    let {\n      type: topologyType,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion\n    } = this;\n    const serverType = serverDescription.type;\n    const serverDescriptions = new Map(this.servers);\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n    if (typeof serverDescription.setName === 'string' && typeof setName === 'string' && serverDescription.setName !== setName) {\n      if (topologyType === common_1.TopologyType.Single) {\n        // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n        serverDescription = new server_description_1.ServerDescription(address);\n      } else {\n        serverDescriptions.delete(address);\n      }\n    }\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n    if (topologyType === common_1.TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n        heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n        localThresholdMS: this.localThresholdMS\n      });\n    }\n    if (topologyType === common_1.TopologyType.Unknown) {\n      if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n    if (topologyType === common_1.TopologyType.Sharded) {\n      if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n    }\n    if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n      if (serverType === common_1.ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n        topologyType = result[0];\n        setName = result[1];\n      }\n    }\n    if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === common_1.ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n    return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      localThresholdMS: this.localThresholdMS\n    });\n  }\n  get error() {\n    const descriptionsWithError = Array.from(this.servers.values()).filter(sd => sd.error);\n    if (descriptionsWithError.length > 0) {\n      return descriptionsWithError[0].error;\n    }\n    return null;\n  }\n  /**\n   * Determines if the topology description has any known servers\n   */\n  get hasKnownServers() {\n    return Array.from(this.servers.values()).some(sd => sd.type !== common_1.ServerType.Unknown);\n  }\n  /**\n   * Determines if this topology description has a data-bearing server available.\n   */\n  get hasDataBearingServers() {\n    return Array.from(this.servers.values()).some(sd => sd.isDataBearing);\n  }\n  /**\n   * Determines if the topology has a definition for the provided address\n   * @internal\n   */\n  hasServer(address) {\n    return this.servers.has(address);\n  }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n  switch (serverType) {\n    case common_1.ServerType.Standalone:\n      return common_1.TopologyType.Single;\n    case common_1.ServerType.Mongos:\n      return common_1.TopologyType.Sharded;\n    case common_1.ServerType.RSPrimary:\n      return common_1.TopologyType.ReplicaSetWithPrimary;\n    case common_1.ServerType.RSOther:\n    case common_1.ServerType.RSSecondary:\n      return common_1.TopologyType.ReplicaSetNoPrimary;\n    default:\n      return common_1.TopologyType.Unknown;\n  }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription) {\n  let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let maxSetVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let maxElectionId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n  const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n  if (serverDescription.setVersion && electionId) {\n    if (maxSetVersion && maxElectionId) {\n      if (maxSetVersion > serverDescription.setVersion || (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n    maxElectionId = serverDescription.electionId;\n  }\n  if (serverDescription.setVersion != null && (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n  // We've heard from the primary. Is it the same primary as before?\n  for (const [address, server] of serverDescriptions) {\n    if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n      // There can only be one primary\n      break;\n    }\n  }\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n    }\n  });\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses.filter(addr => responseAddresses.indexOf(addr) === -1).forEach(address => {\n    serverDescriptions.delete(address);\n  });\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription) {\n  let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (setName == null) {\n    // TODO(NODE-3483): should be an appropriate runtime error\n    throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n  }\n  if (setName !== serverDescription.setName || serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n  return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription) {\n  let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n  setName = setName !== null && setName !== void 0 ? setName : serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n    }\n  });\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n  return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n  for (const serverDescription of serverDescriptions.values()) {\n    if (serverDescription.type === common_1.ServerType.RSPrimary) {\n      return common_1.TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n  return common_1.TopologyType.ReplicaSetNoPrimary;\n}","map":{"version":3,"mappings":"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","names":["MIN_SUPPORTED_SERVER_VERSION","WIRE_CONSTANTS","MAX_SUPPORTED_SERVER_VERSION","MIN_SUPPORTED_WIRE_VERSION","MAX_SUPPORTED_WIRE_VERSION","MONGOS_OR_UNKNOWN","Set","common_1","Mongos","Unknown","MONGOS_OR_STANDALONE","Standalone","NON_PRIMARY_RS_MEMBERS","RSSecondary","RSArbiter","RSOther","TopologyDescription","constructor","topologyType","serverDescriptions","setName","maxSetVersion","maxElectionId","commonWireVersion","options","type","servers","Map","stale","compatible","heartbeatFrequencyMS","localThresholdMS","serverDescription","values","LoadBalancer","minWireVersion","compatibilityError","address","maxWireVersion","logicalSessionTimeoutMinutes","server","isReadable","Math","min","updateFromSrvPollingEvent","ev","srvMaxHosts","incomingHostnames","hostnames","currentHostnames","keys","hostnamesToAdd","hostnamesToRemove","hostname","delete","has","add","size","removedHost","hostToAdd","set","server_description_1","selectedHosts","selectedHostToAdd","update","serverType","Single","topologyTypeForServerType","Sharded","ReplicaSetNoPrimary","RSPrimary","result","updateRsFromPrimary","updateRsNoPrimaryFromMember","ReplicaSetWithPrimary","checkHasPrimary","updateRsWithPrimaryFromMember","error","descriptionsWithError","Array","from","filter","sd","length","hasKnownServers","some","hasDataBearingServers","isDataBearing","hasServer","exports","electionId","setVersion","allHosts","forEach","currentAddresses","responseAddresses","addr","indexOf","error_1","me"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/sdam/topology_description.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport * as WIRE_CONSTANTS from '../cmap/wire_protocol/constants';\nimport { MongoRuntimeError, MongoServerError } from '../error';\nimport { compareObjectId, shuffle } from '../utils';\nimport { ServerType, TopologyType } from './common';\nimport { ServerDescription } from './server_description';\nimport type { SrvPollingEvent } from './srv_polling';\n\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\n\nconst MONGOS_OR_UNKNOWN = new Set<ServerType>([ServerType.Mongos, ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set<ServerType>([ServerType.Mongos, ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set<ServerType>([\n  ServerType.RSSecondary,\n  ServerType.RSArbiter,\n  ServerType.RSOther\n]);\n\n/** @public */\nexport interface TopologyDescriptionOptions {\n  heartbeatFrequencyMS?: number;\n  localThresholdMS?: number;\n}\n\n/**\n * Representation of a deployment of servers\n * @public\n */\nexport class TopologyDescription {\n  type: TopologyType;\n  setName: string | null;\n  maxSetVersion: number | null;\n  maxElectionId: ObjectId | null;\n  servers: Map<string, ServerDescription>;\n  stale: boolean;\n  compatible: boolean;\n  compatibilityError?: string;\n  logicalSessionTimeoutMinutes: number | null;\n  heartbeatFrequencyMS: number;\n  localThresholdMS: number;\n  commonWireVersion: number;\n\n  /**\n   * Create a TopologyDescription\n   */\n  constructor(\n    topologyType: TopologyType,\n    serverDescriptions: Map<string, ServerDescription> | null = null,\n    setName: string | null = null,\n    maxSetVersion: number | null = null,\n    maxElectionId: ObjectId | null = null,\n    commonWireVersion: number | null = null,\n    options: TopologyDescriptionOptions | null = null\n  ) {\n    options = options ?? {};\n\n    this.type = topologyType ?? TopologyType.Unknown;\n    this.servers = serverDescriptions ?? new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n    this.localThresholdMS = options.localThresholdMS ?? 15;\n    this.setName = setName ?? null;\n    this.maxElectionId = maxElectionId ?? null;\n    this.maxSetVersion = maxSetVersion ?? null;\n    this.commonWireVersion = commonWireVersion ?? 0;\n\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      // Load balancer mode is always compatible.\n      if (\n        serverDescription.type === ServerType.Unknown ||\n        serverDescription.type === ServerType.LoadBalancer\n      ) {\n        continue;\n      }\n\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n\n    // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    this.logicalSessionTimeoutMinutes = null;\n    for (const [, server] of this.servers) {\n      if (server.isReadable) {\n        if (server.logicalSessionTimeoutMinutes == null) {\n          // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n          this.logicalSessionTimeoutMinutes = null;\n          break;\n        }\n\n        if (this.logicalSessionTimeoutMinutes == null) {\n          // First server with a non null logicalSessionsTimeout\n          this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n          continue;\n        }\n\n        // Always select the smaller of the:\n        // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n        this.logicalSessionTimeoutMinutes = Math.min(\n          this.logicalSessionTimeoutMinutes,\n          server.logicalSessionTimeoutMinutes\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @internal\n   */\n  updateFromSrvPollingEvent(ev: SrvPollingEvent, srvMaxHosts = 0): TopologyDescription {\n    /** The SRV addresses defines the set of addresses we should be using */\n    const incomingHostnames = ev.hostnames();\n    const currentHostnames = new Set(this.servers.keys());\n\n    const hostnamesToAdd = new Set<string>(incomingHostnames);\n    const hostnamesToRemove = new Set<string>();\n    for (const hostname of currentHostnames) {\n      // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n      hostnamesToAdd.delete(hostname);\n      if (!incomingHostnames.has(hostname)) {\n        // If the SRV Records no longer include this hostname\n        // we have to stop using it\n        hostnamesToRemove.add(hostname);\n      }\n    }\n\n    if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n      // No new hosts to add and none to remove\n      return this;\n    }\n\n    const serverDescriptions = new Map(this.servers);\n    for (const removedHost of hostnamesToRemove) {\n      serverDescriptions.delete(removedHost);\n    }\n\n    if (hostnamesToAdd.size > 0) {\n      if (srvMaxHosts === 0) {\n        // Add all!\n        for (const hostToAdd of hostnamesToAdd) {\n          serverDescriptions.set(hostToAdd, new ServerDescription(hostToAdd));\n        }\n      } else if (serverDescriptions.size < srvMaxHosts) {\n        // Add only the amount needed to get us back to srvMaxHosts\n        const selectedHosts = shuffle(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n        for (const selectedHostToAdd of selectedHosts) {\n          serverDescriptions.set(selectedHostToAdd, new ServerDescription(selectedHostToAdd));\n        }\n      }\n    }\n\n    return new TopologyDescription(\n      this.type,\n      serverDescriptions,\n      this.setName,\n      this.maxSetVersion,\n      this.maxElectionId,\n      this.commonWireVersion,\n      { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS }\n    );\n  }\n\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   * @internal\n   */\n  update(serverDescription: ServerDescription): TopologyDescription {\n    const address = serverDescription.address;\n\n    // potentially mutated values\n    let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n\n    const serverType = serverDescription.type;\n    const serverDescriptions = new Map(this.servers);\n\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n\n    if (\n      typeof serverDescription.setName === 'string' &&\n      typeof setName === 'string' &&\n      serverDescription.setName !== setName\n    ) {\n      if (topologyType === TopologyType.Single) {\n        // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n        serverDescription = new ServerDescription(address);\n      } else {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n\n    if (topologyType === TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(\n        TopologyType.Single,\n        serverDescriptions,\n        setName,\n        maxSetVersion,\n        maxElectionId,\n        commonWireVersion,\n        { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS }\n      );\n    }\n\n    if (topologyType === TopologyType.Unknown) {\n      if (serverType === ServerType.Standalone && this.servers.size !== 1) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n\n    if (topologyType === TopologyType.Sharded) {\n      if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetNoPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n\n      if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          serverDescription,\n          setName,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n        topologyType = result[0];\n        setName = result[1];\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetWithPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          serverDescription,\n          setName,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        topologyType = updateRsWithPrimaryFromMember(\n          serverDescriptions,\n          serverDescription,\n          setName\n        );\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n\n    return new TopologyDescription(\n      topologyType,\n      serverDescriptions,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion,\n      { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS }\n    );\n  }\n\n  get error(): MongoServerError | null {\n    const descriptionsWithError = Array.from(this.servers.values()).filter(\n      (sd: ServerDescription) => sd.error\n    );\n\n    if (descriptionsWithError.length > 0) {\n      return descriptionsWithError[0].error;\n    }\n\n    return null;\n  }\n\n  /**\n   * Determines if the topology description has any known servers\n   */\n  get hasKnownServers(): boolean {\n    return Array.from(this.servers.values()).some(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    );\n  }\n\n  /**\n   * Determines if this topology description has a data-bearing server available.\n   */\n  get hasDataBearingServers(): boolean {\n    return Array.from(this.servers.values()).some((sd: ServerDescription) => sd.isDataBearing);\n  }\n\n  /**\n   * Determines if the topology has a definition for the provided address\n   * @internal\n   */\n  hasServer(address: string): boolean {\n    return this.servers.has(address);\n  }\n}\n\nfunction topologyTypeForServerType(serverType: ServerType): TopologyType {\n  switch (serverType) {\n    case ServerType.Standalone:\n      return TopologyType.Single;\n    case ServerType.Mongos:\n      return TopologyType.Sharded;\n    case ServerType.RSPrimary:\n      return TopologyType.ReplicaSetWithPrimary;\n    case ServerType.RSOther:\n    case ServerType.RSSecondary:\n      return TopologyType.ReplicaSetNoPrimary;\n    default:\n      return TopologyType.Unknown;\n  }\n}\n\nfunction updateRsFromPrimary(\n  serverDescriptions: Map<string, ServerDescription>,\n  serverDescription: ServerDescription,\n  setName: string | null = null,\n  maxSetVersion: number | null = null,\n  maxElectionId: ObjectId | null = null\n): [TopologyType, string | null, number | null, ObjectId | null] {\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n\n  const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n  if (serverDescription.setVersion && electionId) {\n    if (maxSetVersion && maxElectionId) {\n      if (\n        maxSetVersion > serverDescription.setVersion ||\n        compareObjectId(maxElectionId, electionId) > 0\n      ) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(\n          serverDescription.address,\n          new ServerDescription(serverDescription.address)\n        );\n\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n\n    maxElectionId = serverDescription.electionId;\n  }\n\n  if (\n    serverDescription.setVersion != null &&\n    (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)\n  ) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n\n  // We've heard from the primary. Is it the same primary as before?\n  for (const [address, server] of serverDescriptions) {\n    if (server.type === ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new ServerDescription(server.address));\n\n      // There can only be one primary\n      break;\n    }\n  }\n\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach((address: string) => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses\n    .filter((addr: string) => responseAddresses.indexOf(addr) === -1)\n    .forEach((address: string) => {\n      serverDescriptions.delete(address);\n    });\n\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\n\nfunction updateRsWithPrimaryFromMember(\n  serverDescriptions: Map<string, ServerDescription>,\n  serverDescription: ServerDescription,\n  setName: string | null = null\n): TopologyType {\n  if (setName == null) {\n    // TODO(NODE-3483): should be an appropriate runtime error\n    throw new MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n  }\n\n  if (\n    setName !== serverDescription.setName ||\n    (serverDescription.me && serverDescription.address !== serverDescription.me)\n  ) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return checkHasPrimary(serverDescriptions);\n}\n\nfunction updateRsNoPrimaryFromMember(\n  serverDescriptions: Map<string, ServerDescription>,\n  serverDescription: ServerDescription,\n  setName: string | null = null\n): [TopologyType, string | null] {\n  const topologyType = TopologyType.ReplicaSetNoPrimary;\n  setName = setName ?? serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n\n  serverDescription.allHosts.forEach((address: string) => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return [topologyType, setName];\n}\n\nfunction checkHasPrimary(serverDescriptions: Map<string, ServerDescription>): TopologyType {\n  for (const serverDescription of serverDescriptions.values()) {\n    if (serverDescription.type === ServerType.RSPrimary) {\n      return TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}