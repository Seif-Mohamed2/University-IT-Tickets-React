{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\nconst index_1 = __importStar(require(\"./index\"));\nfunction redactValidConnectionString(inputUrl, options) {\n  var _a, _b;\n  const url = inputUrl.clone();\n  const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n  const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n  if ((url.username || url.password) && redactUsernames) {\n    url.username = replacementString;\n    url.password = '';\n  } else if (url.password) {\n    url.password = replacementString;\n  }\n  if (url.searchParams.has('authMechanismProperties')) {\n    const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n    if (props.get('AWS_SESSION_TOKEN')) {\n      props.set('AWS_SESSION_TOKEN', replacementString);\n      url.searchParams.set('authMechanismProperties', props.toString());\n    }\n  }\n  if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n    url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n  }\n  if (url.searchParams.has('proxyUsername') && redactUsernames) {\n    url.searchParams.set('proxyUsername', replacementString);\n  }\n  if (url.searchParams.has('proxyPassword')) {\n    url.searchParams.set('proxyPassword', replacementString);\n  }\n  return url;\n}\nexports.redactValidConnectionString = redactValidConnectionString;\nfunction redactConnectionString(uri, options) {\n  var _a, _b;\n  const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n  const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n  let parsed;\n  try {\n    parsed = new index_1.default(uri);\n  } catch (_c) {}\n  if (parsed) {\n    options = {\n      ...options,\n      replacementString: '___credentials___'\n    };\n    return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n  }\n  const regexes = [redactUsernames ? /(?<=\\/\\/)(.*)(?=@)/g : /(?<=\\/\\/[^@]+:)(.*)(?=@)/g, /(?<=AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, /(?<=tlsCertificateKeyFilePassword=)([^&]+)/gi, redactUsernames ? /(?<=proxyUsername=)([^&]+)/gi : null, /(?<=proxyPassword=)([^&]+)/gi];\n  for (const r of regexes) {\n    if (r !== null) {\n      uri = uri.replace(r, replacementString);\n    }\n  }\n  return uri;\n}\nexports.redactConnectionString = redactConnectionString;","map":{"version":3,"mappings":"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","names":["redactValidConnectionString","inputUrl","options","url","clone","replacementString","redactUsernames","username","password","searchParams","has","props","index_1","get","set","toString","exports","redactConnectionString","uri","parsed","redact","replace","regexes","r"],"sources":["../src/redact.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}