{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescription = void 0;\nconst common_1 = require(\"../sdam/common\");\nconst server_description_1 = require(\"../sdam/server_description\");\nconst RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'logicalSessionTimeoutMinutes'];\n/** @public */\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = common_1.ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!(options === null || options === void 0 ? void 0 : options.loadBalanced);\n    this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n  }\n  receiveResponse(response) {\n    if (response == null) {\n      return;\n    }\n    this.type = (0, server_description_1.parseServerType)(response);\n    for (const field of RESPONSE_FIELDS) {\n      if (response[field] != null) {\n        this[field] = response[field];\n      }\n      // testing case\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    }\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => {\n        var _a;\n        return (_a = response.compression) === null || _a === void 0 ? void 0 : _a.includes(c);\n      })[0];\n    }\n  }\n}\nexports.StreamDescription = StreamDescription;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAGA,MAAMA,eAAe,GAAG,CACtB,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,qBAAqB,EACrB,mBAAmB,EACnB,8BAA8B,CACtB;AASV;AACA,MAAaC,iBAAiB;EAiB5BC,YAAYC,OAAe,EAAEC,OAAkC;IAC7D,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,IAAI,GAAGC,mBAAU,CAACC,OAAO;IAC9B,IAAI,CAACC,cAAc,GAAGC,SAAS;IAC/B,IAAI,CAACC,cAAc,GAAGD,SAAS;IAC/B,IAAI,CAACE,iBAAiB,GAAG,QAAQ;IACjC,IAAI,CAACC,mBAAmB,GAAG,QAAQ;IACnC,IAAI,CAACC,iBAAiB,GAAG,MAAM;IAC/B,IAAI,CAACC,4BAA4B,GAAGV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEU,4BAA4B;IACzE,IAAI,CAACC,YAAY,GAAG,CAAC,EAACX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,YAAY;IAC3C,IAAI,CAACC,WAAW,GACdZ,OAAO,IAAIA,OAAO,CAACY,WAAW,IAAIC,KAAK,CAACC,OAAO,CAACd,OAAO,CAACY,WAAW,CAAC,GAChEZ,OAAO,CAACY,WAAW,GACnB,EAAE;EACV;EAEAG,eAAe,CAACC,QAAyB;IACvC,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB;;IAEF,IAAI,CAACf,IAAI,GAAG,wCAAe,EAACe,QAAQ,CAAC;IACrC,KAAK,MAAMC,KAAK,IAAIrB,eAAe,EAAE;MACnC,IAAIoB,QAAQ,CAACC,KAAK,CAAC,IAAI,IAAI,EAAE;QAC3B,IAAI,CAACA,KAAK,CAAC,GAAGD,QAAQ,CAACC,KAAK,CAAC;;MAG/B;MACA,IAAI,wBAAwB,IAAID,QAAQ,EAAE;QACxC,IAAI,CAACE,sBAAsB,GAAGF,QAAQ,CAAC,wBAAwB,CAAC;;;IAIpE,IAAIA,QAAQ,CAACG,WAAW,EAAE;MACxB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACR,WAAW,CAACS,MAAM,CAACC,CAAC,IAAG;QAAA;QAAC,qBAAQ,CAACH,WAAW,0CAAEI,QAAQ,CAACD,CAAC,CAAC;MAAA,EAAC,CAAC,CAAC,CAAC;;EAExF;;AApDFE","names":["RESPONSE_FIELDS","StreamDescription","constructor","address","options","type","common_1","Unknown","minWireVersion","undefined","maxWireVersion","maxBsonObjectSize","maxMessageSizeBytes","maxWriteBatchSize","logicalSessionTimeoutMinutes","loadBalanced","compressors","Array","isArray","receiveResponse","response","field","__nodejs_mock_server__","compression","compressor","filter","c","includes","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cmap/stream_description.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { ServerType } from '../sdam/common';\nimport { parseServerType } from '../sdam/server_description';\nimport type { CompressorName } from './wire_protocol/compression';\n\nconst RESPONSE_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'logicalSessionTimeoutMinutes'\n] as const;\n\n/** @public */\nexport interface StreamDescriptionOptions {\n  compressors?: CompressorName[];\n  logicalSessionTimeoutMinutes?: number;\n  loadBalanced: boolean;\n}\n\n/** @public */\nexport class StreamDescription {\n  address: string;\n  type: string;\n  minWireVersion?: number;\n  maxWireVersion?: number;\n  maxBsonObjectSize: number;\n  maxMessageSizeBytes: number;\n  maxWriteBatchSize: number;\n  compressors: CompressorName[];\n  compressor?: CompressorName;\n  logicalSessionTimeoutMinutes?: number;\n  loadBalanced: boolean;\n\n  __nodejs_mock_server__?: boolean;\n\n  zlibCompressionLevel?: number;\n\n  constructor(address: string, options?: StreamDescriptionOptions) {\n    this.address = address;\n    this.type = ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!options?.loadBalanced;\n    this.compressors =\n      options && options.compressors && Array.isArray(options.compressors)\n        ? options.compressors\n        : [];\n  }\n\n  receiveResponse(response: Document | null): void {\n    if (response == null) {\n      return;\n    }\n    this.type = parseServerType(response);\n    for (const field of RESPONSE_FIELDS) {\n      if (response[field] != null) {\n        this[field] = response[field];\n      }\n\n      // testing case\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    }\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}