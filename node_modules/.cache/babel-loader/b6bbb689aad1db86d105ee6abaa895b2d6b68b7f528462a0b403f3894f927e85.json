{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError'\n});\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n    this[kErrorLabels] = new Set();\n  }\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    return this[kErrorLabels].has(label);\n  }\n  addErrorLabel(label) {\n    this[kErrorLabels].add(label);\n  }\n  get errorLabels() {\n    return Array.from(this[kErrorLabels]);\n  }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n  get name() {\n    return 'MongoServerError';\n  }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoDriverError';\n  }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoAPIError';\n  }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoRuntimeError';\n  }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'This batch has already been executed, create new batch to execute';\n    super(message);\n  }\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoDecompressionError';\n  }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoTransactionError';\n  }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cannot use a session that has ended';\n    super(message);\n  }\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoKerberosError';\n  }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoAWSError';\n  }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tailable cursor does not support this operation';\n    super(message);\n  }\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoUnexpectedServerResponseError';\n  }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cursor is already initialized';\n    super(message);\n  }\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Server is closed';\n    super(message);\n  }\n  get name() {\n    return 'MongoServerClosedError';\n  }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Topology is closed';\n    super(message);\n  }\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n  get name() {\n    return 'MongoNetworkError';\n  }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoParseError';\n  }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    var _a;\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n    if (reason) {\n      this.reason = reason;\n    }\n    this.code = (_a = reason.error) === null || _a === void 0 ? void 0 : _a.code;\n  }\n  get name() {\n    return 'MongoSystemError';\n  }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n    super(message);\n    this.errInfo = message.errInfo;\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([...RETRYABLE_READ_ERROR_CODES, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n  var _a, _b, _c;\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (error instanceof MongoError) {\n    if ((maxWireVersion >= 9 || error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError)) && !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n  }\n  if (error instanceof MongoError && typeof error.code === 'number') {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n  }\n  const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n  const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n  return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n  return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n  const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n  const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n  return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n  return exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) || exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message);\n}\nfunction isNotWritablePrimaryError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n  if (isRecoveringError(err)) {\n    return false;\n  }\n  return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n  }\n  if (typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n  return false;\n}\nexports.isResumableError = isResumableError;","map":{"version":3,"mappings":"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","names":["kErrorLabels","Symbol","exports","RegExp","Object","freeze","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotWritablePrimary","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotPrimaryNoSecondaryOk","NotPrimaryOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernFailed","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Set","RetryableWriteError","TransientTransactionError","UnknownTransactionCommitResult","ResumableChangeStreamError","HandshakeError","MongoError","Error","constructor","message","name","errmsg","hasErrorLabel","label","has","addErrorLabel","add","errorLabels","Array","from","MongoServerError","$err","MongoDriverError","MongoAPIError","MongoRuntimeError","MongoBatchReExecutionError","MongoDecompressionError","MongoNotConnectedError","MongoTransactionError","MongoExpiredSessionError","MongoKerberosError","MongoAWSError","MongoChangeStreamError","MongoTailableCursorError","MongoGridFSStreamError","MongoGridFSChunkError","MongoUnexpectedServerResponseError","MongoCursorInUseError","MongoServerClosedError","MongoCursorExhaustedError","MongoTopologyClosedError","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","options","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoInvalidArgumentError","MongoCompatibilityError","MongoMissingCredentialsError","MongoMissingDependencyError","MongoSystemError","reason","error","code","MongoServerSelectionError","makeWriteConcernResultObject","input","output","assign","ok","codeName","MongoWriteConcernError","result","isArray","errInfo","RETRYABLE_READ_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","needsRetryableWriteLabel","maxWireVersion","isNotWritablePrimaryError","test","isNodeIsRecoveringError","isRetryableWriteError","isRetryableReadError","hasRetryableErrorCode","SDAM_RECOVERING_CODES","SDAM_NOT_PRIMARY_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","match","isResumableError","wireVersion"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/error.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { TopologyVersion } from './sdam/server_description';\nimport type { TopologyDescription } from './sdam/topology_description';\n\n/** @public */\nexport type AnyError = MongoError | Error;\n\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp(\n  'not master or secondary',\n  'i'\n);\n\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n\n/** @internal MongoDB Error Codes */\nexport const MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n} as const);\n\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexport const GET_MORE_RESUMABLE_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.StaleShardVersion,\n  MONGODB_ERROR_CODES.StaleEpoch,\n  MONGODB_ERROR_CODES.StaleConfig,\n  MONGODB_ERROR_CODES.RetryChangeStream,\n  MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n  MONGODB_ERROR_CODES.CursorNotFound\n]);\n\n/** @public */\nexport const MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError'\n} as const);\n\n/** @public */\nexport type MongoErrorLabel = typeof MongoErrorLabel[keyof typeof MongoErrorLabel];\n\n/** @public */\nexport interface ErrorDescription extends Document {\n  message?: string;\n  errmsg?: string;\n  $err?: string;\n  errorLabels?: string[];\n  errInfo?: Document;\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nexport class MongoError extends Error {\n  /** @internal */\n  [kErrorLabels]: Set<string>;\n  /**\n   * This is a number in MongoServerError and a string in MongoDriverError\n   * @privateRemarks\n   * Define the type override on the subclasses when we can use the override keyword\n   */\n  code?: number | string;\n  topologyVersion?: TopologyVersion;\n\n  constructor(message: string | Error) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n    this[kErrorLabels] = new Set();\n  }\n\n  override get name(): string {\n    return 'MongoError';\n  }\n\n  /** Legacy name for server error responses */\n  get errmsg(): string {\n    return this.message;\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label: string): boolean {\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label: string): void {\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels(): string[] {\n    return Array.from(this[kErrorLabels]);\n  }\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport class MongoServerError extends MongoError {\n  codeName?: string;\n  writeConcernError?: Document;\n  errInfo?: Document;\n  ok?: number;\n  [key: string]: any;\n\n  constructor(message: ErrorDescription) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n        this[name] = message[name];\n    }\n  }\n\n  override get name(): string {\n    return 'MongoServerError';\n  }\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport class MongoDriverError extends MongoError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoDriverError';\n  }\n}\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nexport class MongoAPIError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAPIError';\n  }\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport class MongoRuntimeError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoRuntimeError';\n  }\n}\n\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport class MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoBatchReExecutionError';\n  }\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport class MongoDecompressionError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoDecompressionError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport class MongoNotConnectedError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoNotConnectedError';\n  }\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport class MongoTransactionError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTransactionError';\n  }\n}\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport class MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoExpiredSessionError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport class MongoKerberosError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoKerberosError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nexport class MongoAWSError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAWSError';\n  }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoChangeStreamError';\n  }\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport class MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTailableCursorError';\n  }\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSStreamError';\n  }\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSChunkError';\n  }\n}\n\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nexport class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoUnexpectedServerResponseError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport class MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCursorInUseError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport class MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoServerClosedError';\n  }\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport class MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message?: string) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  override get name(): string {\n    return 'MongoCursorExhaustedError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport class MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTopologyClosedError';\n  }\n}\n\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nexport function isNetworkErrorBeforeHandshake(err: MongoNetworkError): boolean {\n  return err[kBeforeHandshake] === true;\n}\n\n/** @public */\nexport interface MongoNetworkErrorOptions {\n  /** Indicates the timeout happened before a connection handshake completed */\n  beforeHandshake: boolean;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport class MongoNetworkError extends MongoError {\n  /** @internal */\n  [kBeforeHandshake]?: boolean;\n\n  constructor(message: string | Error, options?: MongoNetworkErrorOptions) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  override get name(): string {\n    return 'MongoNetworkError';\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nexport class MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport class MongoParseError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoParseError';\n  }\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoInvalidArgumentError';\n  }\n}\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport class MongoCompatibilityError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCompatibilityError';\n  }\n}\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoMissingCredentialsError';\n  }\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport class MongoMissingDependencyError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoMissingDependencyError';\n  }\n}\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport class MongoSystemError extends MongoError {\n  /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n  reason?: TopologyDescription;\n\n  constructor(message: string, reason: TopologyDescription) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = reason.error?.code;\n  }\n\n  override get name(): string {\n    return 'MongoSystemError';\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport class MongoServerSelectionError extends MongoSystemError {\n  constructor(message: string, reason: TopologyDescription) {\n    super(message, reason);\n  }\n\n  override get name(): string {\n    return 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input: any) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport class MongoWriteConcernError extends MongoServerError {\n  /** The result document (provided if ok: 1) */\n  result?: Document;\n\n  constructor(message: ErrorDescription, result?: Document) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  override get name(): string {\n    return 'MongoWriteConcernError';\n  }\n}\n\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set<number>([\n  ...RETRYABLE_READ_ERROR_CODES,\n  MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n\nexport function needsRetryableWriteLabel(error: Error, maxWireVersion: number): boolean {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (error instanceof MongoError) {\n    if (\n      (maxWireVersion >= 9 || error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) &&\n      !error.hasErrorLabel(MongoErrorLabel.HandshakeError)\n    ) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n  }\n\n  if (error instanceof MongoError && typeof error.code === 'number') {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isRetryableWriteError(error: MongoError): boolean {\n  return error.hasErrorLabel(MongoErrorLabel.RetryableWriteError);\n}\n\n/** Determines whether an error is something the driver should attempt to retry */\nexport function isRetryableReadError(error: MongoError): boolean {\n  const hasRetryableErrorCode =\n    typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nconst SDAM_RECOVERING_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\nconst SDAM_NOT_PRIMARY_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.ShutdownInProgress\n]);\n\nfunction isRecoveringError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return (\n    LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n    NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message)\n  );\n}\n\nfunction isNotWritablePrimaryError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\n\nexport function isNodeShuttingDownError(err: MongoError): boolean {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nexport function isSDAMUnrecoverableError(error: MongoError): boolean {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexport function isNetworkTimeoutError(err: MongoError): err is MongoNetworkError {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexport function isResumableError(error?: Error, wireVersion?: number): boolean {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(MongoErrorLabel.ResumableChangeStreamError);\n  }\n\n  if (typeof error.code === 'number') {\n    return GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}