{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoEncryptionLoggerLevel = exports.aws4 = exports.saslprep = exports.Snappy = exports.ZStandard = exports.Kerberos = exports.PKG_VERSION = void 0;\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nexports.PKG_VERSION = Symbol('kPkgVersion');\nfunction makeErrorModule(error) {\n  const props = error ? {\n    kModuleError: error\n  } : {};\n  return new Proxy(props, {\n    get: (_, key) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.Kerberos = require('kerberos');\n} catch {} // eslint-disable-line\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'));\ntry {\n  exports.ZStandard = require('@mongodb-js/zstd');\n} catch {} // eslint-disable-line\nexports.Snappy = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.Snappy = require('snappy');\n  try {\n    exports.Snappy[exports.PKG_VERSION] = (0, utils_1.parsePackageVersion)(require('snappy/package.json'));\n  } catch {} // eslint-disable-line\n} catch {} // eslint-disable-line\nexports.saslprep = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `saslprep` not found.' + ' Please install it to enable Stringprep Profile for User Names and Passwords'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.saslprep = require('saslprep');\n} catch {} // eslint-disable-line\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.aws4 = require('aws4');\n} catch {} // eslint-disable-line\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n});","map":{"version":3,"mappings":";;;;;;AAGA;AAEA;AAEaA,mBAAW,GAAGC,MAAM,CAAC,aAAa,CAAC;AAEhD,SAASC,eAAe,CAACC,KAAU;EACjC,MAAMC,KAAK,GAAGD,KAAK,GAAG;IAAEE,YAAY,EAAEF;EAAK,CAAE,GAAG,EAAE;EAClD,OAAO,IAAIG,KAAK,CAACF,KAAK,EAAE;IACtBG,GAAG,EAAE,CAACC,CAAM,EAAEC,GAAQ,KAAI;MACxB,IAAIA,GAAG,KAAK,cAAc,EAAE;QAC1B,OAAON,KAAK;;MAEd,MAAMA,KAAK;IACb,CAAC;IACDO,GAAG,EAAE,MAAK;MACR,MAAMP,KAAK;IACb;GACD,CAAC;AACJ;AAEWH,gBAAQ,GACjBE,eAAe,CACb,IAAIS,mCAA2B,CAC7B,2FAA2F,CAC5F,CACF;AAEH,IAAI;EACF;EACAX,gBAAQ,GAAGY,OAAO,CAAC,UAAU,CAAC;CAC/B,CAAC,MAAM,EAAE,CAAC;AAwBAZ,iBAAS,GAClBE,eAAe,CACb,IAAIS,mCAA2B,CAC7B,4FAA4F,CAC7F,CACF;AAEH,IAAI;EACFX,iBAAS,GAAGY,OAAO,CAAC,kBAAkB,CAAC;CACxC,CAAC,MAAM,EAAE,CAAC;AAgCAZ,cAAM,GAA8DE,eAAe,CAC5F,IAAIS,mCAA2B,CAC7B,oFAAoF,CACrF,CACF;AAED,IAAI;EACF;EACAX,cAAM,GAAGY,OAAO,CAAC,QAAQ,CAAC;EAC1B,IAAI;IACDZ,cAAc,CAACA,mBAAW,CAAC,GAAG,+BAAmB,EAACY,OAAO,CAAC,qBAAqB,CAAC,CAAC;GACnF,CAAC,MAAM,EAAE,CAAC;CACZ,CAAC,MAAM,EAAE,CAAC;AAEAZ,gBAAQ,GACjBE,eAAe,CACb,IAAIS,mCAA2B,CAC7B,uCAAuC,GACrC,8EAA8E,CACjF,CACF;AAEH,IAAI;EACF;EACAX,gBAAQ,GAAGY,OAAO,CAAC,UAAU,CAAC;CAC/B,CAAC,MAAM,EAAE,CAAC;AA2CAZ,YAAI,GAAyDE,eAAe,CACrF,IAAIS,mCAA2B,CAC7B,kFAAkF,CACnF,CACF;AAED,IAAI;EACF;EACAX,YAAI,GAAGY,OAAO,CAAC,MAAM,CAAC;CACvB,CAAC,MAAM,EAAE,CAAC;AAEX;AACaZ,iCAAyB,GAAGa,MAAM,CAACC,MAAM,CAAC;EACrDC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE;CACC,CAAC","names":["exports","Symbol","makeErrorModule","error","props","kModuleError","Proxy","get","_","key","set","error_1","require","Object","freeze","FatalError","Error","Warning","Info","Trace"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/deps.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport type { deserialize, Document, serialize } from './bson';\nimport type { ProxyOptions } from './cmap/connection';\nimport { MongoMissingDependencyError } from './error';\nimport type { MongoClient } from './mongo_client';\nimport { Callback, parsePackageVersion } from './utils';\n\nexport const PKG_VERSION = Symbol('kPkgVersion');\n\nfunction makeErrorModule(error: any) {\n  const props = error ? { kModuleError: error } : {};\n  return new Proxy(props, {\n    get: (_: any, key: any) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\n\nexport let Kerberos: typeof import('kerberos') | { kModuleError: MongoMissingDependencyError } =\n  makeErrorModule(\n    new MongoMissingDependencyError(\n      'Optional module `kerberos` not found. Please install it to enable kerberos authentication'\n    )\n  );\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  Kerberos = require('kerberos');\n} catch {} // eslint-disable-line\n\nexport interface KerberosClient {\n  step(challenge: string): Promise<string>;\n  step(challenge: string, callback: Callback<string>): void;\n  wrap(challenge: string, options: { user: string }): Promise<string>;\n  wrap(challenge: string, options: { user: string }, callback: Callback<string>): void;\n  unwrap(challenge: string): Promise<string>;\n  unwrap(challenge: string, callback: Callback<string>): void;\n}\n\ntype ZStandardLib = {\n  /**\n   * Compress using zstd.\n   * @param buf - Buffer to be compressed.\n   */\n  compress(buf: Buffer, level?: number): Promise<Buffer>;\n\n  /**\n   * Decompress using zstd.\n   */\n  decompress(buf: Buffer): Promise<Buffer>;\n};\n\nexport let ZStandard: ZStandardLib | { kModuleError: MongoMissingDependencyError } =\n  makeErrorModule(\n    new MongoMissingDependencyError(\n      'Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'\n    )\n  );\n\ntry {\n  ZStandard = require('@mongodb-js/zstd');\n} catch {} // eslint-disable-line\n\ntype SnappyLib = {\n  [PKG_VERSION]: { major: number; minor: number; patch: number };\n\n  /**\n   * - Snappy 6.x takes a callback and returns void\n   * - Snappy 7.x returns a promise\n   *\n   * In order to support both we must check the return value of the function\n   * @param buf - Buffer to be compressed\n   * @param callback - ONLY USED IN SNAPPY 6.x\n   */\n  compress(buf: Buffer): Promise<Buffer>;\n  compress(buf: Buffer, callback: (error?: Error, buffer?: Buffer) => void): void;\n\n  /**\n   * - Snappy 6.x takes a callback and returns void\n   * - Snappy 7.x returns a promise\n   *\n   * In order to support both we must check the return value of the function\n   * @param buf - Buffer to be compressed\n   * @param callback - ONLY USED IN SNAPPY 6.x\n   */\n  uncompress(buf: Buffer, opt: { asBuffer: true }): Promise<Buffer>;\n  uncompress(\n    buf: Buffer,\n    opt: { asBuffer: true },\n    callback: (error?: Error, buffer?: Buffer) => void\n  ): void;\n};\n\nexport let Snappy: SnappyLib | { kModuleError: MongoMissingDependencyError } = makeErrorModule(\n  new MongoMissingDependencyError(\n    'Optional module `snappy` not found. Please install it to enable snappy compression'\n  )\n);\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  Snappy = require('snappy');\n  try {\n    (Snappy as any)[PKG_VERSION] = parsePackageVersion(require('snappy/package.json'));\n  } catch {} // eslint-disable-line\n} catch {} // eslint-disable-line\n\nexport let saslprep: typeof import('saslprep') | { kModuleError: MongoMissingDependencyError } =\n  makeErrorModule(\n    new MongoMissingDependencyError(\n      'Optional module `saslprep` not found.' +\n        ' Please install it to enable Stringprep Profile for User Names and Passwords'\n    )\n  );\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  saslprep = require('saslprep');\n} catch {} // eslint-disable-line\n\ninterface AWS4 {\n  /**\n   * Created these inline types to better assert future usage of this API\n   * @param options - options for request\n   * @param credentials - AWS credential details, sessionToken should be omitted entirely if its false-y\n   */\n  sign(\n    this: void,\n    options: {\n      path: '/';\n      body: string;\n      host: string;\n      method: 'POST';\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded';\n        'Content-Length': number;\n        'X-MongoDB-Server-Nonce': string;\n        'X-MongoDB-GS2-CB-Flag': 'n';\n      };\n      service: string;\n      region: string;\n    },\n    credentials:\n      | {\n          accessKeyId: string;\n          secretAccessKey: string;\n          sessionToken: string;\n        }\n      | {\n          accessKeyId: string;\n          secretAccessKey: string;\n        }\n      | undefined\n  ): {\n    headers: {\n      Authorization: string;\n      'X-Amz-Date': string;\n    };\n  };\n}\n\nexport let aws4: AWS4 | { kModuleError: MongoMissingDependencyError } = makeErrorModule(\n  new MongoMissingDependencyError(\n    'Optional module `aws4` not found. Please install it to enable AWS authentication'\n  )\n);\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  aws4 = require('aws4');\n} catch {} // eslint-disable-line\n\n/** @public */\nexport const AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n} as const);\n\n/** @public */\nexport type AutoEncryptionLoggerLevel =\n  typeof AutoEncryptionLoggerLevel[keyof typeof AutoEncryptionLoggerLevel];\n\n/** @public */\nexport interface AutoEncryptionTlsOptions {\n  /**\n   * Specifies the location of a local .pem file that contains\n   * either the client's TLS/SSL certificate and key or only the\n   * client's TLS/SSL key when tlsCertificateFile is used to\n   * provide the certificate.\n   */\n  tlsCertificateKeyFile?: string;\n  /**\n   * Specifies the password to de-crypt the tlsCertificateKeyFile.\n   */\n  tlsCertificateKeyFilePassword?: string;\n  /**\n   * Specifies the location of a local .pem file that contains the\n   * root certificate chain from the Certificate Authority.\n   * This file is used to validate the certificate presented by the\n   * KMS provider.\n   */\n  tlsCAFile?: string;\n}\n\n/** @public */\nexport interface AutoEncryptionOptions {\n  /** @internal */\n  bson?: { serialize: typeof serialize; deserialize: typeof deserialize };\n  /** @internal client for metadata lookups */\n  metadataClient?: MongoClient;\n  /** A `MongoClient` used to fetch keys from a key vault */\n  keyVaultClient?: MongoClient;\n  /** The namespace where keys are stored in the key vault */\n  keyVaultNamespace?: string;\n  /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */\n  kmsProviders?: {\n    /** Configuration options for using 'aws' as your KMS provider */\n    aws?: {\n      /** The access key used for the AWS KMS provider */\n      accessKeyId: string;\n      /** The secret access key used for the AWS KMS provider */\n      secretAccessKey: string;\n      /**\n       * An optional AWS session token that will be used as the\n       * X-Amz-Security-Token header for AWS requests.\n       */\n      sessionToken?: string;\n    };\n    /** Configuration options for using 'local' as your KMS provider */\n    local?: {\n      /**\n       * The master key used to encrypt/decrypt data keys.\n       * A 96-byte long Buffer or base64 encoded string.\n       */\n      key: Buffer | string;\n    };\n    /** Configuration options for using 'azure' as your KMS provider */\n    azure?: {\n      /** The tenant ID identifies the organization for the account */\n      tenantId: string;\n      /** The client ID to authenticate a registered application */\n      clientId: string;\n      /** The client secret to authenticate a registered application */\n      clientSecret: string;\n      /**\n       * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n       * This is optional, and only needed if customer is using a non-commercial Azure instance\n       * (e.g. a government or China account, which use different URLs).\n       * Defaults to \"login.microsoftonline.com\"\n       */\n      identityPlatformEndpoint?: string | undefined;\n    };\n    /** Configuration options for using 'gcp' as your KMS provider */\n    gcp?: {\n      /** The service account email to authenticate */\n      email: string;\n      /** A PKCS#8 encrypted key. This can either be a base64 string or a binary representation */\n      privateKey: string | Buffer;\n      /**\n       * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n       * Defaults to \"oauth2.googleapis.com\"\n       */\n      endpoint?: string | undefined;\n    };\n    /**\n     * Configuration options for using 'kmip' as your KMS provider\n     */\n    kmip?: {\n      /**\n       * The output endpoint string.\n       * The endpoint consists of a hostname and port separated by a colon.\n       * E.g. \"example.com:123\". A port is always present.\n       */\n      endpoint?: string;\n    };\n  };\n  /**\n   * A map of namespaces to a local JSON schema for encryption\n   *\n   * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.\n   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.\n   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for client side encryption.\n   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n   */\n  schemaMap?: Document;\n  /** @experimental Public Technical Preview: Supply a schema for the encrypted fields in the document  */\n  encryptedFieldsMap?: Document;\n  /** Allows the user to bypass auto encryption, maintaining implicit decryption */\n  bypassAutoEncryption?: boolean;\n  /** @experimental Public Technical Preview: Allows users to bypass query analysis */\n  bypassQueryAnalysis?: boolean;\n  options?: {\n    /** An optional hook to catch logging messages from the underlying encryption engine */\n    logger?: (level: AutoEncryptionLoggerLevel, message: string) => void;\n  };\n  extraOptions?: {\n    /**\n     * A local process the driver communicates with to determine how to encrypt values in a command.\n     * Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\n     */\n    mongocryptdURI?: string;\n    /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */\n    mongocryptdBypassSpawn?: boolean;\n    /** The path to the mongocryptd executable on the system */\n    mongocryptdSpawnPath?: string;\n    /** Command line arguments to use when auto-spawning a mongocryptd */\n    mongocryptdSpawnArgs?: string[];\n    /**\n     * Full path to a MongoDB Crypt shared library to be used (instead of mongocryptd).\n     *\n     * This needs to be the path to the file itself, not a directory.\n     * It can be an absolute or relative path. If the path is relative and\n     * its first component is `$ORIGIN`, it will be replaced by the directory\n     * containing the mongodb-client-encryption native addon file. Otherwise,\n     * the path will be interpreted relative to the current working directory.\n     *\n     * Currently, loading different MongoDB Crypt shared library files from different\n     * MongoClients in the same process is not supported.\n     *\n     * If this option is provided and no MongoDB Crypt shared library could be loaded\n     * from the specified location, creating the MongoClient will fail.\n     *\n     * If this option is not provided and `cryptSharedLibRequired` is not specified,\n     * the AutoEncrypter will attempt to spawn and/or use mongocryptd according\n     * to the mongocryptd-specific `extraOptions` options.\n     *\n     * Specifying a path prevents mongocryptd from being used as a fallback.\n     *\n     * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n     */\n    cryptSharedLibPath?: string;\n    /**\n     * If specified, never use mongocryptd and instead fail when the MongoDB Crypt\n     * shared library could not be loaded.\n     *\n     * This is always true when `cryptSharedLibPath` is specified.\n     *\n     * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n     */\n    cryptSharedLibRequired?: boolean;\n    /**\n     * Search paths for a MongoDB Crypt shared library to be used (instead of mongocryptd)\n     * Only for driver testing!\n     * @internal\n     */\n    cryptSharedLibSearchPaths?: string[];\n  };\n  proxyOptions?: ProxyOptions;\n  /** The TLS options to use connecting to the KMS provider */\n  tlsOptions?: {\n    aws?: AutoEncryptionTlsOptions;\n    local?: AutoEncryptionTlsOptions;\n    azure?: AutoEncryptionTlsOptions;\n    gcp?: AutoEncryptionTlsOptions;\n    kmip?: AutoEncryptionTlsOptions;\n  };\n}\n\n/** @public */\nexport interface AutoEncrypter {\n  // eslint-disable-next-line @typescript-eslint/no-misused-new\n  new (client: MongoClient, options: AutoEncryptionOptions): AutoEncrypter;\n  init(cb: Callback): void;\n  teardown(force: boolean, callback: Callback): void;\n  encrypt(ns: string, cmd: Document, options: any, callback: Callback<Document>): void;\n  decrypt(cmd: Document, options: any, callback: Callback<Document>): void;\n  /** @experimental */\n  readonly cryptSharedLibVersionInfo: { version: bigint; versionStr: string } | null;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}