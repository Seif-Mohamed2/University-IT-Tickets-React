{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst ticketsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.completed === b.completed ? 0 : a.completed ? 1 : -1\n});\nconst initialState = ticketsAdapter.getInitialState();\nexport const ticketsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getTickets: builder.query({\n      query: () => ({\n        url: \"/tickets\",\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      transformResponse: responseData => {\n        const loadedTickets = responseData.map(ticket => {\n          ticket.id = ticket._id;\n          return ticket;\n        });\n        return ticketsAdapter.setAll(initialState, loadedTickets);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Ticket',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Ticket',\n            id\n          }))];\n        } else return [{\n          type: 'Ticket',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewTicket: builder.mutation({\n      query: initialTicketData => ({\n        url: \"/tickets\",\n        method: \"POST\",\n        body: {\n          ...initialTicketData\n        }\n      }),\n      invalidateTags: [{\n        type: \"Ticket\",\n        id: \"LIST\"\n      }]\n    }),\n    updateTicket: builder.mutation({\n      query: initialTicketData => ({\n        url: \"/tickets\",\n        method: \"PATCH\",\n        body: {\n          ...initialTicketData\n        }\n      }),\n      invalidateTags: (result, error, arg) => [{\n        type: \"Ticket\",\n        id: arg.id\n      }]\n    }),\n    deleteTicket: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: \"/tickets\",\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      invalidateTags: (result, error, arg) => [{\n        type: \"Ticket\",\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetTicketsQuery,\n  useAddNewTicketMutation,\n  useUpdateTicketMutation,\n  useDeleteTicketMutation\n} = ticketsApiSlice;\n\n// returns the query result object\nexport const selectTicketsResult = ticketsApiSlice.endpoints.getTickets.select();\n\n// creates memoized selector\nconst selectTicketsData = createSelector(selectTicketsResult, ticketsResult => ticketsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllTickets,\n  selectById: selectTicketById,\n  selectIds: selectTicketIds\n  // Pass in a selector that returns the tickets slice of state\n} = ticketsAdapter.getSelectors(state => {\n  var _selectTicketsData;\n  return (_selectTicketsData = selectTicketsData(state)) !== null && _selectTicketsData !== void 0 ? _selectTicketsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","ticketsAdapter","sortComparer","a","b","completed","initialState","getInitialState","ticketsApiSlice","injectEndpoints","endpoints","builder","getTickets","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedTickets","map","ticket","id","_id","setAll","providesTags","error","arg","ids","type","addNewTicket","mutation","initialTicketData","method","body","invalidateTags","updateTicket","deleteTicket","useGetTicketsQuery","useAddNewTicketMutation","useUpdateTicketMutation","useDeleteTicketMutation","selectTicketsResult","select","selectTicketsData","ticketsResult","data","selectAll","selectAllTickets","selectById","selectTicketById","selectIds","selectTicketIds","getSelectors","state"],"sources":["H:/webdev/University-IT-Tickets-/front-end/my-app/src/features/tickets/ticketsApiSlice.js"],"sourcesContent":["import {\r\n    createSelector,\r\n    createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../app/api/apiSlice\"\r\n\r\nconst ticketsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => (a.completed === b.completed) ? 0 : a.completed ? 1 : -1\r\n})\r\n\r\nconst initialState = ticketsAdapter.getInitialState()\r\n\r\nexport const ticketsApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getTickets: builder.query({\r\n            query: () => ({\r\n                url: \"/tickets\",\r\n                validateStatus: (response, result) => {\r\n                    return response.status === 200 && !result.isError\r\n                }\r\n            }),\r\n            transformResponse: responseData => {\r\n                const loadedTickets = responseData.map(ticket => {\r\n                    ticket.id = ticket._id\r\n                    return ticket\r\n                });\r\n                return ticketsAdapter.setAll(initialState, loadedTickets)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'Ticket', id: 'LIST' },\r\n                        ...result.ids.map(id => ({ type: 'Ticket', id }))\r\n                    ]\r\n                } else return [{ type: 'Ticket', id: 'LIST' }]\r\n            }\r\n        }),\r\n        addNewTicket: builder.mutation({\r\n            query: initialTicketData => ({\r\n                url: \"/tickets\",\r\n                method: \"POST\",\r\n                body: {\r\n                    ...initialTicketData,\r\n                }\r\n            }),\r\n            invalidateTags: [\r\n                {type: \"Ticket\", id: \"LIST\"}\r\n            ]\r\n        }),\r\n        updateTicket: builder.mutation({\r\n            query: initialTicketData => ({\r\n                url: \"/tickets\",\r\n                method: \"PATCH\",\r\n                body: {\r\n                    ...initialTicketData,\r\n                }\r\n            }),\r\n            invalidateTags: (result, error, arg) => [\r\n                {type: \"Ticket\", id: arg.id}\r\n            ]\r\n        }),\r\n        deleteTicket: builder.mutation({\r\n            query: ({id}) => ({\r\n                url: \"/tickets\",\r\n                method: \"DELETE\",\r\n                body: {id}\r\n            }),\r\n            invalidateTags: (result, error, arg) => [\r\n                {type: \"Ticket\", id: arg.id}\r\n            ]\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useGetTicketsQuery,\r\n    useAddNewTicketMutation,\r\n    useUpdateTicketMutation,\r\n    useDeleteTicketMutation,\r\n} = ticketsApiSlice\r\n\r\n// returns the query result object\r\nexport const selectTicketsResult = ticketsApiSlice.endpoints.getTickets.select()\r\n\r\n// creates memoized selector\r\nconst selectTicketsData = createSelector(\r\n    selectTicketsResult,\r\n    ticketsResult => ticketsResult.data // normalized state object with ids & entities\r\n)\r\n\r\n//getSelectors creates these selectors and we rename them with aliases using destructuring\r\nexport const {\r\n    selectAll: selectAllTickets,\r\n    selectById: selectTicketById,\r\n    selectIds: selectTicketIds\r\n    // Pass in a selector that returns the tickets slice of state\r\n} = ticketsAdapter.getSelectors(state => selectTicketsData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}