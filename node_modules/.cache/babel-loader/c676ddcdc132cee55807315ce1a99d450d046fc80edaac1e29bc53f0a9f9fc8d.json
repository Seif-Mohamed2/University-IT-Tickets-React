{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_concern_1 = require(\"../read_concern\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n  constructor(collection, ns) {\n    let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(collection, options);\n    this.options = options;\n    this.ns = ns;\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    }\n    // If the filter is a buffer, validate that is a valid BSON document\n    if (Buffer.isBuffer(filter)) {\n      const objectSize = filter[0] | filter[1] << 8 | filter[2] << 16 | filter[3] << 24;\n      if (objectSize !== filter.length) {\n        throw new error_1.MongoInvalidArgumentError(`Query filter raw message size does not match message header size [${filter.length}] != [${objectSize}]`);\n      }\n    }\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectID' ? {\n      _id: filter\n    } : filter;\n  }\n  execute(server, session, callback) {\n    this.server = server;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const options = this.options;\n    if (options.allowDiskUse != null && serverWireVersion < 4) {\n      callback(new error_1.MongoCompatibilityError('Option \"allowDiskUse\" is not supported on MongoDB < 3.2'));\n      return;\n    }\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n    }\n    server.command(this.ns, findCommand, {\n      ...this.options,\n      ...this.bsonOptions,\n      documentsReturnedIn: 'firstBatch',\n      session\n    }, callback);\n  }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n  const findCommand = {\n    find: ns.collection,\n    filter\n  };\n  if (options.sort) {\n    findCommand.sort = (0, sort_1.formatSort)(options.sort);\n  }\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length ? projection.reduce((result, field) => {\n        result[field] = 1;\n        return result;\n      }, {}) : {\n        _id: 1\n      };\n    }\n    findCommand.projection = projection;\n  }\n  if (options.hint) {\n    findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n  }\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n        findCommand.limit = -options.batchSize;\n      }\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n  // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n  const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n  if (typeof options.oplogReplay === 'boolean') {\n    findCommand.oplogReplay = options.oplogReplay;\n  }\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n  return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":"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","names":["SUPPORTS_WRITE_CONCERN_AND_COLLATION","FindOperation","command_1","constructor","collection","ns","filter","options","Array","isArray","error_1","Buffer","isBuffer","objectSize","length","_bsontype","_id","execute","server","session","callback","serverWireVersion","allowDiskUse","collation","name","findCommand","makeFindCommand","explain","command","bsonOptions","documentsReturnedIn","exports","find","sort","projection","reduce","result","field","hint","skip","limit","singleBatch","batchSize","Math","abs","comment","undefined","maxTimeMS","readConcern","read_concern_1","fromOptions","toJSON","max","min","returnKey","showRecordId","tailable","oplogReplay","timeout","noCursorTimeout","awaitData","allowPartialResults","let","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/find.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { ReadConcern } from '../read_concern';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort } from '../sort';\nimport {\n  Callback,\n  decorateWithExplain,\n  maxWireVersion,\n  MongoDBNamespace,\n  normalizeHintField\n} from '../utils';\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, Hint } from './operation';\n\n/**\n * @public\n * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface FindOptions<TSchema extends Document = Document> extends CommandOperationOptions {\n  /** Sets the limit of documents returned in the query. */\n  limit?: number;\n  /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\n  sort?: Sort;\n  /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\n  projection?: Document;\n  /** Set to skip N documents ahead in your query (useful for pagination). */\n  skip?: number;\n  /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\n  hint?: Hint;\n  /** Specify if the cursor can timeout. */\n  timeout?: boolean;\n  /** Specify if the cursor is tailable. */\n  tailable?: boolean;\n  /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */\n  awaitData?: boolean;\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /** If true, returns only the index keys in the resulting documents. */\n  returnKey?: boolean;\n  /** The inclusive lower bound for a specific index */\n  min?: Document;\n  /** The exclusive upper bound for a specific index */\n  max?: Document;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\n  maxAwaitTimeMS?: number;\n  /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\n  noCursorTimeout?: boolean;\n  /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\n  collation?: CollationOptions;\n  /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\n  allowDiskUse?: boolean;\n  /** Determines whether to close the cursor after the first batch. Defaults to false. */\n  singleBatch?: boolean;\n  /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\n  allowPartialResults?: boolean;\n  /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\n  showRecordId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Option to enable an optimized code path for queries looking for a particular range of `ts` values in the oplog. Requires `tailable` to be true.\n   * @deprecated Starting from MongoDB 4.4 this flag is not needed and will be ignored.\n   */\n  oplogReplay?: boolean;\n}\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\n/** @internal */\nexport class FindOperation extends CommandOperation<Document> {\n  override options: FindOptions;\n  filter: Document;\n\n  constructor(\n    collection: Collection | undefined,\n    ns: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(collection, options);\n\n    this.options = options;\n    this.ns = ns;\n\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    }\n\n    // If the filter is a buffer, validate that is a valid BSON document\n    if (Buffer.isBuffer(filter)) {\n      const objectSize = filter[0] | (filter[1] << 8) | (filter[2] << 16) | (filter[3] << 24);\n      if (objectSize !== filter.length) {\n        throw new MongoInvalidArgumentError(\n          `Query filter raw message size does not match message header size [${filter.length}] != [${objectSize}]`\n        );\n      }\n    }\n\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectID' ? { _id: filter } : filter;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    this.server = server;\n\n    const serverWireVersion = maxWireVersion(server);\n    const options = this.options;\n    if (options.allowDiskUse != null && serverWireVersion < 4) {\n      callback(\n        new MongoCompatibilityError('Option \"allowDiskUse\" is not supported on MongoDB < 3.2')\n      );\n      return;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoCompatibilityError(\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n\n      return;\n    }\n\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = decorateWithExplain(findCommand, this.explain);\n    }\n\n    server.command(\n      this.ns,\n      findCommand,\n      {\n        ...this.options,\n        ...this.bsonOptions,\n        documentsReturnedIn: 'firstBatch',\n        session\n      },\n      callback\n    );\n  }\n}\n\nfunction makeFindCommand(ns: MongoDBNamespace, filter: Document, options: FindOptions): Document {\n  const findCommand: Document = {\n    find: ns.collection,\n    filter\n  };\n\n  if (options.sort) {\n    findCommand.sort = formatSort(options.sort);\n  }\n\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length\n        ? projection.reduce((result, field) => {\n            result[field] = 1;\n            return result;\n          }, {})\n        : { _id: 1 };\n    }\n\n    findCommand.projection = projection;\n  }\n\n  if (options.hint) {\n    findCommand.hint = normalizeHintField(options.hint);\n  }\n\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (\n        options.limit &&\n        options.limit !== 0 &&\n        Math.abs(options.batchSize) < Math.abs(options.limit)\n      ) {\n        findCommand.limit = -options.batchSize;\n      }\n\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n\n  // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n\n  const readConcern = ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n\n  if (typeof options.oplogReplay === 'boolean') {\n    findCommand.oplogReplay = options.oplogReplay;\n  }\n\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n\n  return findCommand;\n}\n\ndefineAspects(FindOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}