{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { setCredentials } from '../../features/auth/authSlice';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3500',\n  credentials: 'include',\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result, _result$error;\n  // console.log(args) // request url, method, body\n  // console.log(api) // signal, dispatch, getState()\n  // console.log(extraOptions) //custom like {shout: true}\n\n  let result = await baseQuery(args, api, extraOptions);\n\n  // If you want, handle other status codes, too\n  if (((_result = result) === null || _result === void 0 ? void 0 : (_result$error = _result.error) === null || _result$error === void 0 ? void 0 : _result$error.status) === 403) {\n    console.log('sending refresh token');\n\n    // send refresh token to get new access token \n    const refreshResult = await baseQuery('/auth/refresh', api, extraOptions);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n      // store the new token \n      api.dispatch(setCredentials({\n        ...refreshResult.data\n      }));\n\n      // retry original query with new access token\n      result = await baseQuery(args, api, extraOptions);\n    } else {\n      var _refreshResult$error;\n      if ((refreshResult === null || refreshResult === void 0 ? void 0 : (_refreshResult$error = refreshResult.error) === null || _refreshResult$error === void 0 ? void 0 : _refreshResult$error.status) === 403) {\n        refreshResult.error.data.message = \"Your login has expired. \";\n      }\n      return refreshResult;\n    }\n  }\n  return result;\n};\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  tagTypes: ['Ticket', 'User', 'Student'],\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","baseQuery","baseUrl","credentials","prepareHeaders","headers","getState","token","auth","set","baseQueryWithReauth","args","api","extraOptions","result","error","status","console","log","refreshResult","data","dispatch","message","apiSlice","tagTypes","endpoints","builder"],"sources":["/Users/seifmohamed/Documents/webdev/TechNotes/front-end/my-app/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { setCredentials } from '../../features/auth/authSlice'\n\nconst baseQuery = fetchBaseQuery({\n    baseUrl: 'http://localhost:3500',\n    credentials: 'include',\n    prepareHeaders: (headers, { getState }) => {\n        const token = getState().auth.token\n        if (token) {\n            headers.set(\"authorization\", `Bearer ${token}`)\n        }\n        return headers\n    }\n})\n\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n    // console.log(args) // request url, method, body\n    // console.log(api) // signal, dispatch, getState()\n    // console.log(extraOptions) //custom like {shout: true}\n\n    let result = await baseQuery(args, api, extraOptions)\n\n    // If you want, handle other status codes, too\n    if (result?.error?.status === 403) {\n        console.log('sending refresh token')\n\n        // send refresh token to get new access token \n        const refreshResult = await baseQuery('/auth/refresh', api, extraOptions)\n\n        if (refreshResult?.data) {\n\n            // store the new token \n            api.dispatch(setCredentials({ ...refreshResult.data }))\n\n            // retry original query with new access token\n            result = await baseQuery(args, api, extraOptions)\n        } else {\n\n            if (refreshResult?.error?.status === 403) {\n                refreshResult.error.data.message = \"Your login has expired. \"\n            }\n            return refreshResult\n        }\n    }\n\n    return result\n}\n\nexport const apiSlice = createApi({\n    baseQuery: baseQueryWithReauth,\n    tagTypes: ['Ticket', 'User', 'Student'],\n    endpoints: builder => ({})\n})"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,cAAc,QAAQ,+BAA+B;AAE9D,MAAMC,SAAS,GAAGF,cAAc,CAAC;EAC7BG,OAAO,EAAE,uBAAuB;EAChCC,WAAW,EAAE,SAAS;EACtBC,cAAc,EAAE,CAACC,OAAO,WAAmB;IAAA,IAAjB;MAAEC;IAAS,CAAC;IAClC,MAAMC,KAAK,GAAGD,QAAQ,EAAE,CAACE,IAAI,CAACD,KAAK;IACnC,IAAIA,KAAK,EAAE;MACPF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACnD;IACA,OAAOF,OAAO;EAClB;AACJ,CAAC,CAAC;AAEF,MAAMK,mBAAmB,GAAG,OAAOC,IAAI,EAAEC,GAAG,EAAEC,YAAY,KAAK;EAAA;EAC3D;EACA;EACA;;EAEA,IAAIC,MAAM,GAAG,MAAMb,SAAS,CAACU,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;;EAErD;EACA,IAAI,YAAAC,MAAM,6DAAN,QAAQC,KAAK,kDAAb,cAAeC,MAAM,MAAK,GAAG,EAAE;IAC/BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;IAEpC;IACA,MAAMC,aAAa,GAAG,MAAMlB,SAAS,CAAC,eAAe,EAAEW,GAAG,EAAEC,YAAY,CAAC;IAEzE,IAAIM,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,IAAI,EAAE;MAErB;MACAR,GAAG,CAACS,QAAQ,CAACrB,cAAc,CAAC;QAAE,GAAGmB,aAAa,CAACC;MAAK,CAAC,CAAC,CAAC;;MAEvD;MACAN,MAAM,GAAG,MAAMb,SAAS,CAACU,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;IACrD,CAAC,MAAM;MAAA;MAEH,IAAI,CAAAM,aAAa,aAAbA,aAAa,+CAAbA,aAAa,CAAEJ,KAAK,yDAApB,qBAAsBC,MAAM,MAAK,GAAG,EAAE;QACtCG,aAAa,CAACJ,KAAK,CAACK,IAAI,CAACE,OAAO,GAAG,0BAA0B;MACjE;MACA,OAAOH,aAAa;IACxB;EACJ;EAEA,OAAOL,MAAM;AACjB,CAAC;AAED,OAAO,MAAMS,QAAQ,GAAGzB,SAAS,CAAC;EAC9BG,SAAS,EAAES,mBAAmB;EAC9Bc,QAAQ,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC;EACvCC,SAAS,EAAEC,OAAO,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}