{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTTPinger = exports.Monitor = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst connection_1 = require(\"../cmap/connection\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    var _a, _b, _c;\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: (_a = options.connectTimeoutMS) !== null && _a !== void 0 ? _a : 10000,\n      heartbeatFrequencyMS: (_b = options.heartbeatFrequencyMS) !== null && _b !== void 0 ? _b : 10000,\n      minHeartbeatFrequencyMS: (_c = options.minHeartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 500\n    });\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.s.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options,\n    // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    });\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n  get connection() {\n    return this[kConnection];\n  }\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n  requestCheck() {\n    var _a;\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n    (_a = this[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n  }\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // close monitor\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  var _a, _b, _c;\n  (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.stop();\n  monitor[kMonitorId] = undefined;\n  (_b = monitor[kRTTPinger]) === null || _b === void 0 ? void 0 : _b.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  (_c = monitor[kConnection]) === null || _c === void 0 ? void 0 : _c.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n  let start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n  function failureHandler(err) {\n    var _a;\n    (_a = monitor[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n    const cmd = {\n      [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: true,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n      var _a;\n      if (err) {\n        return failureHandler(err);\n      }\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      const rttPinger = monitor[kRTTPinger];\n      const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello));\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        (_a = monitor[kRTTPinger]) === null || _a === void 0 ? void 0 : _a.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  }\n  // connecting does an implicit `hello`\n  (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof error_1.MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n      failureHandler(err);\n      return;\n    }\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\nfunction monitorServer(monitor) {\n  return callback => {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        (0, timers_1.setTimeout)(() => {\n          var _a;\n          if (!isInCloseState(monitor)) {\n            (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n  close() {\n    var _a;\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    (_a = this[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    this[kConnection] = undefined;\n  }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn === null || conn === void 0 ? void 0 : conn.destroy({\n        force: true\n      });\n      return;\n    }\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    (0, connect_1.connect)(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n  connection.command((0, utils_1.ns)('admin.$cmd'), {\n    [constants_1.LEGACY_HELLO_COMMAND]: 1\n  }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n    measureAndReschedule();\n  });\n}","map":{"version":3,"mappings":"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","names":["kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","common_1","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","Monitor","mongo_types_1","constructor","server","options","undefined","setMaxListeners","Infinity","address","description","Object","freeze","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","connection_1","hostAddress","raw","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connection","connect","monitorServer","interval","minInterval","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","exports","stop","destroy","force","checkServer","callback","start","server_1","SERVER_HEARTBEAT_STARTED","events_1","failureHandler","err","SERVER_HEARTBEAT_FAILED","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","version","constants_1","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","hello","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","conn","error_1","isMonitoringConnection","done","type","Unknown","tv","processId","counter","bson_1","isLong","fromNumber","measureRoundTripTime","measureAndReschedule"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/sdam/monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, ConnectionOptions } from '../cmap/connection';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoNetworkError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback, InterruptibleAsyncInterval } from '../utils';\nimport {\n  calculateDurationInMs,\n  EventEmitterWithState,\n  makeInterruptibleAsyncInterval,\n  makeStateMachine,\n  now,\n  ns\n} from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: Error): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<MonitorOptions, 'connectTimeoutMS' | 'heartbeatFrequencyMS' | 'minHeartbeatFrequencyMS'>\n  >;\n  connectOptions: ConnectionOptions;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: InterruptibleAsyncInterval;\n  [kRTTPinger]?: RTTPinger;\n\n  get connection(): Connection | undefined {\n    return this[kConnection];\n  }\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.s.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  monitor.emit(Server.SERVER_HEARTBEAT_STARTED, new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err: Error) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err)\n    );\n\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: true,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address)\n        );\n        start = now();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, calculateDurationInMs(start), conn.hello)\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  /** @internal */\n  [kConnection]?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this[kConnection]?.destroy({ force: true });\n    this[kConnection] = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  connection.command(ns('admin.$cmd'), { [LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}