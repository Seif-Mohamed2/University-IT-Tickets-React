{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst notesAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.completed === b.completed ? 0 : a.completed ? 1 : -1\n});\nconst initialState = notesAdapter.getInitialState();\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getNotes: builder.query({\n      query: () => '/notes',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedNotes = responseData.map(note => {\n          note.id = note._id;\n          return note;\n        });\n        return notesAdapter.setAll(initialState, loadedNotes);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Note',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Note',\n            id\n          }))];\n        } else return [{\n          type: 'Note',\n          id: 'LIST'\n        }];\n      }\n    })\n  })\n});\nexport const {\n  useGetNotesQuery\n} = notesApiSlice;\n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select();\n\n// creates memoized selector\nconst selectNotesData = createSelector(selectNotesResult, notesResult => notesResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds\n  // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => {\n  var _selectNotesData;\n  return (_selectNotesData = selectNotesData(state)) !== null && _selectNotesData !== void 0 ? _selectNotesData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","notesAdapter","sortComparer","a","b","completed","initialState","getInitialState","notesApiSlice","injectEndpoints","endpoints","builder","getNotes","query","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","loadedNotes","map","note","id","_id","setAll","providesTags","error","arg","ids","type","useGetNotesQuery","selectNotesResult","select","selectNotesData","notesResult","data","selectAll","selectAllNotes","selectById","selectNoteById","selectIds","selectNoteIds","getSelectors","state"],"sources":["/Users/seifmohamed/Documents/webdev/TechNotes/front-end/my-app/src/features/notes/notesApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst notesAdapter = createEntityAdapter({\n    sortComparer: (a, b) => (a.completed === b.completed) ? 0 : a.completed ? 1 : -1\n})\n\nconst initialState = notesAdapter.getInitialState()\n\nexport const notesApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getNotes: builder.query({\n            query: () => '/notes',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            keepUnusedDataFor: 5,\n            transformResponse: responseData => {\n                const loadedNotes = responseData.map(note => {\n                    note.id = note._id\n                    return note\n                });\n                return notesAdapter.setAll(initialState, loadedNotes)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Note', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Note', id }))\n                    ]\n                } else return [{ type: 'Note', id: 'LIST' }]\n            }\n        }),\n    }),\n})\n\nexport const {\n    useGetNotesQuery,\n} = notesApiSlice\n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select()\n\n// creates memoized selector\nconst selectNotesData = createSelector(\n    selectNotesResult,\n    notesResult => notesResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllNotes,\n    selectById: selectNoteById,\n    selectIds: selectNoteIds\n    // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => selectNotesData(state) ?? initialState)"],"mappings":"AAAA,SACIA,cAAc,EACdC,mBAAmB,QAChB,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;EACrCG,YAAY,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACE,SAAS,KAAKD,CAAC,CAACC,SAAS,GAAI,CAAC,GAAGF,CAAC,CAACE,SAAS,GAAG,CAAC,GAAG,CAAC;AACnF,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAGL,YAAY,CAACM,eAAe,EAAE;AAEnD,OAAO,MAAMC,aAAa,GAAGR,QAAQ,CAACS,eAAe,CAAC;EAClDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAE,MAAM,QAAQ;MACrBC,cAAc,EAAE,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACrD,CAAC;MACDC,iBAAiB,EAAE,CAAC;MACpBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAACC,IAAI,IAAI;UACzCA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACf,CAAC,CAAC;QACF,OAAOvB,YAAY,CAAC0B,MAAM,CAACrB,YAAY,EAAEgB,WAAW,CAAC;MACzD,CAAC;MACDM,YAAY,EAAE,CAACZ,MAAM,EAAEa,KAAK,EAAEC,GAAG,KAAK;QAClC,IAAId,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,MAAM;YAAEP,EAAE,EAAE;UAAO,CAAC,EAC5B,GAAGT,MAAM,CAACe,GAAG,CAACR,GAAG,CAACE,EAAE,KAAK;YAAEO,IAAI,EAAE,MAAM;YAAEP;UAAG,CAAC,CAAC,CAAC,CAClD;QACL,CAAC,MAAM,OAAO,CAAC;UAAEO,IAAI,EAAE,MAAM;UAAEP,EAAE,EAAE;QAAO,CAAC,CAAC;MAChD;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTQ;AACJ,CAAC,GAAGzB,aAAa;;AAEjB;AACA,OAAO,MAAM0B,iBAAiB,GAAG1B,aAAa,CAACE,SAAS,CAACE,QAAQ,CAACuB,MAAM,EAAE;;AAE1E;AACA,MAAMC,eAAe,GAAGtC,cAAc,CAClCoC,iBAAiB,EACjBG,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC;AAAA,CACnC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAG3C,YAAY,CAAC4C,YAAY,CAACC,KAAK;EAAA;EAAA,2BAAIV,eAAe,CAACU,KAAK,CAAC,+DAAIxC,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}