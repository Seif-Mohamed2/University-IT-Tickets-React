{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst promise_provider_1 = require(\"../promise_provider\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n  }\n  /** Number of documents inserted. */\n  get insertedCount() {\n    var _a;\n    return (_a = this.result.nInserted) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    var _a;\n    return (_a = this.result.nMatched) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    var _a;\n    return (_a = this.result.nModified) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    var _a;\n    return (_a = this.result.nRemoved) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    var _a;\n    return (_a = this.result.upserted.length) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    var _a;\n    const upserted = {};\n    for (const doc of (_a = this.result.upserted) !== null && _a !== void 0 ? _a : []) {\n      upserted[doc.index] = doc._id;\n    }\n    return upserted;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    var _a;\n    const inserted = {};\n    for (const doc of (_a = this.result.insertedIds) !== null && _a !== void 0 ? _a : []) {\n      inserted[doc.index] = doc._id;\n    }\n    return inserted;\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok() {\n    return this.result.ok;\n  }\n  /** The number of inserted documents */\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /** Number of upserted documents */\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /** Number of matched documents */\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /** Number of documents updated physically on disk */\n  get nModified() {\n    return this.result.nModified;\n  }\n  /** Number of removed documents */\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /** Returns an array of all inserted ids */\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Returns an array of all upserted ids */\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve lastOp if available */\n  getLastOp() {\n    return this.result.opTime;\n  }\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n  toJSON() {\n    return this.result;\n  }\n  toString() {\n    return `BulkWriteResult(${this.toJSON()})`;\n  }\n  isOk() {\n    return this.result.ok === 1;\n  }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n  get err() {\n    return this[kServerError];\n  }\n  toJSON() {\n    return this[kServerError];\n  }\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n  getOperation() {\n    return this.err.op;\n  }\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\nexports.WriteError = WriteError;\n/** Converts the number to a Long or returns it. */\nfunction longOrConvert(value) {\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  return typeof value === 'number' ? bson_1.Long.fromNumber(value) : value;\n}\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n  if (result.opTime || result.lastOp) {\n    let opTime = result.lastOp || result.opTime;\n    // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = {\n        ts: opTime,\n        t: bson_1.Long.ZERO\n      };\n    }\n    // If there's no lastOp, just set it.\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      const opTimeTS = longOrConvert(opTime.ts);\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\n        const opTimeT = longOrConvert(opTime.t);\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  let nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n  const batch = bulkOperation.s.batches.shift();\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n    // Merge the results together\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  var _a, _b;\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: (_a = err.result) === null || _a === void 0 ? void 0 : _a.writeConcernError.errmsg,\n    code: (_b = err.result) === null || _b === void 0 ? void 0 : _b.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    var _a;\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = (_a = error.writeErrors) !== null && _a !== void 0 ? _a : [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n  execute(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n}\n/** @public */\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n    // Current item\n    const currentOp = undefined;\n    // Set max byte size\n    const hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, {\n          ...op.replaceOne,\n          multi: false\n        });\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, {\n        ...op.deleteOne,\n        limit: 1\n      }));\n    }\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, {\n        ...op.deleteMany,\n        limit: 0\n      }));\n    }\n    // otherwise an unknown operation was provided\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get batches() {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n  execute(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    if (this.s.executed) {\n      return handleEarlyError(new error_1.MongoBatchReExecutionError(), callback);\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      const emptyBatchError = new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n      return handleEarlyError(emptyBatchError, callback);\n    }\n    this.s.executed = true;\n    const finalOptions = {\n      ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation, callback);\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n    return false;\n  }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\n/** helper function to assist with promiseOrCallback behavior */\nfunction handleEarlyError(err, callback) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  if (typeof callback === 'function') {\n    callback(err);\n    return;\n  }\n  return Promise.reject(err);\n}\nfunction shouldForceServerObjectId(bulkOperation) {\n  var _a, _b;\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n  if (typeof ((_a = bulkOperation.s.collection.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId) === 'boolean') {\n    return (_b = bulkOperation.s.collection.s.db.options) === null || _b === void 0 ? void 0 : _b.forceServerObjectId;\n  }\n  return false;\n}\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"mappings":"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","names":["kServerError","Symbol","exports","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","bulkResult","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","doc","index","_id","insertedIds","inserted","ok","nUpserted","getInsertedIds","getUpsertedIds","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getLastOp","opTime","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","error_1","WriteConcernFailed","toJSON","toString","isOk","error","errInfo","WriteError","getOperation","op","JSON","stringify","longOrConvert","value","bson_1","fromNumber","mergeBatchResults","batch","writeError","message","push","lastOp","_bsontype","ts","t","ZERO","lastOpTS","opTimeTS","greaterThan","equals","lastOpT","opTimeT","isInsertBatch","n","isDeleteBatch","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","mergeResult","handleWriteError","finalOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","collection","db","client","insert_1","namespace","update_1","delete_1","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","selector","updateOne","replaceOne","replacement","deleteOne","delete","upsert","collation","arrayFilters","BulkWriteShimOperation","operation_1","execute","server","session","BulkOperationBase","topology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","write_concern_1","fromOptions","bsonOptions","insert","document","shouldForceServerObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","handleEarlyError","emptyBatchError","operation","msg","defineProperty","prototype","enumerable","get","Promise","promise_provider_1","reject","bulkOp"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/bulk/common.ts"],"sourcesContent":["import {\n  BSONSerializeOptions,\n  Document,\n  Long,\n  ObjectId,\n  resolveBSONOptions,\n  Timestamp\n} from '../bson';\nimport type { Collection } from '../collection';\nimport {\n  AnyError,\n  MongoBatchReExecutionError,\n  MONGODB_ERROR_CODES,\n  MongoInvalidArgumentError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\nimport { DeleteOperation, DeleteStatement, makeDeleteStatement } from '../operations/delete';\nimport { executeOperation } from '../operations/execute_operation';\nimport { InsertOperation } from '../operations/insert';\nimport { AbstractOperation, Hint } from '../operations/operation';\nimport { makeUpdateStatement, UpdateOperation, UpdateStatement } from '../operations/update';\nimport { PromiseProvider } from '../promise_provider';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport {\n  applyRetryableWrites,\n  Callback,\n  getTopology,\n  hasAtomicOperators,\n  MongoDBNamespace,\n  resolveOptions\n} from '../utils';\nimport { WriteConcern } from '../write_concern';\n\n/** @internal */\nconst kServerError = Symbol('serverError');\n\n/** @public */\nexport const BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n} as const);\n\n/** @public */\nexport type BatchType = typeof BatchType[keyof typeof BatchType];\n\n/** @public */\nexport interface InsertOneModel<TSchema extends Document = Document> {\n  /** The document to insert. */\n  document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport interface DeleteOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface DeleteManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the replaced document. */\n  filter: Filter<TSchema>;\n  /** The document with which to replace the matched document. */\n  replacement: WithoutId<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\n  | { insertOne: InsertOneModel<TSchema> }\n  | { replaceOne: ReplaceOneModel<TSchema> }\n  | { updateOne: UpdateOneModel<TSchema> }\n  | { updateMany: UpdateManyModel<TSchema> }\n  | { deleteOne: DeleteOneModel<TSchema> }\n  | { deleteMany: DeleteManyModel<TSchema> };\n\n/** @public */\nexport interface BulkResult {\n  ok: number;\n  writeErrors: WriteError[];\n  writeConcernErrors: WriteConcernError[];\n  insertedIds: Document[];\n  nInserted: number;\n  nUpserted: number;\n  nMatched: number;\n  nModified: number;\n  nRemoved: number;\n  upserted: Document[];\n  opTime?: Document;\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport class Batch<T = Document> {\n  originalZeroIndex: number;\n  currentIndex: number;\n  originalIndexes: number[];\n  batchType: BatchType;\n  operations: T[];\n  size: number;\n  sizeBytes: number;\n\n  constructor(batchType: BatchType, originalZeroIndex: number) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport class BulkWriteResult {\n  result: BulkResult;\n\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult: BulkResult) {\n    this.result = bulkResult;\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.nInserted ?? 0;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.nMatched ?? 0;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.nModified ?? 0;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.nRemoved ?? 0;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upserted.length ?? 0;\n  }\n\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    const upserted: { [index: number]: any } = {};\n    for (const doc of this.result.upserted ?? []) {\n      upserted[doc.index] = doc._id;\n    }\n    return upserted;\n  }\n\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    const inserted: { [index: number]: any } = {};\n    for (const doc of this.result.insertedIds ?? []) {\n      inserted[doc.index] = doc._id;\n    }\n    return inserted;\n  }\n\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok(): number {\n    return this.result.ok;\n  }\n\n  /** The number of inserted documents */\n  get nInserted(): number {\n    return this.result.nInserted;\n  }\n\n  /** Number of upserted documents */\n  get nUpserted(): number {\n    return this.result.nUpserted;\n  }\n\n  /** Number of matched documents */\n  get nMatched(): number {\n    return this.result.nMatched;\n  }\n\n  /** Number of documents updated physically on disk */\n  get nModified(): number {\n    return this.result.nModified;\n  }\n\n  /** Number of removed documents */\n  get nRemoved(): number {\n    return this.result.nRemoved;\n  }\n\n  /** Returns an array of all inserted ids */\n  getInsertedIds(): Document[] {\n    return this.result.insertedIds;\n  }\n\n  /** Returns an array of all upserted ids */\n  getUpsertedIds(): Document[] {\n    return this.result.upserted;\n  }\n\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index: number): Document | undefined {\n    return this.result.upserted[index];\n  }\n\n  /** Returns raw internal result */\n  getRawResponse(): Document {\n    return this.result;\n  }\n\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors(): boolean {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount(): number {\n    return this.result.writeErrors.length;\n  }\n\n  /** Returns a specific write error object */\n  getWriteErrorAt(index: number): WriteError | undefined {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n\n  /** Retrieve all write errors */\n  getWriteErrors(): WriteError[] {\n    return this.result.writeErrors;\n  }\n\n  /** Retrieve lastOp if available */\n  getLastOp(): Document | undefined {\n    return this.result.opTime;\n  }\n\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError(): WriteConcernError | undefined {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\n    }\n  }\n\n  toJSON(): BulkResult {\n    return this.result;\n  }\n\n  toString(): string {\n    return `BulkWriteResult(${this.toJSON()})`;\n  }\n\n  isOk(): boolean {\n    return this.result.ok === 1;\n  }\n}\n\n/** @public */\nexport interface WriteConcernErrorData {\n  code: number;\n  errmsg: string;\n  errInfo?: Document;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport class WriteConcernError {\n  /** @internal */\n  [kServerError]: WriteConcernErrorData;\n\n  constructor(error: WriteConcernErrorData) {\n    this[kServerError] = error;\n  }\n\n  /** Write concern error code. */\n  get code(): number | undefined {\n    return this[kServerError].code;\n  }\n\n  /** Write concern error message. */\n  get errmsg(): string | undefined {\n    return this[kServerError].errmsg;\n  }\n\n  /** Write concern error info. */\n  get errInfo(): Document | undefined {\n    return this[kServerError].errInfo;\n  }\n\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n  get err(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toJSON(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toString(): string {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\n\n/** @public */\nexport interface BulkWriteOperationError {\n  index: number;\n  code: number;\n  errmsg: string;\n  errInfo: Document;\n  op: Document | UpdateStatement | DeleteStatement;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport class WriteError {\n  err: BulkWriteOperationError;\n\n  constructor(err: BulkWriteOperationError) {\n    this.err = err;\n  }\n\n  /** WriteError code. */\n  get code(): number {\n    return this.err.code;\n  }\n\n  /** WriteError original bulk operation index. */\n  get index(): number {\n    return this.err.index;\n  }\n\n  /** WriteError message. */\n  get errmsg(): string | undefined {\n    return this.err.errmsg;\n  }\n\n  /** WriteError details. */\n  get errInfo(): Document | undefined {\n    return this.err.errInfo;\n  }\n\n  /** Returns the underlying operation that caused the error */\n  getOperation(): Document {\n    return this.err.op;\n  }\n\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  toString(): string {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/** Converts the number to a Long or returns it. */\nfunction longOrConvert(value: number | Long | Timestamp): Long | Timestamp {\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  return typeof value === 'number' ? Long.fromNumber(value) : value;\n}\n\n/** Merges results into shared data structure */\nexport function mergeBatchResults(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err?: AnyError,\n  result?: Document\n): void {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n  if (result.opTime || result.lastOp) {\n    let opTime = result.lastOp || result.opTime;\n\n    // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = { ts: opTime, t: Long.ZERO };\n    }\n\n    // If there's no lastOp, just set it.\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      const opTimeTS = longOrConvert(opTime.ts);\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\n        const opTimeT = longOrConvert(opTime.t);\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  }\n\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(\n  bulkOperation: BulkOperationBase,\n  options: BulkWriteOptions,\n  callback: Callback<BulkWriteResult>\n) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift() as Batch;\n\n  function resultHandler(err?: AnyError, result?: Document) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\n      return callback(\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\n      );\n    }\n\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = resolveOptions(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites =\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isUpdateBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isDeleteBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err: MongoWriteConcernError,\n  callback: Callback<BulkWriteResult>\n) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n\n  callback(\n    new MongoBulkWriteError(\n      {\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n      },\n      new BulkWriteResult(bulkResult)\n    )\n  );\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport class MongoBulkWriteError extends MongoServerError {\n  result: BulkWriteResult;\n  writeErrors: OneOrMore<WriteError> = [];\n  err?: WriteConcernError;\n\n  /** Creates a new MongoBulkWriteError */\n  constructor(\n    error:\n      | { message: string; code: number; writeErrors?: WriteError[] }\n      | WriteConcernError\n      | AnyError,\n    result: BulkWriteResult\n  ) {\n    super(error);\n\n    if (error instanceof WriteConcernError) this.err = error;\n    else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  override get name(): string {\n    return 'MongoBulkWriteError';\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport class FindOperators {\n  bulkOperation: BulkOperationBase;\n\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation: BulkOperationBase) {\n    this.bulkOperation = bulkOperation;\n  }\n\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument: Document): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, {\n        ...currentOp,\n        multi: true\n      })\n    );\n  }\n\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument: Document): BulkOperationBase {\n    if (!hasAtomicOperators(updateDocument)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement: Document): BulkOperationBase {\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a delete one operation to the bulk operation */\n  deleteOne(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\n    );\n  }\n\n  /** Add a delete many operation to the bulk operation */\n  delete(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\n    );\n  }\n\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert(): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /** Specifies the collation for the query condition. */\n  collation(collation: CollationOptions): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters: Document[]): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n}\n\n/** @internal */\nexport interface BulkOperationPrivate {\n  bulkResult: BulkResult;\n  currentBatch?: Batch;\n  currentIndex: number;\n  // ordered specific\n  currentBatchSize: number;\n  currentBatchSizeBytes: number;\n  // unordered specific\n  currentInsertBatch?: Batch;\n  currentUpdateBatch?: Batch;\n  currentRemoveBatch?: Batch;\n  batches: Batch[];\n  // Write concern\n  writeConcern?: WriteConcern;\n  // Max batch size options\n  maxBsonObjectSize: number;\n  maxBatchSizeBytes: number;\n  maxWriteBatchSize: number;\n  maxKeySize: number;\n  // Namespace\n  namespace: MongoDBNamespace;\n  // Topology\n  topology: Topology;\n  // Options\n  options: BulkWriteOptions;\n  // BSON options\n  bsonOptions: BSONSerializeOptions;\n  // Document used to build a bulk operation\n  currentOp?: Document;\n  // Executed\n  executed: boolean;\n  // Collection\n  collection: Collection;\n  // Fundamental error\n  err?: AnyError;\n  // check keys\n  checkKeys: boolean;\n  bypassDocumentValidation?: boolean;\n}\n\n/** @public */\nexport interface BulkWriteOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n  ordered?: boolean;\n  /** @deprecated use `ordered` instead */\n  keepGoing?: boolean;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends AbstractOperation {\n  bulkOperation: BulkOperationBase;\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server: Server, session: ClientSession | undefined, callback: Callback<any>): void {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n}\n\n/** @public */\nexport abstract class BulkOperationBase {\n  isOrdered: boolean;\n  /** @internal */\n  s: BulkOperationPrivate;\n  operationId?: number;\n\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    const topology = getTopology(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = undefined;\n\n    // Set max byte size\n    const hello = topology.lastHello();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n\n    // Final results\n    const bulkResult: BulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: resolveBSONOptions(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document: Document): BulkOperationBase {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new ObjectId();\n    }\n\n    return this.addToOperationsList(BatchType.INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```js\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector: Document): FindOperators {\n    if (!selector) {\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op: AnyBulkWriteOperation): this {\n    if (op == null || typeof op !== 'object') {\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\n          (op.insertOne as Document)._id = new ObjectId();\n        }\n\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new ObjectId();\n      }\n\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(\n          op.replaceOne.filter,\n          op.replaceOne.replacement,\n          { ...op.replaceOne, multi: false }\n        );\n        if (hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\n      );\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\n      );\n    }\n\n    // otherwise an unknown operation was provided\n    throw new MongoInvalidArgumentError(\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\n    );\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get batches(): Batch[] {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n\n  execute(options?: BulkWriteOptions): Promise<BulkWriteResult>;\n  execute(callback: Callback<BulkWriteResult>): void;\n  execute(options: BulkWriteOptions | undefined, callback: Callback<BulkWriteResult>): void;\n  execute(\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\n    callback?: Callback<BulkWriteResult>\n  ): Promise<BulkWriteResult> | void;\n  execute(\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\n    callback?: Callback<BulkWriteResult>\n  ): Promise<BulkWriteResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    if (this.s.executed) {\n      return handleEarlyError(new MongoBatchReExecutionError(), callback);\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      const emptyBatchError = new MongoInvalidArgumentError(\n        'Invalid BulkOperation, Batch cannot be empty'\n      );\n      return handleEarlyError(emptyBatchError, callback);\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options, ...options };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n\n    return executeOperation(this.s.collection.s.db.s.client, operation, callback);\n  }\n\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      callback(\n        new MongoBulkWriteError(\n          {\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          },\n          writeResult\n        )\n      );\n\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n  abstract addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this;\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\n\n/** helper function to assist with promiseOrCallback behavior */\nfunction handleEarlyError(\n  err?: AnyError,\n  callback?: Callback<BulkWriteResult>\n): Promise<BulkWriteResult> | void {\n  const Promise = PromiseProvider.get();\n  if (typeof callback === 'function') {\n    callback(err);\n    return;\n  }\n\n  return Promise.reject(err);\n}\n\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch: Batch): boolean {\n  return batch.batchType === BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\n  return batch.batchType === BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\n  return batch.batchType === BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\n  let { currentOp } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}