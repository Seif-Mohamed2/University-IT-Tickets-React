{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n    const hostAddresses = addresses.map(r => {\n      var _a;\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n    if (lbError) {\n      return callback(lbError);\n    }\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n        if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n      callback(undefined, hostAddresses);\n    });\n  });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n  if (!options) return;\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n    return false;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  }));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (lbError) {\n    throw lbError;\n  }\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => {\n    var _a;\n    return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : [];\n  });\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform(_ref3) {\n      let {\n        options,\n        values: [value]\n      } = _ref3;\n      return (0, utils_1.makeClientMetadata)({\n        ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform(_ref4) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref4;\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform(_ref5) {\n      let {\n        options,\n        values: [value]\n      } = _ref5;\n      var _a, _b;\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform(_ref6) {\n      let {\n        options,\n        values: [optionValue]\n      } = _ref6;\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform(_ref7) {\n      let {\n        options,\n        values: [value]\n      } = _ref7;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform(_ref8) {\n      let {\n        values: [version]\n      } = _ref8;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform(_ref9) {\n      let {\n        values\n      } = _ref9;\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n    transform(_ref10) {\n      let {\n        options,\n        values: [value]\n      } = _ref10;\n      var _a, _b;\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref11) {\n      let {\n        name,\n        values: [value]\n      } = _ref11;\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref13) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref13;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n    transform(_ref15) {\n      let {\n        values: [value]\n      } = _ref15;\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform(_ref16) {\n      let {\n        values: [value]\n      } = _ref16;\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform(_ref17) {\n      let {\n        name,\n        values: [value]\n      } = _ref17;\n      const maxConnecting = getUint(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform(_ref18) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref18;\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform(_ref20) {\n      let {\n        values: [value]\n      } = _ref20;\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref21) {\n      let {\n        values: [value],\n        options\n      } = _ref21;\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform(_ref22) {\n      let {\n        values: [level],\n        options\n      } = _ref22;\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform(_ref23) {\n      let {\n        values: [value],\n        options\n      } = _ref23;\n      var _a, _b, _c;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform(_ref24) {\n      let {\n        values,\n        options\n      } = _ref24;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform(_ref25) {\n      let {\n        values: [value]\n      } = _ref25;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform(_ref26) {\n      let {\n        values: [value]\n      } = _ref26;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform(_ref27) {\n      let {\n        values: [value]\n      } = _ref27;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform(_ref28) {\n      let {\n        values: [value]\n      } = _ref28;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform(_ref29) {\n      let {\n        name,\n        values: [value]\n      } = _ref29;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform(_ref30) {\n      let {\n        name,\n        values: [value]\n      } = _ref30;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform(_ref31) {\n      let {\n        values: [value]\n      } = _ref31;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform(_ref32) {\n      let {\n        values: [value]\n      } = _ref32;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform(_ref33) {\n      let {\n        values: [value]\n      } = _ref33;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref34) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref34;\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform(_ref35) {\n      let {\n        values: [value],\n        options\n      } = _ref35;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform(_ref36) {\n      let {\n        values: [value],\n        options\n      } = _ref36;\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform(_ref37) {\n      let {\n        values: [value],\n        options\n      } = _ref37;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform(_ref38) {\n      let {\n        values: [value],\n        options\n      } = _ref38;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref39 => {\n  let [, descriptor] = _ref39;\n  return descriptor.default != null;\n}).map(_ref40 => {\n  let [k, d] = _ref40;\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);","map":{"version":3,"mappings":"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","names":["VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","callback","srvHost","error_1","split","length","lookupAddress","dns","resolveSrv","srvServiceName","err","addresses","name","hostAddresses","map","r","fromString","port","lbError","validateLoadBalancedOptions","resolveTxt","record","code","txtRecordOptions","url_1","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","providers_1","has","mechanism","mongo_credentials_1","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","check","a","b","Reflect","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","getInt","Math","trunc","parsedValue","Number","parseInt","isNaN","getUint","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","mongo_client_1","url","mongodb_connection_string_url_1","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","utils_1","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","allOptions","allKeys","objectOptionValue","push","urlValue","defaultOptionsValue","tlsAndSslOpts","concat","bind","size","unsupportedOptions","Array","from","s","optionWord","isOrAre","descriptor","setOption","isGssapi","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","MONGODB_DEFAULT","mechanismProperties","promiseLibrary","promise_provider_1","autoEncryption","encrypter_1","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","isSrv","target","type","transform","deprecated","deprecatedMsg","transformValue","appName","driverInfo","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","checkKeys","compressors","default","compressionList","compVal","compValArray","isArray","c","compression_1","add","connectTimeoutMS","metadata","application","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","write_concern_1","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","logger_1","loggerLevel","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","read_preference_1","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","read_concern_1","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","fs","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d","Symbol","for"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport { MongoAPIError, MongoInvalidArgumentError, MongoParseError } from './error';\nimport { Logger, LoggerLevel } from './logger';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  AnyOptions,\n  Callback,\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  emitWarningOnce,\n  HostAddress,\n  isRecord,\n  makeClientMetadata,\n  setDifference\n} from './utils';\nimport { W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport function resolveSRVRecord(options: MongoOptions, callback: Callback<HostAddress[]>): void {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoAPIError('No addresses found at host'));\n    }\n\n    for (const { name } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r =>\n      HostAddress.fromString(`${r.name}:${r.port ?? 27017}`)\n    );\n\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n    if (lbError) {\n      return callback(lbError);\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(\n            new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`)\n          );\n        }\n\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        const source = txtRecordOptions.get('authSource') ?? undefined;\n        const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n        const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n        if (\n          !options.userSpecifiedAuthSource &&\n          source &&\n          options.credentials &&\n          !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n        ) {\n          options.credentials = MongoCredentials.merge(options.credentials, { source });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nexport function checkTLSOptions(options: AnyOptions): void {\n  if (!options) return;\n  const check = (a: string, b: string) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\n      );\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\n      );\n    }\n    return false;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name: string, value: unknown): number {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name: string, value: unknown): number {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<any[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || [])\n      .concat(allOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n\n  if (options.promiseLibrary) PromiseProvider.set(options.promiseLibrary);\n\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (lbError) {\n    throw lbError;\n  }\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  return mongoOptions;\n}\n\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): MongoParseError | undefined {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [optionValue] }): MongoCredentials {\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!isRecord(optionValue)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: optionValue });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new Logger('MongoClient'),\n    transform({ values: [value] }) {\n      if (value instanceof Logger) {\n        return value;\n      }\n      emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({ values: [value] }) {\n      return new Logger('MongoClient', { loggerLevel: value as LoggerLevel });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUint(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}