{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.connect = void 0;\nconst net = require(\"net\");\nconst socks_1 = require(\"socks\");\nconst tls = require(\"tls\");\nconst bson_1 = require(\"../bson\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst auth_provider_1 = require(\"./auth/auth_provider\");\nconst gssapi_1 = require(\"./auth/gssapi\");\nconst mongocr_1 = require(\"./auth/mongocr\");\nconst mongodb_aws_1 = require(\"./auth/mongodb_aws\");\nconst plain_1 = require(\"./auth/plain\");\nconst providers_1 = require(\"./auth/providers\");\nconst scram_1 = require(\"./auth/scram\");\nconst x509_1 = require(\"./auth/x509\");\nconst connection_1 = require(\"./connection\");\nconst constants_2 = require(\"./wire_protocol/constants\");\nconst AUTH_PROVIDERS = new Map([[providers_1.AuthMechanism.MONGODB_AWS, new mongodb_aws_1.MongoDBAWS()], [providers_1.AuthMechanism.MONGODB_CR, new mongocr_1.MongoCR()], [providers_1.AuthMechanism.MONGODB_GSSAPI, new gssapi_1.GSSAPI()], [providers_1.AuthMechanism.MONGODB_PLAIN, new plain_1.Plain()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, new scram_1.ScramSHA1()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, new scram_1.ScramSHA256()], [providers_1.AuthMechanism.MONGODB_X509, new x509_1.X509()]]);\nfunction connect(options, callback) {\n  makeConnection({\n    ...options,\n    existingSocket: undefined\n  }, (err, socket) => {\n    var _a;\n    if (err || !socket) {\n      return callback(err);\n    }\n    let ConnectionType = (_a = options.connectionType) !== null && _a !== void 0 ? _a : connection_1.Connection;\n    if (options.autoEncrypter) {\n      ConnectionType = connection_1.CryptoConnection;\n    }\n    performInitialHandshake(new ConnectionType(socket, options), options, callback);\n  });\n}\nexports.connect = connect;\nfunction checkSupportedServer(hello, options) {\n  var _a;\n  const serverVersionHighEnough = hello && (typeof hello.maxWireVersion === 'number' || hello.maxWireVersion instanceof bson_1.Int32) && hello.maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough = hello && (typeof hello.minWireVersion === 'number' || hello.minWireVersion instanceof bson_1.Int32) && hello.minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n  }\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${(_a = JSON.stringify(hello.maxWireVersion)) !== null && _a !== void 0 ? _a : 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n  return new error_1.MongoCompatibilityError(message);\n}\nfunction performInitialHandshake(conn, options, _callback) {\n  const callback = function (err, ret) {\n    if (err && conn) {\n      conn.destroy();\n    }\n    _callback(err, ret);\n  };\n  const credentials = options.credentials;\n  if (credentials) {\n    if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) && !AUTH_PROVIDERS.get(credentials.mechanism)) {\n      callback(new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`));\n      return;\n    }\n  }\n  const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n  prepareHandshakeDocument(authContext, (err, handshakeDoc) => {\n    if (err || !handshakeDoc) {\n      return callback(err);\n    }\n    const handshakeOptions = Object.assign({}, options);\n    if (typeof options.connectTimeoutMS === 'number') {\n      // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n      handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      if ((response === null || response === void 0 ? void 0 : response.ok) === 0) {\n        callback(new error_1.MongoServerError(response));\n        return;\n      }\n      if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      if (response.helloOk) {\n        conn.helloOk = true;\n      }\n      const supportedServerErr = checkSupportedServer(response, options);\n      if (supportedServerErr) {\n        callback(supportedServerErr);\n        return;\n      }\n      if (options.loadBalanced) {\n        if (!response.serviceId) {\n          return callback(new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' + 'but the server does not support this mode.'));\n        }\n      }\n      // NOTE: This is metadata attached to the connection while porting away from\n      //       handshake being done in the `Server` class. Likely, it should be\n      //       relocated, or at very least restructured.\n      conn.hello = response;\n      conn.lastHelloMS = new Date().getTime() - start;\n      if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n          return callback(new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`));\n        }\n        provider.auth(authContext, err => {\n          if (err) {\n            if (err instanceof error_1.MongoError) {\n              err.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n              if ((0, error_1.needsRetryableWriteLabel)(err, response.maxWireVersion)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n              }\n            }\n            return callback(err);\n          }\n          callback(undefined, conn);\n        });\n        return;\n      }\n      callback(undefined, conn);\n    });\n  });\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nfunction prepareHandshakeDocument(authContext, callback) {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const {\n    serverApi\n  } = authContext.connection;\n  const handshakeDoc = {\n    [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: true,\n    helloOk: true,\n    client: options.metadata || (0, utils_1.makeClientMetadata)(options),\n    compression: compressors\n  };\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n      const provider = AUTH_PROVIDERS.get(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n      if (!provider) {\n        // This auth mechanism is always present.\n        return callback(new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`));\n      }\n      return provider.prepare(handshakeDoc, authContext, callback);\n    }\n    const provider = AUTH_PROVIDERS.get(credentials.mechanism);\n    if (!provider) {\n      return callback(new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`));\n    }\n    return provider.prepare(handshakeDoc, authContext, callback);\n  }\n  callback(undefined, handshakeDoc);\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = ['ALPNProtocols', 'ca', 'cert', 'checkServerIdentity', 'ciphers', 'crl', 'ecdhCurve', 'key', 'minDHSize', 'passphrase', 'pfx', 'rejectUnauthorized', 'secureContext', 'secureProtocol', 'servername', 'session'];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = ['family', 'hints', 'localAddress', 'localPort', 'lookup'];\nfunction parseConnectOptions(options) {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n  const result = {};\n  for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\nfunction parseSslOptions(options) {\n  const result = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n  return result;\n}\nconst SOCKET_ERROR_EVENT_LIST = ['error', 'close', 'timeout', 'parseError'];\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\nfunction makeConnection(options, _callback) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n  const useTLS = (_a = options.tls) !== null && _a !== void 0 ? _a : false;\n  const keepAlive = (_b = options.keepAlive) !== null && _b !== void 0 ? _b : true;\n  const socketTimeoutMS = (_d = (_c = options.socketTimeoutMS) !== null && _c !== void 0 ? _c : Reflect.get(options, 'socketTimeout')) !== null && _d !== void 0 ? _d : 0;\n  const noDelay = (_e = options.noDelay) !== null && _e !== void 0 ? _e : true;\n  const connectTimeoutMS = (_f = options.connectTimeoutMS) !== null && _f !== void 0 ? _f : 30000;\n  const rejectUnauthorized = (_g = options.rejectUnauthorized) !== null && _g !== void 0 ? _g : true;\n  const keepAliveInitialDelay = (_j = ((_h = options.keepAliveInitialDelay) !== null && _h !== void 0 ? _h : 120000) > socketTimeoutMS ? Math.round(socketTimeoutMS / 2) : options.keepAliveInitialDelay) !== null && _j !== void 0 ? _j : 120000;\n  const existingSocket = options.existingSocket;\n  let socket;\n  const callback = function (err, ret) {\n    if (err && socket) {\n      socket.destroy();\n    }\n    _callback(err, ret);\n  };\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return makeSocks5Connection({\n      ...options,\n      connectTimeoutMS // Should always be present for Socks5\n    }, callback);\n  }\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n  const connectEvent = useTLS ? 'secureConnect' : 'connect';\n  let cancellationHandler;\n  function errorHandler(eventName) {\n    return err => {\n      SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n      if (cancellationHandler && options.cancellationToken) {\n        options.cancellationToken.removeListener('cancel', cancellationHandler);\n      }\n      socket.removeListener(connectEvent, connectHandler);\n      callback(connectionFailureError(eventName, err));\n    };\n  }\n  function connectHandler() {\n    SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n    if (cancellationHandler && options.cancellationToken) {\n      options.cancellationToken.removeListener('cancel', cancellationHandler);\n    }\n    if ('authorizationError' in socket) {\n      if (socket.authorizationError && rejectUnauthorized) {\n        return callback(socket.authorizationError);\n      }\n    }\n    socket.setTimeout(socketTimeoutMS);\n    callback(undefined, socket);\n  }\n  SOCKET_ERROR_EVENTS.forEach(event => socket.once(event, errorHandler(event)));\n  if (options.cancellationToken) {\n    cancellationHandler = errorHandler('cancel');\n    options.cancellationToken.once('cancel', cancellationHandler);\n  }\n  if (existingSocket) {\n    process.nextTick(connectHandler);\n  } else {\n    socket.once(connectEvent, connectHandler);\n  }\n}\nfunction makeSocks5Connection(options, callback) {\n  var _a, _b;\n  const hostAddress = utils_1.HostAddress.fromHostPort((_a = options.proxyHost) !== null && _a !== void 0 ? _a : '',\n  // proxyHost is guaranteed to set here\n  (_b = options.proxyPort) !== null && _b !== void 0 ? _b : 1080);\n  // First, connect to the proxy server itself:\n  makeConnection({\n    ...options,\n    hostAddress,\n    tls: false,\n    proxyHost: undefined\n  }, (err, rawSocket) => {\n    if (err) {\n      return callback(err);\n    }\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n      return callback(new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts'));\n    }\n    // Then, establish the Socks5 proxy connection:\n    socks_1.SocksClient.createConnection({\n      existing_socket: rawSocket,\n      timeout: options.connectTimeoutMS,\n      command: 'connect',\n      destination: {\n        host: destination.host,\n        port: destination.port\n      },\n      proxy: {\n        // host and port are ignored because we pass existing_socket\n        host: 'iLoveJavaScript',\n        port: 0,\n        type: 5,\n        userId: options.proxyUsername || undefined,\n        password: options.proxyPassword || undefined\n      }\n    }).then(_ref => {\n      let {\n        socket\n      } = _ref;\n      // Finally, now treat the resulting duplex stream as the\n      // socket over which we send and receive wire protocol messages:\n      makeConnection({\n        ...options,\n        existingSocket: socket,\n        proxyHost: undefined\n      }, callback);\n    }, error => callback(connectionFailureError('error', error)));\n  });\n}\nfunction connectionFailureError(type, err) {\n  switch (type) {\n    case 'error':\n      return new error_1.MongoNetworkError(err);\n    case 'timeout':\n      return new error_1.MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new error_1.MongoNetworkError('connection closed');\n    case 'cancel':\n      return new error_1.MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new error_1.MongoNetworkError('unknown network error');\n  }\n}","map":{"version":3,"mappings":"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","names":["AUTH_PROVIDERS","Map","providers_1","MONGODB_AWS","mongodb_aws_1","MONGODB_CR","mongocr_1","MONGODB_GSSAPI","gssapi_1","MONGODB_PLAIN","plain_1","MONGODB_SCRAM_SHA1","scram_1","MONGODB_SCRAM_SHA256","MONGODB_X509","x509_1","connect","options","callback","makeConnection","existingSocket","undefined","err","socket","ConnectionType","connectionType","connection_1","autoEncrypter","performInitialHandshake","exports","checkSupportedServer","hello","serverVersionHighEnough","maxWireVersion","bson_1","constants_2","serverVersionLowEnough","minWireVersion","message","hostAddress","JSON","stringify","error_1","conn","_callback","ret","destroy","credentials","mechanism","MONGODB_DEFAULT","get","authContext","auth_provider_1","prepareHandshakeDocument","handshakeDoc","handshakeOptions","Object","assign","connectTimeoutMS","socketTimeoutMS","start","Date","getTime","command","response","ok","isWritablePrimary","constants_1","helloOk","supportedServerErr","loadBalanced","serviceId","lastHelloMS","arbiterOnly","resolvedCredentials","resolveAuthMechanism","provider","auth","addErrorLabel","HandshakeError","RetryableWriteError","compressors","serverApi","connection","version","client","metadata","compression","username","saslSupportedMechs","source","prepare","parseConnectOptions","result","name","socketPath","path","host","port","parseSslOptions","servername","net","isIP","SOCKET_ERROR_EVENT_LIST","SOCKET_ERROR_EVENTS","Set","useTLS","tls","keepAlive","Reflect","noDelay","rejectUnauthorized","keepAliveInitialDelay","Math","round","proxyHost","makeSocks5Connection","tlsSocket","disableRenegotiation","createConnection","setKeepAlive","setTimeout","setNoDelay","connectEvent","cancellationHandler","errorHandler","eventName","forEach","event","removeAllListeners","cancellationToken","removeListener","connectHandler","connectionFailureError","authorizationError","once","process","nextTick","utils_1","fromHostPort","proxyPort","rawSocket","destination","socks_1","existing_socket","timeout","proxy","type","userId","proxyUsername","password","proxyPassword","then","error"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cmap/connect.ts"],"sourcesContent":["import type { Socket, SocketConnectOpts } from 'net';\nimport * as net from 'net';\nimport { SocksClient } from 'socks';\nimport type { ConnectionOptions as TLSConnectionOpts, TLSSocket } from 'tls';\nimport * as tls from 'tls';\n\nimport type { Document } from '../bson';\nimport { Int32 } from '../bson';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerError,\n  needsRetryableWriteLabel\n} from '../error';\nimport { Callback, ClientMetadata, HostAddress, makeClientMetadata, ns } from '../utils';\nimport { AuthContext, AuthProvider } from './auth/auth_provider';\nimport { GSSAPI } from './auth/gssapi';\nimport { MongoCR } from './auth/mongocr';\nimport { MongoDBAWS } from './auth/mongodb_aws';\nimport { Plain } from './auth/plain';\nimport { AuthMechanism } from './auth/providers';\nimport { ScramSHA1, ScramSHA256 } from './auth/scram';\nimport { X509 } from './auth/x509';\nimport { Connection, ConnectionOptions, CryptoConnection } from './connection';\nimport {\n  MAX_SUPPORTED_SERVER_VERSION,\n  MAX_SUPPORTED_WIRE_VERSION,\n  MIN_SUPPORTED_SERVER_VERSION,\n  MIN_SUPPORTED_WIRE_VERSION\n} from './wire_protocol/constants';\n\nconst AUTH_PROVIDERS = new Map<AuthMechanism | string, AuthProvider>([\n  [AuthMechanism.MONGODB_AWS, new MongoDBAWS()],\n  [AuthMechanism.MONGODB_CR, new MongoCR()],\n  [AuthMechanism.MONGODB_GSSAPI, new GSSAPI()],\n  [AuthMechanism.MONGODB_PLAIN, new Plain()],\n  [AuthMechanism.MONGODB_SCRAM_SHA1, new ScramSHA1()],\n  [AuthMechanism.MONGODB_SCRAM_SHA256, new ScramSHA256()],\n  [AuthMechanism.MONGODB_X509, new X509()]\n]);\n\n/** @public */\nexport type Stream = Socket | TLSSocket;\n\nexport function connect(options: ConnectionOptions, callback: Callback<Connection>): void {\n  makeConnection({ ...options, existingSocket: undefined }, (err, socket) => {\n    if (err || !socket) {\n      return callback(err);\n    }\n\n    let ConnectionType = options.connectionType ?? Connection;\n    if (options.autoEncrypter) {\n      ConnectionType = CryptoConnection;\n    }\n    performInitialHandshake(new ConnectionType(socket, options), options, callback);\n  });\n}\n\nfunction checkSupportedServer(hello: Document, options: ConnectionOptions) {\n  const serverVersionHighEnough =\n    hello &&\n    (typeof hello.maxWireVersion === 'number' || hello.maxWireVersion instanceof Int32) &&\n    hello.maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough =\n    hello &&\n    (typeof hello.minWireVersion === 'number' || hello.minWireVersion instanceof Int32) &&\n    hello.minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;\n\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(\n      hello.minWireVersion\n    )}, but this version of the Node.js Driver requires at most ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n    return new MongoCompatibilityError(message);\n  }\n\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${\n    JSON.stringify(hello.maxWireVersion) ?? 0\n  }, but this version of the Node.js Driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION})`;\n  return new MongoCompatibilityError(message);\n}\n\nfunction performInitialHandshake(\n  conn: Connection,\n  options: ConnectionOptions,\n  _callback: Callback\n) {\n  const callback: Callback<Document> = function (err, ret) {\n    if (err && conn) {\n      conn.destroy();\n    }\n    _callback(err, ret);\n  };\n\n  const credentials = options.credentials;\n  if (credentials) {\n    if (\n      !(credentials.mechanism === AuthMechanism.MONGODB_DEFAULT) &&\n      !AUTH_PROVIDERS.get(credentials.mechanism)\n    ) {\n      callback(\n        new MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`)\n      );\n      return;\n    }\n  }\n\n  const authContext = new AuthContext(conn, credentials, options);\n  prepareHandshakeDocument(authContext, (err, handshakeDoc) => {\n    if (err || !handshakeDoc) {\n      return callback(err);\n    }\n\n    const handshakeOptions: Document = Object.assign({}, options);\n    if (typeof options.connectTimeoutMS === 'number') {\n      // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n      handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n\n    const start = new Date().getTime();\n    conn.command(ns('admin.$cmd'), handshakeDoc, handshakeOptions, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (response?.ok === 0) {\n        callback(new MongoServerError(response));\n        return;\n      }\n\n      if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[LEGACY_HELLO_COMMAND];\n      }\n\n      if (response.helloOk) {\n        conn.helloOk = true;\n      }\n\n      const supportedServerErr = checkSupportedServer(response, options);\n      if (supportedServerErr) {\n        callback(supportedServerErr);\n        return;\n      }\n\n      if (options.loadBalanced) {\n        if (!response.serviceId) {\n          return callback(\n            new MongoCompatibilityError(\n              'Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.'\n            )\n          );\n        }\n      }\n\n      // NOTE: This is metadata attached to the connection while porting away from\n      //       handshake being done in the `Server` class. Likely, it should be\n      //       relocated, or at very least restructured.\n      conn.hello = response;\n      conn.lastHelloMS = new Date().getTime() - start;\n\n      if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n          return callback(\n            new MongoInvalidArgumentError(\n              `No AuthProvider for ${resolvedCredentials.mechanism} defined.`\n            )\n          );\n        }\n        provider.auth(authContext, err => {\n          if (err) {\n            if (err instanceof MongoError) {\n              err.addErrorLabel(MongoErrorLabel.HandshakeError);\n              if (needsRetryableWriteLabel(err, response.maxWireVersion)) {\n                err.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n              }\n            }\n            return callback(err);\n          }\n          callback(undefined, conn);\n        });\n\n        return;\n      }\n\n      callback(undefined, conn);\n    });\n  });\n}\n\nexport interface HandshakeDocument extends Document {\n  /**\n   * @deprecated Use hello instead\n   */\n  ismaster?: boolean;\n  hello?: boolean;\n  helloOk?: boolean;\n  client: ClientMetadata;\n  compression: string[];\n  saslSupportedMechs?: string;\n  loadBalanced?: boolean;\n}\n\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nexport function prepareHandshakeDocument(\n  authContext: AuthContext,\n  callback: Callback<HandshakeDocument>\n) {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const { serverApi } = authContext.connection;\n\n  const handshakeDoc: HandshakeDocument = {\n    [serverApi?.version ? 'hello' : LEGACY_HELLO_COMMAND]: true,\n    helloOk: true,\n    client: options.metadata || makeClientMetadata(options),\n    compression: compressors\n  };\n\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n\n      const provider = AUTH_PROVIDERS.get(AuthMechanism.MONGODB_SCRAM_SHA256);\n      if (!provider) {\n        // This auth mechanism is always present.\n        return callback(\n          new MongoInvalidArgumentError(\n            `No AuthProvider for ${AuthMechanism.MONGODB_SCRAM_SHA256} defined.`\n          )\n        );\n      }\n      return provider.prepare(handshakeDoc, authContext, callback);\n    }\n    const provider = AUTH_PROVIDERS.get(credentials.mechanism);\n    if (!provider) {\n      return callback(\n        new MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`)\n      );\n    }\n    return provider.prepare(handshakeDoc, authContext, callback);\n  }\n  callback(undefined, handshakeDoc);\n}\n\n/** @public */\nexport const LEGAL_TLS_SOCKET_OPTIONS = [\n  'ALPNProtocols',\n  'ca',\n  'cert',\n  'checkServerIdentity',\n  'ciphers',\n  'crl',\n  'ecdhCurve',\n  'key',\n  'minDHSize',\n  'passphrase',\n  'pfx',\n  'rejectUnauthorized',\n  'secureContext',\n  'secureProtocol',\n  'servername',\n  'session'\n] as const;\n\n/** @public */\nexport const LEGAL_TCP_SOCKET_OPTIONS = [\n  'family',\n  'hints',\n  'localAddress',\n  'localPort',\n  'lookup'\n] as const;\n\nfunction parseConnectOptions(options: ConnectionOptions): SocketConnectOpts {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new MongoInvalidArgumentError('Option \"hostAddress\" is required');\n\n  const result: Partial<net.TcpNetConnectOpts & net.IpcNetConnectOpts> = {};\n  for (const name of LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result as net.IpcNetConnectOpts;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result as net.TcpNetConnectOpts;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\n\ntype MakeConnectionOptions = ConnectionOptions & { existingSocket?: Stream };\n\nfunction parseSslOptions(options: MakeConnectionOptions): TLSConnectionOpts {\n  const result: TLSConnectionOpts = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n\n  return result;\n}\n\nconst SOCKET_ERROR_EVENT_LIST = ['error', 'close', 'timeout', 'parseError'] as const;\ntype ErrorHandlerEventName = typeof SOCKET_ERROR_EVENT_LIST[number] | 'cancel';\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\n\nfunction makeConnection(options: MakeConnectionOptions, _callback: Callback<Stream>) {\n  const useTLS = options.tls ?? false;\n  const keepAlive = options.keepAlive ?? true;\n  const socketTimeoutMS = options.socketTimeoutMS ?? Reflect.get(options, 'socketTimeout') ?? 0;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const rejectUnauthorized = options.rejectUnauthorized ?? true;\n  const keepAliveInitialDelay =\n    ((options.keepAliveInitialDelay ?? 120000) > socketTimeoutMS\n      ? Math.round(socketTimeoutMS / 2)\n      : options.keepAliveInitialDelay) ?? 120000;\n  const existingSocket = options.existingSocket;\n\n  let socket: Stream;\n  const callback: Callback<Stream> = function (err, ret) {\n    if (err && socket) {\n      socket.destroy();\n    }\n\n    _callback(err, ret);\n  };\n\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return makeSocks5Connection(\n      {\n        ...options,\n        connectTimeoutMS // Should always be present for Socks5\n      },\n      callback\n    );\n  }\n\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n\n  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n\n  const connectEvent = useTLS ? 'secureConnect' : 'connect';\n  let cancellationHandler: (err: Error) => void;\n  function errorHandler(eventName: ErrorHandlerEventName) {\n    return (err: Error) => {\n      SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n      if (cancellationHandler && options.cancellationToken) {\n        options.cancellationToken.removeListener('cancel', cancellationHandler);\n      }\n\n      socket.removeListener(connectEvent, connectHandler);\n      callback(connectionFailureError(eventName, err));\n    };\n  }\n\n  function connectHandler() {\n    SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n    if (cancellationHandler && options.cancellationToken) {\n      options.cancellationToken.removeListener('cancel', cancellationHandler);\n    }\n\n    if ('authorizationError' in socket) {\n      if (socket.authorizationError && rejectUnauthorized) {\n        return callback(socket.authorizationError);\n      }\n    }\n\n    socket.setTimeout(socketTimeoutMS);\n    callback(undefined, socket);\n  }\n\n  SOCKET_ERROR_EVENTS.forEach(event => socket.once(event, errorHandler(event)));\n  if (options.cancellationToken) {\n    cancellationHandler = errorHandler('cancel');\n    options.cancellationToken.once('cancel', cancellationHandler);\n  }\n\n  if (existingSocket) {\n    process.nextTick(connectHandler);\n  } else {\n    socket.once(connectEvent, connectHandler);\n  }\n}\n\nfunction makeSocks5Connection(options: MakeConnectionOptions, callback: Callback<Stream>) {\n  const hostAddress = HostAddress.fromHostPort(\n    options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080\n  );\n\n  // First, connect to the proxy server itself:\n  makeConnection(\n    {\n      ...options,\n      hostAddress,\n      tls: false,\n      proxyHost: undefined\n    },\n    (err, rawSocket) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const destination = parseConnectOptions(options) as net.TcpNetConnectOpts;\n      if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        return callback(\n          new MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts')\n        );\n      }\n\n      // Then, establish the Socks5 proxy connection:\n      SocksClient.createConnection({\n        existing_socket: rawSocket,\n        timeout: options.connectTimeoutMS,\n        command: 'connect',\n        destination: {\n          host: destination.host,\n          port: destination.port\n        },\n        proxy: {\n          // host and port are ignored because we pass existing_socket\n          host: 'iLoveJavaScript',\n          port: 0,\n          type: 5,\n          userId: options.proxyUsername || undefined,\n          password: options.proxyPassword || undefined\n        }\n      }).then(\n        ({ socket }) => {\n          // Finally, now treat the resulting duplex stream as the\n          // socket over which we send and receive wire protocol messages:\n          makeConnection(\n            {\n              ...options,\n              existingSocket: socket,\n              proxyHost: undefined\n            },\n            callback\n          );\n        },\n        error => callback(connectionFailureError('error', error))\n      );\n    }\n  );\n}\n\nfunction connectionFailureError(type: ErrorHandlerEventName, err: Error) {\n  switch (type) {\n    case 'error':\n      return new MongoNetworkError(err);\n    case 'timeout':\n      return new MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new MongoNetworkError('connection closed');\n    case 'cancel':\n      return new MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new MongoNetworkError('unknown network error');\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}