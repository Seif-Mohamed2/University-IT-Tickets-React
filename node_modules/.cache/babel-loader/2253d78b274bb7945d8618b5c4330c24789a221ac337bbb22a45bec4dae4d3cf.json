{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions),\n      operationCount: 0\n    };\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n    monitor.on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n  get clusterTime() {\n    return this.s.topology.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n  get description() {\n    return this.s.description;\n  }\n  get name() {\n    return this.s.description.address;\n  }\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    var _a;\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n  destroy(options, callback) {\n    var _a;\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.close();\n    }\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    var _a;\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.requestCheck();\n    }\n  }\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    });\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n    // error if collation not supported\n    if ((0, utils_1.collationNotSupported)(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n    this.s.operationCount += 1;\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        this.s.operationCount -= 1;\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n        this.s.operationCount -= 1;\n        cb(error, response);\n      }));\n    }, callback);\n  }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n  var _a;\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    (_a = server[kMonitor]) === null || _a === void 0 ? void 0 : _a.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n      if (!(error instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(error)) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n        server.s.pool.clear(connection.serviceId);\n        if (!server.loadBalanced) {\n          markServerUnknown(server, error);\n        }\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(server, error)) {\n          if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(error)) {\n            server.s.pool.clear(connection.serviceId);\n          }\n          if (!server.loadBalanced) {\n            markServerUnknown(server, error);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    return callback(error);\n  };\n}","map":{"version":3,"mappings":"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","names":["stateTransition","common_1","kMonitor","Symbol","Server","mongo_types_1","constructor","topology","description","options","serverApi","poolOptions","hostAddress","s","logger","logger_1","state","pool","connection_pool_1","operationCount","event","constants_1","on","e","emit","connection_1","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","monitor_1","clear","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","server_description_1","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","LoadBalanced","connect","destroy","callback","Object","assign","force","close","err","requestCheck","command","ns","cmd","error_1","db","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","withConnection","cb","makeOperationHandler","response","exports","oldRtt","alpha","server","reset","undefined","inTransaction","connectionIsStale","connection","serviceId","generation","serviceGenerations","get","toHexString","shouldHandleStateChangeError","etv","topologyVersion","stv","inActiveTransaction","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","hasEnded","serverSession","isDirty","hasErrorLabel","TransientTransactionError","addErrorLabel","RetryableWriteError","process","nextTick","isPinned","unpin"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/sdam/server.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { CommandOptions, Connection, DestroyOptions, GetMoreOptions } from '../cmap/connection';\nimport {\n  ConnectionPool,\n  ConnectionPoolEvents,\n  ConnectionPoolOptions\n} from '../cmap/connection_pool';\nimport {\n  APM_EVENTS,\n  CLOSED,\n  CMAP_EVENTS,\n  CONNECT,\n  DESCRIPTION_RECEIVED,\n  ENDED,\n  HEARTBEAT_EVENTS,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  isNetworkErrorBeforeHandshake,\n  isNodeShuttingDownError,\n  isSDAMUnrecoverableError,\n  MongoCompatibilityError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoServerClosedError,\n  MongoServerError,\n  MongoUnexpectedServerResponseError,\n  needsRetryableWriteLabel\n} from '../error';\nimport { Logger } from '../logger';\nimport type { ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport type { ClientSession } from '../sessions';\nimport { isTransactionCommand } from '../transactions';\nimport {\n  Callback,\n  collationNotSupported,\n  EventEmitterWithState,\n  makeStateMachine,\n  maxWireVersion,\n  MongoDBNamespace,\n  supportsRetryableWrites\n} from '../utils';\nimport {\n  ClusterTime,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport type {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Monitor, MonitorOptions } from './monitor';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport type { Topology } from './topology';\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kMonitor = Symbol('monitor');\n\n/** @public */\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\n  MonitorOptions;\n\n/** @internal */\nexport interface ServerPrivate {\n  /** The server description for this server */\n  description: ServerDescription;\n  /** A copy of the options used to construct this instance */\n  options: ServerOptions;\n  /** A logger instance */\n  logger: Logger;\n  /** The current state of the Server */\n  state: string;\n  /** The topology this server is a part of */\n  topology: Topology;\n  /** A connection pool for this server */\n  pool: ConnectionPool;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** A count of the operations currently running against the server. */\n  operationCount: number;\n}\n\n/** @public */\nexport type ServerEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(server: Server): void;\n  descriptionReceived(description: ServerDescription): void;\n  closed(): void;\n  ended(): void;\n} & ConnectionPoolEvents &\n  EventEmitterWithState;\n\n/** @internal */\nexport class Server extends TypedEventEmitter<ServerEvents> {\n  /** @internal */\n  s: ServerPrivate;\n  serverApi?: ServerApi;\n  hello?: Document;\n  [kMonitor]: Monitor | null;\n\n  /** @event */\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\n  /** @event */\n  static readonly CLOSED = CLOSED;\n  /** @event */\n  static readonly ENDED = ENDED;\n\n  /**\n   * Create a server\n   */\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\n    super();\n\n    this.serverApi = options.serverApi;\n\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\n\n    this.s = {\n      description,\n      options,\n      logger: new Logger('Server'),\n      state: STATE_CLOSED,\n      topology,\n      pool: new ConnectionPool(poolOptions),\n      operationCount: 0\n    };\n\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\n      this.s.pool.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.s.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of HEARTBEAT_EVENTS) {\n      monitor.on(event, (e: any) => this.emit(event, e));\n    }\n\n    monitor.on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n\n    monitor.on('resetServer', (error: MongoError) => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\n      this.emit(\n        Server.DESCRIPTION_RECEIVED,\n        new ServerDescription(this.description.hostAddress, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description(): ServerDescription {\n    return this.s.description;\n  }\n\n  get name(): string {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter(): AutoEncrypter | undefined {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor]?.connect();\n    } else {\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n\n  /** Destroy the server connection */\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor]?.close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck(): void {\n    if (!this.loadBalanced) {\n      this[kMonitor]?.requestCheck();\n    }\n  }\n\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback<Document>\n  ): void {\n    if (callback == null) {\n      throw new MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    // Clone the options\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n\n    // error if collation not supported\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.operationCount += 1;\n\n    this.s.pool.withConnection(\n      conn,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          this.s.operationCount -= 1;\n          markServerUnknown(this, err);\n          return cb(err);\n        }\n\n        conn.command(\n          ns,\n          cmd,\n          finalOptions,\n          makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n            this.s.operationCount -= 1;\n            cb(error, response);\n          })\n        );\n      },\n      callback\n    );\n  }\n}\n\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server: Server, error?: MongoServerError) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server[kMonitor]?.reset();\n  }\n\n  server.emit(\n    Server.DESCRIPTION_RECEIVED,\n    new ServerDescription(server.description.hostAddress, undefined, { error })\n  );\n}\n\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\n  if (session) {\n    return (\n      session.inTransaction() ||\n      'aggregate' in cmd ||\n      'find' in cmd ||\n      'getMore' in cmd ||\n      'listCollections' in cmd ||\n      'listIndexes' in cmd\n    );\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  if (connection.serviceId) {\n    return (\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\n    );\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology: Topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(\n  server: Server,\n  connection: Connection,\n  cmd: Document,\n  options: CommandOptions | GetMoreOptions | undefined,\n  callback: Callback\n): Callback {\n  const session = options?.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n\n    if (!error) {\n      return callback(new MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n\n      // inActiveTransaction check handles commit and abort.\n      if (\n        inActiveTransaction(session, cmd) &&\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\n      }\n\n      if (\n        (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\n        supportsRetryableWrites(server) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (!(error instanceof MongoNetworkTimeoutError) || isNetworkErrorBeforeHandshake(error)) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n\n        server.s.pool.clear(connection.serviceId);\n        if (!server.loadBalanced) {\n          markServerUnknown(server, error);\n        }\n      }\n    } else {\n      if (\n        (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\n        needsRetryableWriteLabel(error, maxWireVersion(server)) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (isSDAMUnrecoverableError(error)) {\n        if (shouldHandleStateChangeError(server, error)) {\n          if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(error)) {\n            server.s.pool.clear(connection.serviceId);\n          }\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, error);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n\n    if (\n      session &&\n      session.isPinned &&\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n    ) {\n      session.unpin({ force: true });\n    }\n\n    return callback(error);\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}