{"ast":null,"code":"'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n  this._capacity = options.capacity;\n  this._head = 0;\n  this._tail = 0;\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  } else {\n    this._capacityMask = 0x3;\n    this._list = new Array(4);\n  }\n}\n\n/**\n * --------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = this._head + i & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (arguments.length === 0) return this.size();\n  var len = this._list.length;\n  this._head = this._head - 1 + len & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = head + 1 & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (arguments.length === 0) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = tail + 1 & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = tail - 1 + len & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = this._head + i & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = i - 1 + len & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = this._head + 1 + len & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = i + 1 + len & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = this._tail - 1 + len & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[this._head + i + k & this._capacityMask];\n  }\n  i = this._head + i & this._capacityMask;\n  if (index + count === size) {\n    this._tail = this._tail - count + len & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = this._head + count + len & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = this._head + index + count + len & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = i - 1 + len & this._capacityMask]);\n    }\n    i = this._head - 1 + len & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = i - 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = i + count + len & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[this._head + k & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = this._head + i + len & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[this._head + i + count + k & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = this._tail - leng + len & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._list = new Array(this._list.length);\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  var length = array.length;\n  var capacity = this._nextPowerOf2(length);\n  this._list = new Array(capacity);\n  this._capacityMask = capacity - 1;\n  this._tail = length;\n  for (var i = 0; i < length; i++) this._list[i] = array[i];\n};\n\n/**\n *\n * @param fullCopy\n * @param size Initialize the array with a specific size. Will default to the current list size\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy, size) {\n  var src = this._list;\n  var capacity = src.length;\n  var length = this.length;\n  size = size | length;\n\n  // No prealloc requested and the buffer is contiguous\n  if (size == length && this._head < this._tail) {\n    // Simply do a fast slice copy\n    return this._list.slice(this._head, this._tail);\n  }\n  var dest = new Array(size);\n  var k = 0;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < capacity; i++) dest[k++] = src[i];\n    for (i = 0; i < this._tail; i++) dest[k++] = src[i];\n  } else {\n    for (i = this._head; i < this._tail; i++) dest[k++] = src[i];\n  }\n  return dest;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head != 0) {\n    // double array size and copy existing data, head to end, then beginning to tail.\n    var newList = this._copyArray(true, this._list.length << 1);\n    this._tail = this._list.length;\n    this._head = 0;\n    this._list = newList;\n  } else {\n    this._tail = this._list.length;\n    this._list.length <<= 1;\n  }\n  this._capacityMask = this._capacityMask << 1 | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n/**\n * Find the next power of 2, at least 4\n * @private\n * @param {number} num \n * @returns {number}\n */\nDenque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {\n  var log2 = Math.log(num) / Math.log(2);\n  var nextPow2 = 1 << log2 + 1;\n  return Math.max(nextPow2, 4);\n};\nmodule.exports = Denque;","map":{"version":3,"names":["Denque","array","options","_capacity","capacity","_head","_tail","Array","isArray","_fromArray","_capacityMask","_list","prototype","peekAt","index","i","len","size","undefined","get","peek","peekFront","peekBack","Object","defineProperty","length","unshift","item","arguments","_growArray","pop","shift","head","_shrinkArray","push","tail","removeOne","k","remove","count","removed","del_count","toArray","clear","splice","temp","arg_len","arguments_index","leng","isEmpty","_copyArray","_nextPowerOf2","fullCopy","src","slice","dest","newList","num","log2","Math","log","nextPow2","max","module","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/denque/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n  this._capacity = options.capacity;\n\n  this._head = 0;\n  this._tail = 0;\n\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  } else {\n    this._capacityMask = 0x3;\n    this._list = new Array(4);\n  }\n}\n\n/**\n * --------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (arguments.length === 0) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (arguments.length === 0) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = (i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._list = new Array(this._list.length);\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  var length = array.length;\n  var capacity = this._nextPowerOf2(length);\n\n  this._list = new Array(capacity);\n  this._capacityMask = capacity - 1;\n  this._tail = length;\n\n  for (var i = 0; i < length; i++) this._list[i] = array[i];\n};\n\n/**\n *\n * @param fullCopy\n * @param size Initialize the array with a specific size. Will default to the current list size\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy, size) {\n  var src = this._list;\n  var capacity = src.length;\n  var length = this.length;\n  size = size | length;\n\n  // No prealloc requested and the buffer is contiguous\n  if (size == length && this._head < this._tail) {\n    // Simply do a fast slice copy\n    return this._list.slice(this._head, this._tail);\n  }\n\n  var dest = new Array(size);\n\n  var k = 0;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < capacity; i++) dest[k++] = src[i];\n    for (i = 0; i < this._tail; i++) dest[k++] = src[i];\n  } else {\n    for (i = this._head; i < this._tail; i++) dest[k++] = src[i];\n  }\n\n  return dest;\n}\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head != 0) {\n    // double array size and copy existing data, head to end, then beginning to tail.\n    var newList = this._copyArray(true, this._list.length << 1);\n\n    this._tail = this._list.length;\n    this._head = 0;\n\n    this._list = newList;\n  } else {\n    this._tail = this._list.length;\n    this._list.length <<= 1;\n  }\n\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n/**\n * Find the next power of 2, at least 4\n * @private\n * @param {number} num \n * @returns {number}\n */\nDenque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {\n  var log2 = Math.log(num) / Math.log(2);\n  var nextPow2 = 1 << (log2 + 1);\n\n  return Math.max(nextPow2, 4);\n}\n\nmodule.exports = Denque;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}