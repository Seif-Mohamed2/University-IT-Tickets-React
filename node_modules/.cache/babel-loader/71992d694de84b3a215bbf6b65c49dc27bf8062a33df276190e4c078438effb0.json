{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass UpdateOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n  execute(server, session, callback) {\n    var _a;\n    const options = (_a = this.options) !== null && _a !== void 0 ? _a : {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    if (options.let) {\n      command.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n    const statementWithCollation = this.statements.find(statement => !!statement.collation);\n    if ((0, utils_1.collationNotSupported)(server, options) || statementWithCollation && (0, utils_1.collationNotSupported)(server, statementWithCollation)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support collation`));\n      return;\n    }\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 5) {\n      if (this.statements.find(o => o.hint)) {\n        callback(new error_1.MongoCompatibilityError(`Servers < 3.4 do not support hint on update`));\n        return;\n      }\n    }\n    if (this.explain && (0, utils_1.maxWireVersion)(server) < 3) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on update`));\n      return;\n    }\n    if (this.statements.some(statement => !!statement.arrayFilters) && (0, utils_1.maxWireVersion)(server) < 6) {\n      callback(new error_1.MongoCompatibilityError('Option \"arrayFilters\" is only supported on MongoDB 3.6+'));\n      return;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, {\n      ...options,\n      multi: false\n    })], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, {\n      ...options,\n      multi: true\n    })], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n  constructor(collection, filter, replacement, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, replacement, {\n      ...options,\n      multi: false\n    })], options);\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n  const op = {\n    q: filter,\n    u: update\n  };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n  return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"mappings":"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","names":["UpdateOperation","command_1","constructor","ns","statements","options","undefined","canRetryWrite","every","op","multi","execute","server","session","callback","ordered","command","update","collection","updates","bypassDocumentValidation","let","comment","statementWithCollation","find","statement","collation","error_1","name","unacknowledgedWrite","writeConcern","w","o","hint","explain","some","arrayFilters","executeCommand","exports","UpdateOneOperation","filter","s","namespace","makeUpdateStatement","err","res","code","writeErrors","acknowledged","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","UpdateManyOperation","ReplaceOneOperation","replacement","q","u","upsert","operation_1","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/update.ts"],"sourcesContent":["import type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport {\n  Callback,\n  collationNotSupported,\n  hasAtomicOperators,\n  maxWireVersion,\n  MongoDBNamespace\n} from '../utils';\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, Hint } from './operation';\n\n/** @public */\nexport interface UpdateOptions extends CommandOperationOptions {\n  /** A set of filters specifying to which array elements an update should apply */\n  arrayFilters?: Document[];\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface UpdateResult {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of documents that matched the filter */\n  matchedCount: number;\n  /** The number of documents that were modified */\n  modifiedCount: number;\n  /** The number of documents that were upserted */\n  upsertedCount: number;\n  /** The identifier of the inserted document if an upsert took place */\n  upsertedId: ObjectId;\n}\n\n/** @public */\nexport interface UpdateStatement {\n  /** The query that matches documents to update. */\n  q: Document;\n  /** The modifications to apply. */\n  u: Document | Document[];\n  /**  If true, perform an insert if no documents match the query. */\n  upsert?: boolean;\n  /** If true, updates all documents that meet the query criteria. */\n  multi?: boolean;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n  arrayFilters?: Document[];\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/** @internal */\nexport class UpdateOperation extends CommandOperation<Document> {\n  override options: UpdateOptions & { ordered?: boolean };\n  statements: UpdateStatement[];\n\n  constructor(\n    ns: MongoDBNamespace,\n    statements: UpdateStatement[],\n    options: UpdateOptions & { ordered?: boolean }\n  ) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n\n    this.statements = statements;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const statementWithCollation = this.statements.find(statement => !!statement.collation);\n    if (\n      collationNotSupported(server, options) ||\n      (statementWithCollation && collationNotSupported(server, statementWithCollation))\n    ) {\n      callback(new MongoCompatibilityError(`Server ${server.name} does not support collation`));\n      return;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite || maxWireVersion(server) < 5) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        callback(new MongoCompatibilityError(`Servers < 3.4 do not support hint on update`));\n        return;\n      }\n    }\n\n    if (this.explain && maxWireVersion(server) < 3) {\n      callback(\n        new MongoCompatibilityError(`Server ${server.name} does not support explain on update`)\n      );\n      return;\n    }\n\n    if (this.statements.some(statement => !!statement.arrayFilters) && maxWireVersion(server) < 6) {\n      callback(\n        new MongoCompatibilityError('Option \"arrayFilters\" is only supported on MongoDB 3.6+')\n      );\n      return;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class UpdateOneOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @internal */\nexport class UpdateManyOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @public */\nexport interface ReplaceOptions extends CommandOperationOptions {\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\nexport class ReplaceOneOperation extends UpdateOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: ReplaceOptions\n  ) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\n      options\n    );\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\nexport function makeUpdateStatement(\n  filter: Document,\n  update: Document,\n  options: UpdateOptions & { multi?: boolean }\n): UpdateStatement {\n  if (filter == null || typeof filter !== 'object') {\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op: UpdateStatement = { q: filter, u: update };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\ndefineAspects(UpdateOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(UpdateManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(ReplaceOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.SKIP_COLLATION\n]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}