{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DistinctOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n    // Distinct command\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (typeof options.comment !== 'undefined') {\n      cmd.comment = options.comment;\n    }\n    // Do we have a readConcern specified\n    (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n    // Have we specified collation\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"mappings":";;;;;;AAIA;AACA;AACA;AAKA;;;;AAIA,MAAaA,iBAAkB,SAAQC,0BAAuB;EAQ5D;;;;;;;;EAQAC,YAAYC,UAAsB,EAAEC,GAAW,EAAEC,KAAe,EAAEC,OAAyB;IACzF,KAAK,CAACH,UAAU,EAAEG,OAAO,CAAC;IAE1B,IAAI,CAACA,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5B,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAESE,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAAyB;IAEzB,MAAMC,IAAI,GAAG,IAAI,CAACR,UAAU;IAC5B,MAAMC,GAAG,GAAG,IAAI,CAACA,GAAG;IACpB,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B;IACA,MAAMM,GAAG,GAAa;MACpBC,QAAQ,EAAEF,IAAI,CAACG,cAAc;MAC7BV,GAAG,EAAEA,GAAG;MACRC,KAAK,EAAEA;KACR;IAED;IACA,IAAI,OAAOC,OAAO,CAACS,SAAS,KAAK,QAAQ,EAAE;MACzCH,GAAG,CAACG,SAAS,GAAGT,OAAO,CAACS,SAAS;;IAGnC;IACA;IACA,IAAI,OAAOT,OAAO,CAACU,OAAO,KAAK,WAAW,EAAE;MAC1CJ,GAAG,CAACI,OAAO,GAAGV,OAAO,CAACU,OAAO;;IAG/B;IACA,mCAAuB,EAACJ,GAAG,EAAED,IAAI,EAAEL,OAAO,CAAC;IAE3C;IACA,IAAI;MACF,iCAAqB,EAACM,GAAG,EAAED,IAAI,EAAEL,OAAO,CAAC;KAC1C,CAAC,OAAOW,GAAG,EAAE;MACZ,OAAOP,QAAQ,CAACO,GAAG,CAAC;;IAGtB,KAAK,CAACC,cAAc,CAACV,MAAM,EAAEC,OAAO,EAAEG,GAAG,EAAE,CAACK,GAAG,EAAEE,MAAM,KAAI;MACzD,IAAIF,GAAG,EAAE;QACPP,QAAQ,CAACO,GAAG,CAAC;QACb;;MAGFP,QAAQ,CAACU,SAAS,EAAE,IAAI,CAACC,OAAO,GAAGF,MAAM,GAAGA,MAAM,CAACG,MAAM,CAAC;IAC5D,CAAC,CAAC;EACJ;;AAvEFC;AA0EA,6BAAa,EAACvB,iBAAiB,EAAE,CAACwB,kBAAM,CAACC,cAAc,EAAED,kBAAM,CAACE,SAAS,EAAEF,kBAAM,CAACG,WAAW,CAAC,CAAC","names":["DistinctOperation","command_1","constructor","collection","key","query","options","execute","server","session","callback","coll","cmd","distinct","collectionName","maxTimeMS","comment","err","executeCommand","result","undefined","explain","values","exports","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/distinct.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, decorateWithCollation, decorateWithReadConcern } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport type DistinctOptions = CommandOperationOptions;\n\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nexport class DistinctOperation extends CommandOperation<any[]> {\n  override options: DistinctOptions;\n  collection: Collection;\n  /** Field of the document to find distinct values for. */\n  key: string;\n  /** The query for filtering the set of documents to which we apply the distinct filter. */\n  query: Document;\n\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection: Collection, key: string, query: Document, options?: DistinctOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<any[]>\n  ): void {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n\n    // Distinct command\n    const cmd: Document = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (typeof options.comment !== 'undefined') {\n      cmd.comment = options.comment;\n    }\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(cmd, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n}\n\ndefineAspects(DistinctOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXPLAINABLE]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}