{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command((0, utils_1.ns)(`${source}.$cmd`), {\n      getnonce: 1\n    }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null;\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(`${username}:mongo:${password}`, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n}\nexports.MongoCR = MongoCR;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AAEA,MAAaA,OAAQ,SAAQC,4BAAY;EAC9BC,IAAI,CAACC,WAAwB,EAAEC,QAAkB;IACxD,MAAM;MAAEC,UAAU;MAAEC;IAAW,CAAE,GAAGH,WAAW;IAC/C,IAAI,CAACG,WAAW,EAAE;MAChB,OAAOF,QAAQ,CAAC,IAAIG,oCAA4B,CAAC,uCAAuC,CAAC,CAAC;;IAE5F,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAAQ;IACrC,MAAMC,QAAQ,GAAGH,WAAW,CAACG,QAAQ;IACrC,MAAMC,MAAM,GAAGJ,WAAW,CAACI,MAAM;IACjCL,UAAU,CAACM,OAAO,CAAC,cAAE,EAAC,GAAGD,MAAM,OAAO,CAAC,EAAE;MAAEE,QAAQ,EAAE;IAAC,CAAE,EAAEC,SAAS,EAAE,CAACC,GAAG,EAAEC,CAAC,KAAI;MAC9E,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,GAAG,GAAG,IAAI;MAEd;MACA,IAAIH,GAAG,IAAI,IAAI,EAAE;QACfE,KAAK,GAAGD,CAAC,CAACC,KAAK;QAEf;QACA,IAAIE,GAAG,GAAGC,MAAM,CAACC,UAAU,CAAC,KAAK,CAAC;QAElC;QACAF,GAAG,CAACG,MAAM,CAAC,GAAGb,QAAQ,UAAUC,QAAQ,EAAE,EAAE,MAAM,CAAC;QACnD,MAAMa,aAAa,GAAGJ,GAAG,CAACK,MAAM,CAAC,KAAK,CAAC;QAEvC;QACAL,GAAG,GAAGC,MAAM,CAACC,UAAU,CAAC,KAAK,CAAC;QAC9BF,GAAG,CAACG,MAAM,CAACL,KAAK,GAAGR,QAAQ,GAAGc,aAAa,EAAE,MAAM,CAAC;QACpDL,GAAG,GAAGC,GAAG,CAACK,MAAM,CAAC,KAAK,CAAC;;MAGzB,MAAMC,mBAAmB,GAAG;QAC1BC,YAAY,EAAE,CAAC;QACfC,IAAI,EAAElB,QAAQ;QACdQ,KAAK;QACLC;OACD;MAEDZ,UAAU,CAACM,OAAO,CAAC,cAAE,EAAC,GAAGD,MAAM,OAAO,CAAC,EAAEc,mBAAmB,EAAEX,SAAS,EAAET,QAAQ,CAAC;IACpF,CAAC,CAAC;EACJ;;AAvCFuB","names":["MongoCR","auth_provider_1","auth","authContext","callback","connection","credentials","error_1","username","password","source","command","getnonce","undefined","err","r","nonce","key","md5","crypto","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cmap/auth/mongocr.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\nimport { MongoMissingCredentialsError } from '../../error';\nimport { Callback, ns } from '../../utils';\nimport { AuthContext, AuthProvider } from './auth_provider';\n\nexport class MongoCR extends AuthProvider {\n  override auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(ns(`${source}.$cmd`), { getnonce: 1 }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n\n        // Generate keys used for authentication\n        md5.update(`${username}:mongo:${password}`, 'utf8');\n        const hash_password = md5.digest('hex');\n\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      connection.command(ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}