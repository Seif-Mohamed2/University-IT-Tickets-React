{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst utils_1 = require(\"./utils\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n    options.autoEncryption.bson = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson.serialize = bson_1.serialize;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n  getInternalClient(client, uri, options) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n    if (internalClient == null) {\n      const clonedOptions = {};\n      for (const key of [...Object.getOwnPropertyNames(options), ...Object.getOwnPropertySymbols(options)]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n      clonedOptions.minPoolSize = 0;\n      internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n      for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n      client.on('newListener', (eventName, listener) => {\n        internalClient === null || internalClient === void 0 ? void 0 : internalClient.on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n    return internalClient;\n  }\n  connectInternalClient(callback) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      return internalClient.connect(callback);\n    }\n    return callback();\n  }\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n      if (internalClient != null && client !== internalClient) {\n        return internalClient.close(force, callback);\n      }\n      callback(e);\n    });\n  }\n  static checkForMongoCrypt() {\n    const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n    if (mongodbClientEncryption == null) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\nexports.Encrypter = Encrypter;","map":{"version":3,"mappings":"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","names":["AutoEncrypterClass","kInternalClient","Symbol","Encrypter","constructor","client","uri","options","autoEncryption","error_1","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","proxyHost","proxyOptions","proxyPort","proxyUsername","proxyPassword","bson","Object","create","serialize","bson_1","deserialize","autoEncrypter","internalClient","clonedOptions","key","getOwnPropertyNames","getOwnPropertySymbols","includes","Reflect","set","get","minPoolSize","mongo_client_1","eventName","constants_1","listener","listeners","on","connectInternalClient","callback","connect","close","force","teardown","e","checkForMongoCrypt","mongodbClientEncryption","extension","require","AutoEncrypter","exports"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/encrypter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { deserialize, serialize } from './bson';\nimport { MONGO_CLIENT_EVENTS } from './constants';\nimport type { AutoEncrypter, AutoEncryptionOptions } from './deps';\nimport { MongoInvalidArgumentError, MongoMissingDependencyError } from './error';\nimport { MongoClient, MongoClientOptions } from './mongo_client';\nimport { Callback, getMongoDBClientEncryption } from './utils';\n\nlet AutoEncrypterClass: { new (...args: ConstructorParameters<AutoEncrypter>): AutoEncrypter };\n\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n\n/** @internal */\nexport interface EncrypterOptions {\n  autoEncryption: AutoEncryptionOptions;\n  maxPoolSize?: number;\n}\n\n/** @internal */\nexport class Encrypter {\n  [kInternalClient]: MongoClient | null;\n  bypassAutoEncryption: boolean;\n  needsConnecting: boolean;\n  autoEncrypter: AutoEncrypter;\n\n  constructor(client: MongoClient, uri: string, options: MongoClientOptions) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    options.autoEncryption.bson = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson!.serialize = serialize;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson!.deserialize = deserialize;\n\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client: MongoClient, uri: string, options: MongoClientOptions): MongoClient {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n    if (internalClient == null) {\n      const clonedOptions: MongoClientOptions = {};\n\n      for (const key of [\n        ...Object.getOwnPropertyNames(options),\n        ...Object.getOwnPropertySymbols(options)\n      ] as string[]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n          continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n\n      internalClient = new MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient?.on(eventName, listener);\n      });\n\n      this.needsConnecting = true;\n    }\n    return internalClient;\n  }\n\n  connectInternalClient(callback: Callback): void {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      return internalClient.connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client: MongoClient, force: boolean, callback: Callback): void {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n      if (internalClient != null && client !== internalClient) {\n        return internalClient.close(force, callback);\n      }\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt(): void {\n    const mongodbClientEncryption = getMongoDBClientEncryption();\n    if (mongodbClientEncryption == null) {\n      throw new MongoMissingDependencyError(\n        'Auto-encryption requested, but the module is not installed. ' +\n          'Please add `mongodb-client-encryption` as a dependency of your project'\n      );\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}