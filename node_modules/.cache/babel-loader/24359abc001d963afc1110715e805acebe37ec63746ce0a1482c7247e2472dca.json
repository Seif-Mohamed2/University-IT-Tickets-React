{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = require(\"dns\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n});\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n    const {\n      username\n    } = credentials;\n    function externalCommand(command, cb) {\n      return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n  }\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n  const {\n    initializeClient\n  } = deps_1.Kerberos;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n    var _a;\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n    const spnHost = (_a = mechanismProperties.SERVICE_HOST) !== null && _a !== void 0 ? _a : host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    initializeClient(spn, initOptions, (err, client) => {\n      // TODO(NODE-3483)\n      if (err) return callback(new error_1.MongoRuntimeError(err));\n      callback(undefined, client);\n    });\n  });\n}\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGSSAPICanonicalizeHostName(host, mechanismProperties, callback) {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n  if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n    return callback(undefined, host);\n  }\n  // If forward and reverse or true\n  if (mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n    // Perform the lookup of the ip address.\n    dns.lookup(host, (error, address) => {\n      // No ip found, return the error.\n      if (error) return callback(error);\n      // Perform a reverse ptr lookup on the ip address.\n      dns.resolvePtr(address, (err, results) => {\n        // This can error as ptr records may not exist for all ips. In this case\n        // fallback to a cname lookup as dns.lookup() does not return the\n        // cname.\n        if (err) {\n          return resolveCname(host, callback);\n        }\n        // If the ptr did not error but had no results, return the host.\n        callback(undefined, results.length > 0 ? results[0] : host);\n      });\n    });\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    resolveCname(host, callback);\n  }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nfunction resolveCname(host, callback) {\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(undefined, host);\n    // Get the first resolve host id\n    if (r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}\nexports.resolveCname = resolveCname;","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","on","off","none","forward","forwardAndReverse","GSSAPI","auth_provider_1","auth","authContext","callback","connection","credentials","error_1","username","externalCommand","command","cb","undefined","makeKerberosClient","err","client","step","payload","saslStart","result","negotiate","saslContinue","conversationId","finalize","hostAddress","options","host","deps_1","initializeClient","password","mechanismProperties","serviceName","SERVICE_NAME","performGSSAPICanonicalizeHostName","initOptions","assign","user","spnHost","SERVICE_HOST","spn","process","platform","SERVICE_REALM","mechanism","autoAuthorize","retries","response","unwrap","wrap","wrapped","mode","CANONICALIZE_HOST_NAME","dns","lookup","error","address","resolvePtr","results","resolveCname","length","r"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/cmap/auth/gssapi.ts"],"sourcesContent":["import * as dns from 'dns';\n\nimport type { Document } from '../../bson';\nimport { Kerberos, KerberosClient } from '../../deps';\nimport {\n  MongoError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoMissingDependencyError,\n  MongoRuntimeError\n} from '../../error';\nimport { Callback, ns } from '../../utils';\nimport { AuthContext, AuthProvider } from './auth_provider';\n\n/** @public */\nexport const GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n} as const);\n\n/** @public */\nexport type GSSAPICanonicalizationValue =\n  typeof GSSAPICanonicalizationValue[keyof typeof GSSAPICanonicalizationValue];\n\ntype MechanismProperties = {\n  /** @deprecated use `CANONICALIZE_HOST_NAME` instead */\n  gssapiCanonicalizeHostName?: boolean;\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n};\n\nexport class GSSAPI extends AuthProvider {\n  override auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (credentials == null)\n      return callback(\n        new MongoMissingCredentialsError('Credentials required for GSSAPI authentication')\n      );\n    const { username } = credentials;\n    function externalCommand(\n      command: Document,\n      cb: Callback<{ payload: string; conversationId: any }>\n    ) {\n      return connection.command(ns('$external.$cmd'), command, undefined, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoMissingDependencyError('GSSAPI client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n\n                externalCommand(\n                  {\n                    saslContinue: 1,\n                    conversationId: result.conversationId,\n                    payload\n                  },\n                  (err, result) => {\n                    if (err) return callback(err);\n\n                    callback(undefined, result);\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\n\nfunction makeKerberosClient(authContext: AuthContext, callback: Callback<KerberosClient>): void {\n  const { hostAddress } = authContext.options;\n  const { credentials } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(\n      new MongoInvalidArgumentError('Connection must have host and port and credentials defined.')\n    );\n  }\n\n  if ('kModuleError' in Kerberos) {\n    return callback(Kerberos['kModuleError']);\n  }\n  const { initializeClient } = Kerberos;\n\n  const { username, password } = credentials;\n  const mechanismProperties = credentials.mechanismProperties as MechanismProperties;\n\n  const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n\n  performGSSAPICanonicalizeHostName(\n    hostAddress.host,\n    mechanismProperties,\n    (err?: Error | MongoError, host?: string) => {\n      if (err) return callback(err);\n\n      const initOptions = {};\n      if (password != null) {\n        Object.assign(initOptions, { user: username, password: password });\n      }\n\n      const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n      let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n      if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n      }\n\n      initializeClient(spn, initOptions, (err: string, client: KerberosClient): void => {\n        // TODO(NODE-3483)\n        if (err) return callback(new MongoRuntimeError(err));\n        callback(undefined, client);\n      });\n    }\n  );\n}\n\nfunction saslStart(payload?: string): Document {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload?: string, conversationId?: number): Document {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(\n  client: KerberosClient,\n  retries: number,\n  payload: string,\n  callback: Callback<string>\n): void {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(\n  client: KerberosClient,\n  user: string,\n  payload: string,\n  callback: Callback<string>\n): void {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n\n    // Wrap the response\n    client.wrap(response || '', { user }, (err, wrapped) => {\n      if (err) return callback(err);\n\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nexport function performGSSAPICanonicalizeHostName(\n  host: string,\n  mechanismProperties: MechanismProperties,\n  callback: Callback<string>\n): void {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n  if (!mode || mode === GSSAPICanonicalizationValue.none) {\n    return callback(undefined, host);\n  }\n\n  // If forward and reverse or true\n  if (\n    mode === GSSAPICanonicalizationValue.on ||\n    mode === GSSAPICanonicalizationValue.forwardAndReverse\n  ) {\n    // Perform the lookup of the ip address.\n    dns.lookup(host, (error, address) => {\n      // No ip found, return the error.\n      if (error) return callback(error);\n\n      // Perform a reverse ptr lookup on the ip address.\n      dns.resolvePtr(address, (err, results) => {\n        // This can error as ptr records may not exist for all ips. In this case\n        // fallback to a cname lookup as dns.lookup() does not return the\n        // cname.\n        if (err) {\n          return resolveCname(host, callback);\n        }\n        // If the ptr did not error but had no results, return the host.\n        callback(undefined, results.length > 0 ? results[0] : host);\n      });\n    });\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    resolveCname(host, callback);\n  }\n}\n\nexport function resolveCname(host: string, callback: Callback<string>): void {\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(undefined, host);\n\n    // Get the first resolve host id\n    if (r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}