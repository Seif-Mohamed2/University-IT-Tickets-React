{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { AggregationCursor } from \"mongodb\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst studentsAdapter = createEntityAdapter({});\nconst initialState = studentsAdapter.getInitialState();\nexport const studentsapi = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getStudents: builder.query({\n      query: () => ({\n        url: \"/students\",\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      transformResponse: responseData => {\n        const loadedStudents = responseData.map(student => {\n          student.id = student._id;\n          return student;\n        });\n        return studentsAdapter.setAll(initialState, loadedStudents);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Student',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Student',\n            id\n          }))];\n        } else return [{\n          type: 'Student',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewStudent: builder.mutation({\n      query: initialStudentData => ({\n        url: \"/students\",\n        method: \"POST\",\n        body: {\n          ...initialStudentData\n        }\n      }),\n      invalidateTags: [{\n        type: \"Student\",\n        id: \"LIST\"\n      }]\n    }),\n    updateStudent: builder.mutation({\n      query: initialStudentData => ({\n        url: \"/students\",\n        method: \"PATCH\",\n        body: {\n          ...initialStudentData\n        }\n      }),\n      invalidateTags: (result, error, arg) => [{\n        type: \"Student\",\n        id: arg.id\n      }]\n    }),\n    deleteStudent: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: \"/students\",\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: \"Student\",\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetStudentsQuery,\n  useAddNewStudentMutation,\n  userUpdateStudentMutation,\n  userDeleteStudentMutation\n} = studentsApiSlice;\nexport const selectStudentsResult = studentsApiSlice.endpoints.getStudents.select();\nconst selectStudentsData = createSelector(selectStudentsResult, studentsResults => studentsResults.data);\nexport const {\n  selectAll: selectAllStudents,\n  selectById: selectStudentById,\n  selectIds: selectUserIds\n} = studentsAdapter.getSelectors(state => {\n  var _selectStudentsData;\n  return (_selectStudentsData = selectStudentsData(state)) !== null && _selectStudentsData !== void 0 ? _selectStudentsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","AggregationCursor","apiSlice","studentsAdapter","initialState","getInitialState","studentsapi","injectEndpoints","endpoints","builder","getStudents","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedStudents","map","student","id","_id","setAll","providesTags","error","arg","ids","type","addNewStudent","mutation","initialStudentData","method","body","invalidateTags","updateStudent","deleteStudent","invalidatesTags","useGetStudentsQuery","useAddNewStudentMutation","userUpdateStudentMutation","userDeleteStudentMutation","studentsApiSlice","selectStudentsResult","select","selectStudentsData","studentsResults","data","selectAll","selectAllStudents","selectById","selectStudentById","selectIds","selectUserIds","getSelectors","state"],"sources":["/Users/seifmohamed/Documents/webdev/TechNotes/front-end/my-app/src/features/students/studentsApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { AggregationCursor } from \"mongodb\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\nconst studentsAdapter = createEntityAdapter({});\n\nconst initialState = studentsAdapter.getInitialState();\n\nexport const studentsapi = apiSlice.injectEndpoints({\n    endpoints : builder => ({\n        getStudents: builder.query({\n            query: () => ({\n                url: \"/students\",\n                validateStatus: (response, result) => {\n                    return response.status === 200 && !result.isError\n                }\n            }),\n            transformResponse: responseData => {\n                const loadedStudents = responseData.map(student => {\n                    student.id = student._id\n                    return student\n                });\n                return studentsAdapter.setAll(initialState, loadedStudents)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Student', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Student', id }))\n                    ]\n                } else return [{ type: 'Student', id: 'LIST' }]\n            }\n        }),\n        addNewStudent: builder.mutation({\n            query: initialStudentData => ({\n                url: \"/students\",\n                method: \"POST\",\n                body: {\n                    ...initialStudentData,\n                }\n            }),\n            invalidateTags: [\n                {type: \"Student\", id: \"LIST\"}\n            ]\n        }),\n        updateStudent: builder.mutation({\n            query: initialStudentData => ({\n                url: \"/students\",\n                method: \"PATCH\",\n                body: {\n                    ...initialStudentData\n                }\n            }),\n            invalidateTags: (result, error, arg) => [\n                {type: \"Student\", id: arg.id}\n            ]\n        }),\n        deleteStudent: builder.mutation({\n            query: ({id}) => ({\n                url: \"/students\",\n                method: \"DELETE\",\n                body: {\n                    id\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                {type: \"Student\", id: arg.id}\n            ]\n        })\n    })\n})\n\nexport const {\n    useGetStudentsQuery,\n    useAddNewStudentMutation,\n    userUpdateStudentMutation,\n    userDeleteStudentMutation\n} = studentsApiSlice;\n\nexport const selectStudentsResult = studentsApiSlice.endpoints.getStudents.select();\n\nconst selectStudentsData = createSelector(\n    selectStudentsResult,\n    studentsResults => studentsResults.data \n);\n\nexport const {\n    selectAll: selectAllStudents,\n    selectById: selectStudentById,\n    selectIds: selectUserIds\n} = studentsAdapter.getSelectors(state => selectStudentsData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}