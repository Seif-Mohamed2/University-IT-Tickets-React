{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\nconst VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'hidden', 'expireAfterSeconds', 'storageEngine', 'collation', 'version',\n// text indexes\n'weights', 'default_language', 'language_override', 'textIndexVersion',\n// 2d-sphere indexes\n'2dsphereIndexVersion',\n// 2d indexes\n'bits', 'min', 'max',\n// geoHaystack Indexes\n'bucketSize',\n// wildcard indexes\n'wildcardProjection']);\nfunction isIndexDirection(x) {\n  return typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack';\n}\nfunction isSingleIndexTuple(t) {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n  var _a;\n  const key = new Map();\n  const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], (_a = spec[1]) !== null && _a !== void 0 ? _a : 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if ((0, utils_1.isObject)(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n  return {\n    ...options,\n    key\n  };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const options = this.options;\n    (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      full: true,\n      ...options,\n      readPreference: this.readPreference,\n      session\n    }, callback);\n  }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n  constructor(parent, collectionName, indexes, options) {\n    super(parent, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map(userIndex => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n      const validIndexOptions = Object.fromEntries(Object.entries({\n        ...userIndex\n      }).filter(_ref => {\n        let [optionName] = _ref;\n        return VALID_INDEX_OPTIONS.has(optionName);\n      }));\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n  execute(server, session, callback) {\n    const options = this.options;\n    const indexes = this.indexes;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cmd = {\n      createIndexes: this.collectionName,\n      indexes\n    };\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'));\n        return;\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n    super.executeCommand(server, session, cmd, err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const indexNames = indexes.map(index => index.name || '');\n      callback(undefined, indexNames);\n    });\n  }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n  constructor(parent, collectionName, indexSpec, options) {\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, indexNames) => {\n      if (err || !indexNames) return callback(err);\n      return callback(undefined, indexNames[0]);\n    });\n  }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n  constructor(db, collectionName, indexSpec, options) {\n    super(db, collectionName, indexSpec, options);\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n  execute(server, session, callback) {\n    const indexName = this.indexes[0].name;\n    const cursor = this.db.collection(this.collectionName).listIndexes({\n      session\n    });\n    cursor.toArray((err, indexes) => {\n      /// ignore \"NamespaceNotFound\" errors\n      if (err && err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n        return callback(err);\n      }\n      if (indexes) {\n        indexes = Array.isArray(indexes) ? indexes : [indexes];\n        if (indexes.some(index => index.name === indexName)) {\n          callback(undefined, indexName);\n          return;\n        }\n      }\n      super.execute(server, session, callback);\n    });\n  }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n  constructor(collection, indexName, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n  execute(server, session, callback) {\n    const cmd = {\n      dropIndexes: this.collection.collectionName,\n      index: this.indexName\n    };\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass DropIndexesOperation extends DropIndexOperation {\n  constructor(collection, options) {\n    super(collection, '*', options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, err => {\n      if (err) return callback(err, false);\n      callback(undefined, true);\n    });\n  }\n}\nexports.DropIndexesOperation = DropIndexesOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n  constructor(collection, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collectionNamespace = collection.s.namespace;\n  }\n  execute(server, session, callback) {\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cursor = this.options.batchSize ? {\n      batchSize: this.options.batchSize\n    } : {};\n    const command = {\n      listIndexes: this.collectionNamespace.collection,\n      cursor\n    };\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n  constructor(collection, indexes, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const indexes = this.indexes;\n    (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, (err, indexInformation) => {\n      // If we have an error return\n      if (err != null) return callback(err);\n      // Let's check for the index names\n      if (!Array.isArray(indexes)) return callback(undefined, indexInformation[indexes] != null);\n      // Check in list of indexes\n      for (let i = 0; i < indexes.length; i++) {\n        if (indexInformation[indexes[i]] == null) {\n          return callback(undefined, false);\n        }\n      }\n      // All keys found return true\n      return callback(undefined, true);\n    });\n  }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n  constructor(db, name, options) {\n    super(options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.db = db;\n    this.name = name;\n  }\n  execute(server, session, callback) {\n    const db = this.db;\n    const name = this.name;\n    (0, common_functions_1.indexInformation)(db, name, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, callback);\n  }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":"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","names":["VALID_INDEX_OPTIONS","Set","isIndexDirection","x","isSingleIndexTuple","t","Array","isArray","length","makeIndexSpec","indexSpec","options","key","Map","indexSpecs","spec","set","property","value","Object","entries","IndexesOperation","operation_1","constructor","collection","execute","server","session","callback","coll","s","db","collectionName","full","readPreference","exports","CreateIndexesOperation","command_1","parent","indexes","map","userIndex","name","from","flat","join","validIndexOptions","fromEntries","filter","optionName","has","serverWireVersion","cmd","createIndexes","commitQuorum","error_1","collation","undefined","executeCommand","err","indexNames","index","CreateIndexOperation","EnsureIndexOperation","read_preference_1","primary","indexName","cursor","listIndexes","toArray","code","NamespaceNotFound","some","DropIndexOperation","dropIndexes","DropIndexesOperation","ListIndexesOperation","collectionNamespace","namespace","batchSize","command","comment","IndexExistsOperation","indexInformation","i","IndexInformationOperation","READ_OPERATION","RETRYABLE","CURSOR_CREATING","WRITE_OPERATION"],"sources":["/Users/seifmohamed/Documents/webdev/node_modules/mongodb/src/operations/indexes.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Db } from '../db';\nimport { MongoCompatibilityError, MONGODB_ERROR_CODES, MongoServerError } from '../error';\nimport type { OneOrMore } from '../mongo_types';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, isObject, maxWireVersion, MongoDBNamespace } from '../utils';\nimport {\n  CollationOptions,\n  CommandOperation,\n  CommandOperationOptions,\n  OperationParent\n} from './command';\nimport { indexInformation, IndexInformationOptions } from './common_functions';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\nconst VALID_INDEX_OPTIONS = new Set([\n  'background',\n  'unique',\n  'name',\n  'partialFilterExpression',\n  'sparse',\n  'hidden',\n  'expireAfterSeconds',\n  'storageEngine',\n  'collation',\n  'version',\n\n  // text indexes\n  'weights',\n  'default_language',\n  'language_override',\n  'textIndexVersion',\n\n  // 2d-sphere indexes\n  '2dsphereIndexVersion',\n\n  // 2d indexes\n  'bits',\n  'min',\n  'max',\n\n  // geoHaystack Indexes\n  'bucketSize',\n\n  // wildcard indexes\n  'wildcardProjection'\n]);\n\n/** @public */\nexport type IndexDirection = -1 | 1 | '2d' | '2dsphere' | 'text' | 'geoHaystack' | number;\nfunction isIndexDirection(x: unknown): x is IndexDirection {\n  return (\n    typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack'\n  );\n}\n/** @public */\nexport type IndexSpecification = OneOrMore<\n  | string\n  | [string, IndexDirection]\n  | { [key: string]: IndexDirection }\n  | Map<string, IndexDirection>\n>;\n\n/** @public */\nexport interface IndexDescription\n  extends Pick<\n    CreateIndexesOptions,\n    | 'background'\n    | 'unique'\n    | 'partialFilterExpression'\n    | 'sparse'\n    | 'hidden'\n    | 'expireAfterSeconds'\n    | 'storageEngine'\n    | 'version'\n    | 'weights'\n    | 'default_language'\n    | 'language_override'\n    | 'textIndexVersion'\n    | '2dsphereIndexVersion'\n    | 'bits'\n    | 'min'\n    | 'max'\n    | 'bucketSize'\n    | 'wildcardProjection'\n  > {\n  collation?: CollationOptions;\n  name?: string;\n  key: { [key: string]: IndexDirection } | Map<string, IndexDirection>;\n}\n\n/** @public */\nexport interface CreateIndexesOptions extends CommandOperationOptions {\n  /** Creates the index in the background, yielding whenever possible. */\n  background?: boolean;\n  /** Creates an unique index. */\n  unique?: boolean;\n  /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n  name?: string;\n  /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n  partialFilterExpression?: Document;\n  /** Creates a sparse index. */\n  sparse?: boolean;\n  /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n  expireAfterSeconds?: number;\n  /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n  storageEngine?: Document;\n  /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n  commitQuorum?: number | string;\n  /** Specifies the index version number, either 0 or 1. */\n  version?: number;\n  // text indexes\n  weights?: Document;\n  default_language?: string;\n  language_override?: string;\n  textIndexVersion?: number;\n  // 2d-sphere indexes\n  '2dsphereIndexVersion'?: number;\n  // 2d indexes\n  bits?: number;\n  /** For geospatial indexes set the lower bound for the co-ordinates. */\n  min?: number;\n  /** For geospatial indexes set the high bound for the co-ordinates. */\n  max?: number;\n  // geoHaystack Indexes\n  bucketSize?: number;\n  // wildcard indexes\n  wildcardProjection?: Document;\n  /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n  hidden?: boolean;\n}\n\nfunction isSingleIndexTuple(t: unknown): t is [string, IndexDirection] {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n\nfunction makeIndexSpec(\n  indexSpec: IndexSpecification,\n  options?: CreateIndexesOptions\n): IndexDescription {\n  const key: Map<string, IndexDirection> = new Map();\n\n  const indexSpecs =\n    !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], spec[1] ?? 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if (isObject(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n\n  return { ...options, key };\n}\n\n/** @internal */\nexport class IndexesOperation extends AbstractOperation<Document[]> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: IndexInformationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document[]>\n  ): void {\n    const coll = this.collection;\n    const options = this.options;\n\n    indexInformation(\n      coll.s.db,\n      coll.collectionName,\n      { full: true, ...options, readPreference: this.readPreference, session },\n      callback\n    );\n  }\n}\n\n/** @internal */\nexport class CreateIndexesOperation<\n  T extends string | string[] = string[]\n> extends CommandOperation<T> {\n  override options: CreateIndexesOptions;\n  collectionName: string;\n  indexes: ReadonlyArray<Omit<IndexDescription, 'key'> & { key: Map<string, IndexDirection> }>;\n\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexes: IndexDescription[],\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, options);\n\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map(userIndex => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key =\n        userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n      const validIndexOptions = Object.fromEntries(\n        Object.entries({ ...userIndex }).filter(([optionName]) =>\n          VALID_INDEX_OPTIONS.has(optionName)\n        )\n      );\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<T>\n  ): void {\n    const options = this.options;\n    const indexes = this.indexes;\n\n    const serverWireVersion = maxWireVersion(server);\n\n    const cmd: Document = { createIndexes: this.collectionName, indexes };\n\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(\n          new MongoCompatibilityError(\n            'Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'\n          )\n        );\n        return;\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n\n    super.executeCommand(server, session, cmd, err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const indexNames = indexes.map(index => index.name || '');\n      callback(undefined, indexNames as T);\n    });\n  }\n}\n\n/** @internal */\nexport class CreateIndexOperation extends CreateIndexesOperation<string> {\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string>\n  ): void {\n    super.execute(server, session, (err, indexNames) => {\n      if (err || !indexNames) return callback(err);\n      return callback(undefined, indexNames[0]);\n    });\n  }\n}\n\n/** @internal */\nexport class EnsureIndexOperation extends CreateIndexOperation {\n  db: Db;\n\n  constructor(\n    db: Db,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(db, collectionName, indexSpec, options);\n\n    this.readPreference = ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    const indexName = this.indexes[0].name;\n    const cursor = this.db.collection(this.collectionName).listIndexes({ session });\n    cursor.toArray((err, indexes) => {\n      /// ignore \"NamespaceNotFound\" errors\n      if (err && (err as MongoServerError).code !== MONGODB_ERROR_CODES.NamespaceNotFound) {\n        return callback(err);\n      }\n\n      if (indexes) {\n        indexes = Array.isArray(indexes) ? indexes : [indexes];\n        if (indexes.some(index => index.name === indexName)) {\n          callback(undefined, indexName);\n          return;\n        }\n      }\n\n      super.execute(server, session, callback);\n    });\n  }\n}\n\n/** @public */\nexport type DropIndexesOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropIndexOperation extends CommandOperation<Document> {\n  override options: DropIndexesOptions;\n  collection: Collection;\n  indexName: string;\n\n  constructor(collection: Collection, indexName: string, options?: DropIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\n/** @internal */\nexport class DropIndexesOperation extends DropIndexOperation {\n  constructor(collection: Collection, options: DropIndexesOptions) {\n    super(collection, '*', options);\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    super.execute(server, session, err => {\n      if (err) return callback(err, false);\n      callback(undefined, true);\n    });\n  }\n}\n\n/** @public */\nexport interface ListIndexesOptions extends CommandOperationOptions {\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n}\n\n/** @internal */\nexport class ListIndexesOperation extends CommandOperation<Document> {\n  override options: ListIndexesOptions;\n  collectionNamespace: MongoDBNamespace;\n\n  constructor(collection: Collection, options?: ListIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collectionNamespace = collection.s.namespace;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const serverWireVersion = maxWireVersion(server);\n\n    const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n\n    const command: Document = { listIndexes: this.collectionNamespace.collection, cursor };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class IndexExistsOperation extends AbstractOperation<boolean> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n  indexes: string | string[];\n\n  constructor(\n    collection: Collection,\n    indexes: string | string[],\n    options: IndexInformationOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    const coll = this.collection;\n    const indexes = this.indexes;\n\n    indexInformation(\n      coll.s.db,\n      coll.collectionName,\n      { ...this.options, readPreference: this.readPreference, session },\n      (err, indexInformation) => {\n        // If we have an error return\n        if (err != null) return callback(err);\n        // Let's check for the index names\n        if (!Array.isArray(indexes)) return callback(undefined, indexInformation[indexes] != null);\n        // Check in list of indexes\n        for (let i = 0; i < indexes.length; i++) {\n          if (indexInformation[indexes[i]] == null) {\n            return callback(undefined, false);\n          }\n        }\n\n        // All keys found return true\n        return callback(undefined, true);\n      }\n    );\n  }\n}\n\n/** @internal */\nexport class IndexInformationOperation extends AbstractOperation<Document> {\n  override options: IndexInformationOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options?: IndexInformationOptions) {\n    super(options);\n    this.options = options ?? {};\n    this.db = db;\n    this.name = name;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const db = this.db;\n    const name = this.name;\n\n    indexInformation(\n      db,\n      name,\n      { ...this.options, readPreference: this.readPreference, session },\n      callback\n    );\n  }\n}\n\ndefineAspects(ListIndexesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(CreateIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(EnsureIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexesOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}